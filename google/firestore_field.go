// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

func GetFirestoreFieldCaiObject(d TerraformResourceData, config *Config) (Asset, error) {
	name, err := assetName(d, config, "//firestore.googleapis.com/projects/{{project}}/databases/{{database}}/collectionGroups/{{collection}}/fields/{{name}}")
	if err != nil {
		return Asset{}, err
	}
	if obj, err := GetFirestoreFieldApiObject(d, config); err == nil {
		return Asset{
			Name: name,
			Type: "firestore.googleapis.com/Field",
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/firestore/v1/rest",
				DiscoveryName:        "Field",
				Data:                 obj,
			},
		}, nil
	} else {
		return Asset{}, err
	}
}

func GetFirestoreFieldApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	databaseProp, err := expandFirestoreFieldDatabase(d.Get("database"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("database"); !isEmptyValue(reflect.ValueOf(databaseProp)) && (ok || !reflect.DeepEqual(v, databaseProp)) {
		obj["database"] = databaseProp
	}
	collectionProp, err := expandFirestoreFieldCollection(d.Get("collection"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("collection"); !isEmptyValue(reflect.ValueOf(collectionProp)) && (ok || !reflect.DeepEqual(v, collectionProp)) {
		obj["collection"] = collectionProp
	}
	nameProp, err := expandFirestoreFieldName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	indexConfigProp, err := expandFirestoreFieldIndexConfig(d.Get("index_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("index_config"); !isEmptyValue(reflect.ValueOf(indexConfigProp)) && (ok || !reflect.DeepEqual(v, indexConfigProp)) {
		obj["indexConfig"] = indexConfigProp
	}

	return resourceFirestoreFieldEncoder(d, config, obj)
}

func resourceFirestoreFieldEncoder(d TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {

	delete(obj, "project")
	delete(obj, "database")
	delete(obj, "collection")
	delete(obj, "name")
	return obj, nil
}

func expandFirestoreFieldDatabase(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirestoreFieldCollection(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirestoreFieldName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirestoreFieldIndexConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedIndexes, err := expandFirestoreFieldIndexConfigIndexes(original["indexes"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIndexes); val.IsValid() && !isEmptyValue(val) {
		transformed["indexes"] = transformedIndexes
	}

	return transformed, nil
}

func expandFirestoreFieldIndexConfigIndexes(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedQueryScope, err := expandFirestoreFieldIndexConfigIndexesQueryScope(original["query_scope"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedQueryScope); val.IsValid() && !isEmptyValue(val) {
			transformed["queryScope"] = transformedQueryScope
		}

		transformedFields, err := expandFirestoreFieldIndexConfigIndexesFields(original["fields"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFields); val.IsValid() && !isEmptyValue(val) {
			transformed["fields"] = transformedFields
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandFirestoreFieldIndexConfigIndexesQueryScope(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirestoreFieldIndexConfigIndexesFields(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedFieldPath, err := expandFirestoreFieldIndexConfigIndexesFieldsFieldPath(original["field_path"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedFieldPath); val.IsValid() && !isEmptyValue(val) {
			transformed["fieldPath"] = transformedFieldPath
		}

		transformedOrder, err := expandFirestoreFieldIndexConfigIndexesFieldsOrder(original["order"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedOrder); val.IsValid() && !isEmptyValue(val) {
			transformed["order"] = transformedOrder
		}

		transformedArrayConfig, err := expandFirestoreFieldIndexConfigIndexesFieldsArrayConfig(original["array_config"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedArrayConfig); val.IsValid() && !isEmptyValue(val) {
			transformed["arrayConfig"] = transformedArrayConfig
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandFirestoreFieldIndexConfigIndexesFieldsFieldPath(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirestoreFieldIndexConfigIndexesFieldsOrder(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandFirestoreFieldIndexConfigIndexesFieldsArrayConfig(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
