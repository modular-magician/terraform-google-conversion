// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"reflect"

	"github.com/hashicorp/terraform/helper/schema"
)

func GetAppEngineUrlDispatchRuleCaiObject(d TerraformResourceData, config *Config) (Asset, error) {
	name, err := assetName(d, config, "//appengine.googleapis.com/dispatch/update?app_id={{project}}")
	if err != nil {
		return Asset{}, err
	}
	if obj, err := GetAppEngineUrlDispatchRuleApiObject(d, config); err == nil {
		return Asset{
			Name: name,
			Type: "appengine.googleapis.com/UrlDispatchRule",
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/appengine/v1/rest",
				DiscoveryName:        "UrlDispatchRule",
				Data:                 obj,
			},
		}, nil
	} else {
		return Asset{}, err
	}
}

func GetAppEngineUrlDispatchRuleApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	dispatchRulesProp, err := expandAppEngineUrlDispatchRuleDispatchRules(d.Get("dispatch_rules"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("dispatch_rules"); !isEmptyValue(reflect.ValueOf(dispatchRulesProp)) && (ok || !reflect.DeepEqual(v, dispatchRulesProp)) {
		obj["dispatchRules"] = dispatchRulesProp
	}

	return obj, nil
}

func expandAppEngineUrlDispatchRuleDispatchRules(v interface{}, d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	if v == nil {
		return map[string]interface{}{}, nil
	}
	m := make(map[string]interface{})
	for _, raw := range v.(*schema.Set).List() {
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedDomain, err := expandAppEngineUrlDispatchRuleDispatchRulesDomain(original["domain"], d, config)
		if err != nil {
			return nil, err
		}
		transformed["domain"] = transformedDomain
		transformedPath, err := expandAppEngineUrlDispatchRuleDispatchRulesPath(original["path"], d, config)
		if err != nil {
			return nil, err
		}
		transformed["path"] = transformedPath

		m[original["service"].(string)] = transformed
	}
	return m, nil
}

func expandAppEngineUrlDispatchRuleDispatchRulesDomain(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandAppEngineUrlDispatchRuleDispatchRulesPath(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
