// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import "reflect"

const ComputeGlobalOperationAssetType string = "compute.googleapis.com/GlobalOperation"

func resourceConverterComputeGlobalOperation() ResourceConverter {
	return ResourceConverter{
		AssetType: ComputeGlobalOperationAssetType,
		Convert:   GetComputeGlobalOperationCaiObject,
	}
}

func GetComputeGlobalOperationCaiObject(d TerraformResourceData, config *Config) ([]Asset, error) {
	name, err := assetName(d, config, "//compute.googleapis.com/projects/{{project}}/global/operations/{{name}}")
	if err != nil {
		return []Asset{}, err
	}
	if obj, err := GetComputeGlobalOperationApiObject(d, config); err == nil {
		return []Asset{{
			Name: name,
			Type: ComputeGlobalOperationAssetType,
			Resource: &AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/compute/v1/rest",
				DiscoveryName:        "GlobalOperation",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []Asset{}, err
	}
}

func GetComputeGlobalOperationApiObject(d TerraformResourceData, config *Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandComputeGlobalOperationName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !isEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	zoneProp, err := expandComputeGlobalOperationZone(d.Get("zone"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("zone"); !isEmptyValue(reflect.ValueOf(zoneProp)) && (ok || !reflect.DeepEqual(v, zoneProp)) {
		obj["zone"] = zoneProp
	}
	clientOperationIdProp, err := expandComputeGlobalOperationClientOperationId(d.Get("client_operation_id"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("client_operation_id"); !isEmptyValue(reflect.ValueOf(clientOperationIdProp)) && (ok || !reflect.DeepEqual(v, clientOperationIdProp)) {
		obj["clientOperationId"] = clientOperationIdProp
	}
	operationTypeProp, err := expandComputeGlobalOperationOperationType(d.Get("operation_type"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("operation_type"); !isEmptyValue(reflect.ValueOf(operationTypeProp)) && (ok || !reflect.DeepEqual(v, operationTypeProp)) {
		obj["operationType"] = operationTypeProp
	}
	userProp, err := expandComputeGlobalOperationUser(d.Get("user"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("user"); !isEmptyValue(reflect.ValueOf(userProp)) && (ok || !reflect.DeepEqual(v, userProp)) {
		obj["user"] = userProp
	}
	progressProp, err := expandComputeGlobalOperationProgress(d.Get("progress"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("progress"); !isEmptyValue(reflect.ValueOf(progressProp)) && (ok || !reflect.DeepEqual(v, progressProp)) {
		obj["progress"] = progressProp
	}
	statusProp, err := expandComputeGlobalOperationStatus(d.Get("status"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("status"); !isEmptyValue(reflect.ValueOf(statusProp)) && (ok || !reflect.DeepEqual(v, statusProp)) {
		obj["status"] = statusProp
	}
	statusMessageProp, err := expandComputeGlobalOperationStatusMessage(d.Get("status_message"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("status_message"); !isEmptyValue(reflect.ValueOf(statusMessageProp)) && (ok || !reflect.DeepEqual(v, statusMessageProp)) {
		obj["statusMessage"] = statusMessageProp
	}

	return obj, nil
}

func expandComputeGlobalOperationName(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationZone(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationClientOperationId(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationOperationType(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationUser(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationProgress(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationStatus(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandComputeGlobalOperationStatusMessage(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
