// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package datastream

import (
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func extractError(d *schema.ResourceData) error {
	// Casts are not safe since the logic that populate it is type deterministic.
	error := d.Get("error").([]interface{})[0].(map[string]interface{})
	message := error["message"].(string)
	details := error["details"].(map[string]interface{})
	detailsJSON, _ := json.Marshal(details)
	return fmt.Errorf("Failed to create PrivateConnection. %s details = %s", message, string(detailsJSON))
}

// waitForPrivateConnectionReady waits for a private connection state to become
// CREATED, if the state is FAILED propegate the error to the user.
func waitForPrivateConnectionReady(d *schema.ResourceData, config *transport_tpg.Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceDatastreamPrivateConnectionRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "CREATING" {
			return resource.RetryableError(fmt.Errorf("PrivateConnection %q has state %q.", name, state))
		} else if state == "CREATED" {
			log.Printf("[DEBUG] PrivateConnection %q has state %q.", name, state)
			return nil
		} else if state == "FAILED" {
			return resource.NonRetryableError(extractError(d))
		} else {
			return resource.NonRetryableError(fmt.Errorf("PrivateConnection %q has state %q.", name, state))
		}
	})
}

const DatastreamPrivateConnectionAssetType string = "datastream.googleapis.com/PrivateConnection"

const DatastreamPrivateConnectionAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/privateConnections"

type DatastreamPrivateConnectionConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDatastreamPrivateConnectionConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DatastreamPrivateConnectionConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DatastreamPrivateConnectionConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DatastreamPrivateConnectionConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDatastreamPrivateConnectionRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDatastreamPrivateConnectionRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDatastreamPrivateConnectionName(resource["name"], resource_data, config)
	result["labels"] = flattenDatastreamPrivateConnectionLabels(resource["labels"], resource_data, config)
	result["display_name"] = flattenDatastreamPrivateConnectionDisplayName(resource["displayName"], resource_data, config)
	result["state"] = flattenDatastreamPrivateConnectionState(resource["state"], resource_data, config)
	result["error"] = flattenDatastreamPrivateConnectionError(resource["error"], resource_data, config)
	result["vpc_peering_config"] = flattenDatastreamPrivateConnectionVpcPeeringConfig(resource["vpcPeeringConfig"], resource_data, config)
	result["terraform_labels"] = flattenDatastreamPrivateConnectionTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenDatastreamPrivateConnectionEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenDatastreamPrivateConnectionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDatastreamPrivateConnectionDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionError(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["message"] =
		flattenDatastreamPrivateConnectionErrorMessage(original["message"], d, config)
	transformed["details"] =
		flattenDatastreamPrivateConnectionErrorDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamPrivateConnectionErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionErrorDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionVpcPeeringConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["vpc"] =
		flattenDatastreamPrivateConnectionVpcPeeringConfigVpc(original["vpc"], d, config)
	transformed["subnet"] =
		flattenDatastreamPrivateConnectionVpcPeeringConfigSubnet(original["subnet"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamPrivateConnectionVpcPeeringConfigVpc(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionVpcPeeringConfigSubnet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamPrivateConnectionTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDatastreamPrivateConnectionEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
