// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package datastream

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DatastreamConnectionProfileAssetType string = "datastream.googleapis.com/ConnectionProfile"

const DatastreamConnectionProfileAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/connectionProfiles"

type DatastreamConnectionProfileConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDatastreamConnectionProfileConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DatastreamConnectionProfileConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DatastreamConnectionProfileConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DatastreamConnectionProfileConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDatastreamConnectionProfileRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDatastreamConnectionProfileRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDatastreamConnectionProfileName(resource["name"], resource_data, config)
	result["labels"] = flattenDatastreamConnectionProfileLabels(resource["labels"], resource_data, config)
	result["display_name"] = flattenDatastreamConnectionProfileDisplayName(resource["displayName"], resource_data, config)
	result["oracle_profile"] = flattenDatastreamConnectionProfileOracleProfile(resource["oracleProfile"], resource_data, config)
	result["gcs_profile"] = flattenDatastreamConnectionProfileGcsProfile(resource["gcsProfile"], resource_data, config)
	result["mysql_profile"] = flattenDatastreamConnectionProfileMysqlProfile(resource["mysqlProfile"], resource_data, config)
	result["bigquery_profile"] = flattenDatastreamConnectionProfileBigqueryProfile(resource["bigqueryProfile"], resource_data, config)
	result["postgresql_profile"] = flattenDatastreamConnectionProfilePostgresqlProfile(resource["postgresqlProfile"], resource_data, config)
	result["forward_ssh_connectivity"] = flattenDatastreamConnectionProfileForwardSshConnectivity(resource["forwardSshConnectivity"], resource_data, config)
	result["private_connectivity"] = flattenDatastreamConnectionProfilePrivateConnectivity(resource["privateConnectivity"], resource_data, config)
	result["terraform_labels"] = flattenDatastreamConnectionProfileTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenDatastreamConnectionProfileEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenDatastreamConnectionProfileName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDatastreamConnectionProfileDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileOracleProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hostname"] =
		flattenDatastreamConnectionProfileOracleProfileHostname(original["hostname"], d, config)
	transformed["port"] =
		flattenDatastreamConnectionProfileOracleProfilePort(original["port"], d, config)
	transformed["username"] =
		flattenDatastreamConnectionProfileOracleProfileUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatastreamConnectionProfileOracleProfilePassword(original["password"], d, config)
	transformed["database_service"] =
		flattenDatastreamConnectionProfileOracleProfileDatabaseService(original["databaseService"], d, config)
	transformed["connection_attributes"] =
		flattenDatastreamConnectionProfileOracleProfileConnectionAttributes(original["connectionAttributes"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamConnectionProfileOracleProfileHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileOracleProfilePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatastreamConnectionProfileOracleProfileUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileOracleProfilePassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle_profile.0.password")
}

func flattenDatastreamConnectionProfileOracleProfileDatabaseService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileOracleProfileConnectionAttributes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileGcsProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bucket"] =
		flattenDatastreamConnectionProfileGcsProfileBucket(original["bucket"], d, config)
	transformed["root_path"] =
		flattenDatastreamConnectionProfileGcsProfileRootPath(original["rootPath"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamConnectionProfileGcsProfileBucket(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileGcsProfileRootPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileMysqlProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hostname"] =
		flattenDatastreamConnectionProfileMysqlProfileHostname(original["hostname"], d, config)
	transformed["port"] =
		flattenDatastreamConnectionProfileMysqlProfilePort(original["port"], d, config)
	transformed["username"] =
		flattenDatastreamConnectionProfileMysqlProfileUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatastreamConnectionProfileMysqlProfilePassword(original["password"], d, config)
	transformed["ssl_config"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfig(original["sslConfig"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamConnectionProfileMysqlProfileHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileMysqlProfilePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatastreamConnectionProfileMysqlProfileUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileMysqlProfilePassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql_profile.0.password")
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["client_key"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfigClientKey(original["clientKey"], d, config)
	transformed["client_key_set"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfigClientKeySet(original["clientKeySet"], d, config)
	transformed["client_certificate"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfigClientCertificate(original["clientCertificate"], d, config)
	transformed["client_certificate_set"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfigClientCertificateSet(original["clientCertificateSet"], d, config)
	transformed["ca_certificate"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfigCaCertificate(original["caCertificate"], d, config)
	transformed["ca_certificate_set"] =
		flattenDatastreamConnectionProfileMysqlProfileSslConfigCaCertificateSet(original["caCertificateSet"], d, config)
	return []interface{}{transformed}
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfigClientKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql_profile.0.ssl_config.0.client_key")
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfigClientKeySet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfigClientCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql_profile.0.ssl_config.0.client_certificate")
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfigClientCertificateSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfigCaCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql_profile.0.ssl_config.0.ca_certificate")
}

func flattenDatastreamConnectionProfileMysqlProfileSslConfigCaCertificateSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileBigqueryProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDatastreamConnectionProfilePostgresqlProfile(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hostname"] =
		flattenDatastreamConnectionProfilePostgresqlProfileHostname(original["hostname"], d, config)
	transformed["port"] =
		flattenDatastreamConnectionProfilePostgresqlProfilePort(original["port"], d, config)
	transformed["username"] =
		flattenDatastreamConnectionProfilePostgresqlProfileUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatastreamConnectionProfilePostgresqlProfilePassword(original["password"], d, config)
	transformed["database"] =
		flattenDatastreamConnectionProfilePostgresqlProfileDatabase(original["database"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamConnectionProfilePostgresqlProfileHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfilePostgresqlProfilePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatastreamConnectionProfilePostgresqlProfileUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfilePostgresqlProfilePassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql_profile.0.password")
}

func flattenDatastreamConnectionProfilePostgresqlProfileDatabase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileForwardSshConnectivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hostname"] =
		flattenDatastreamConnectionProfileForwardSshConnectivityHostname(original["hostname"], d, config)
	transformed["username"] =
		flattenDatastreamConnectionProfileForwardSshConnectivityUsername(original["username"], d, config)
	transformed["port"] =
		flattenDatastreamConnectionProfileForwardSshConnectivityPort(original["port"], d, config)
	transformed["password"] =
		flattenDatastreamConnectionProfileForwardSshConnectivityPassword(original["password"], d, config)
	transformed["private_key"] =
		flattenDatastreamConnectionProfileForwardSshConnectivityPrivateKey(original["privateKey"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamConnectionProfileForwardSshConnectivityHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileForwardSshConnectivityUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileForwardSshConnectivityPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatastreamConnectionProfileForwardSshConnectivityPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("forward_ssh_connectivity.0.password")
}

func flattenDatastreamConnectionProfileForwardSshConnectivityPrivateKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("forward_ssh_connectivity.0.private_key")
}

func flattenDatastreamConnectionProfilePrivateConnectivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["private_connection"] =
		flattenDatastreamConnectionProfilePrivateConnectivityPrivateConnection(original["privateConnection"], d, config)
	return []interface{}{transformed}
}
func flattenDatastreamConnectionProfilePrivateConnectivityPrivateConnection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatastreamConnectionProfileTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDatastreamConnectionProfileEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
