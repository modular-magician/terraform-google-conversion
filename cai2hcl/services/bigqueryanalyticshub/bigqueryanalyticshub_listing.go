// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package bigqueryanalyticshub

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const BigqueryAnalyticsHubListingAssetType string = "analyticshub.googleapis.com/Listing"

const BigqueryAnalyticsHubListingAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/dataExchanges/(?P<data_exchange_id>[^/]+)/listings"

type BigqueryAnalyticsHubListingConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewBigqueryAnalyticsHubListingConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &BigqueryAnalyticsHubListingConverter{
		name:   name,
		schema: schema,
	}
}

func (c *BigqueryAnalyticsHubListingConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *BigqueryAnalyticsHubListingConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceBigqueryAnalyticsHubListingRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceBigqueryAnalyticsHubListingRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenBigqueryAnalyticsHubListingName(resource["name"], resource_data, config)
	result["display_name"] = flattenBigqueryAnalyticsHubListingDisplayName(resource["displayName"], resource_data, config)
	result["description"] = flattenBigqueryAnalyticsHubListingDescription(resource["description"], resource_data, config)
	result["primary_contact"] = flattenBigqueryAnalyticsHubListingPrimaryContact(resource["primaryContact"], resource_data, config)
	result["documentation"] = flattenBigqueryAnalyticsHubListingDocumentation(resource["documentation"], resource_data, config)
	result["icon"] = flattenBigqueryAnalyticsHubListingIcon(resource["icon"], resource_data, config)
	result["request_access"] = flattenBigqueryAnalyticsHubListingRequestAccess(resource["requestAccess"], resource_data, config)
	result["data_provider"] = flattenBigqueryAnalyticsHubListingDataProvider(resource["dataProvider"], resource_data, config)
	result["publisher"] = flattenBigqueryAnalyticsHubListingPublisher(resource["publisher"], resource_data, config)
	result["categories"] = flattenBigqueryAnalyticsHubListingCategories(resource["categories"], resource_data, config)
	result["bigquery_dataset"] = flattenBigqueryAnalyticsHubListingBigqueryDataset(resource["bigqueryDataset"], resource_data, config)

	return result, nil
}

func flattenBigqueryAnalyticsHubListingName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingPrimaryContact(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingDocumentation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingIcon(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingRequestAccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingDataProvider(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenBigqueryAnalyticsHubListingDataProviderName(original["name"], d, config)
	transformed["primary_contact"] =
		flattenBigqueryAnalyticsHubListingDataProviderPrimaryContact(original["primaryContact"], d, config)
	return []interface{}{transformed}
}
func flattenBigqueryAnalyticsHubListingDataProviderName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingDataProviderPrimaryContact(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingPublisher(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenBigqueryAnalyticsHubListingPublisherName(original["name"], d, config)
	transformed["primary_contact"] =
		flattenBigqueryAnalyticsHubListingPublisherPrimaryContact(original["primaryContact"], d, config)
	return []interface{}{transformed}
}
func flattenBigqueryAnalyticsHubListingPublisherName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingPublisherPrimaryContact(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingCategories(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenBigqueryAnalyticsHubListingBigqueryDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["dataset"] =
		flattenBigqueryAnalyticsHubListingBigqueryDatasetDataset(original["dataset"], d, config)
	return []interface{}{transformed}
}
func flattenBigqueryAnalyticsHubListingBigqueryDatasetDataset(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
