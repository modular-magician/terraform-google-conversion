// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudrunv2

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const CloudRunV2JobAssetType string = "run.googleapis.com/Job"

const CloudRunV2JobAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/jobs"

type CloudRunV2JobConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewCloudRunV2JobConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &CloudRunV2JobConverter{
		name:   name,
		schema: schema,
	}
}

func (c *CloudRunV2JobConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *CloudRunV2JobConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceCloudRunV2JobRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceCloudRunV2JobRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["uid"] = flattenCloudRunV2JobUid(resource["uid"], resource_data, config)
	result["generation"] = flattenCloudRunV2JobGeneration(resource["generation"], resource_data, config)
	result["labels"] = flattenCloudRunV2JobLabels(resource["labels"], resource_data, config)
	result["annotations"] = flattenCloudRunV2JobAnnotations(resource["annotations"], resource_data, config)
	result["create_time"] = flattenCloudRunV2JobCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenCloudRunV2JobUpdateTime(resource["updateTime"], resource_data, config)
	result["delete_time"] = flattenCloudRunV2JobDeleteTime(resource["deleteTime"], resource_data, config)
	result["expire_time"] = flattenCloudRunV2JobExpireTime(resource["expireTime"], resource_data, config)
	result["creator"] = flattenCloudRunV2JobCreator(resource["creator"], resource_data, config)
	result["last_modifier"] = flattenCloudRunV2JobLastModifier(resource["lastModifier"], resource_data, config)
	result["client"] = flattenCloudRunV2JobClient(resource["client"], resource_data, config)
	result["client_version"] = flattenCloudRunV2JobClientVersion(resource["clientVersion"], resource_data, config)
	result["launch_stage"] = flattenCloudRunV2JobLaunchStage(resource["launchStage"], resource_data, config)
	result["binary_authorization"] = flattenCloudRunV2JobBinaryAuthorization(resource["binaryAuthorization"], resource_data, config)
	result["template"] = flattenCloudRunV2JobTemplate(resource["template"], resource_data, config)
	result["observed_generation"] = flattenCloudRunV2JobObservedGeneration(resource["observedGeneration"], resource_data, config)
	result["terminal_condition"] = flattenCloudRunV2JobTerminalCondition(resource["terminalCondition"], resource_data, config)
	result["conditions"] = flattenCloudRunV2JobConditions(resource["conditions"], resource_data, config)
	result["execution_count"] = flattenCloudRunV2JobExecutionCount(resource["executionCount"], resource_data, config)
	result["latest_created_execution"] = flattenCloudRunV2JobLatestCreatedExecution(resource["latestCreatedExecution"], resource_data, config)
	result["reconciling"] = flattenCloudRunV2JobReconciling(resource["reconciling"], resource_data, config)
	result["etag"] = flattenCloudRunV2JobEtag(resource["etag"], resource_data, config)
	result["terraform_labels"] = flattenCloudRunV2JobTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenCloudRunV2JobEffectiveLabels(resource["labels"], resource_data, config)
	result["effective_annotations"] = flattenCloudRunV2JobEffectiveAnnotations(resource["annotations"], resource_data, config)

	return result, nil
}

func flattenCloudRunV2JobUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobGeneration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenCloudRunV2JobAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenCloudRunV2JobCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobExpireTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobCreator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobLastModifier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobClient(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobClientVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobLaunchStage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobBinaryAuthorization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["breakglass_justification"] =
		flattenCloudRunV2JobBinaryAuthorizationBreakglassJustification(original["breakglassJustification"], d, config)
	transformed["use_default"] =
		flattenCloudRunV2JobBinaryAuthorizationUseDefault(original["useDefault"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobBinaryAuthorizationBreakglassJustification(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobBinaryAuthorizationUseDefault(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["labels"] =
		flattenCloudRunV2JobTemplateLabels(original["labels"], d, config)
	transformed["annotations"] =
		flattenCloudRunV2JobTemplateAnnotations(original["annotations"], d, config)
	transformed["parallelism"] =
		flattenCloudRunV2JobTemplateParallelism(original["parallelism"], d, config)
	transformed["task_count"] =
		flattenCloudRunV2JobTemplateTaskCount(original["taskCount"], d, config)
	transformed["template"] =
		flattenCloudRunV2JobTemplateTemplate(original["template"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateParallelism(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobTemplateTaskCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobTemplateTemplate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["containers"] =
		flattenCloudRunV2JobTemplateTemplateContainers(original["containers"], d, config)
	transformed["volumes"] =
		flattenCloudRunV2JobTemplateTemplateVolumes(original["volumes"], d, config)
	transformed["timeout"] =
		flattenCloudRunV2JobTemplateTemplateTimeout(original["timeout"], d, config)
	transformed["service_account"] =
		flattenCloudRunV2JobTemplateTemplateServiceAccount(original["serviceAccount"], d, config)
	transformed["execution_environment"] =
		flattenCloudRunV2JobTemplateTemplateExecutionEnvironment(original["executionEnvironment"], d, config)
	transformed["encryption_key"] =
		flattenCloudRunV2JobTemplateTemplateEncryptionKey(original["encryptionKey"], d, config)
	transformed["vpc_access"] =
		flattenCloudRunV2JobTemplateTemplateVpcAccess(original["vpcAccess"], d, config)
	transformed["max_retries"] =
		flattenCloudRunV2JobTemplateTemplateMaxRetries(original["maxRetries"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateContainers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":          flattenCloudRunV2JobTemplateTemplateContainersName(original["name"], d, config),
			"image":         flattenCloudRunV2JobTemplateTemplateContainersImage(original["image"], d, config),
			"command":       flattenCloudRunV2JobTemplateTemplateContainersCommand(original["command"], d, config),
			"args":          flattenCloudRunV2JobTemplateTemplateContainersArgs(original["args"], d, config),
			"env":           flattenCloudRunV2JobTemplateTemplateContainersEnv(original["env"], d, config),
			"resources":     flattenCloudRunV2JobTemplateTemplateContainersResources(original["resources"], d, config),
			"ports":         flattenCloudRunV2JobTemplateTemplateContainersPorts(original["ports"], d, config),
			"volume_mounts": flattenCloudRunV2JobTemplateTemplateContainersVolumeMounts(original["volumeMounts"], d, config),
			"working_dir":   flattenCloudRunV2JobTemplateTemplateContainersWorkingDir(original["workingDir"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateContainersName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersImage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersCommand(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersArgs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersEnv(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":         flattenCloudRunV2JobTemplateTemplateContainersEnvName(original["name"], d, config),
			"value":        flattenCloudRunV2JobTemplateTemplateContainersEnvValue(original["value"], d, config),
			"value_source": flattenCloudRunV2JobTemplateTemplateContainersEnvValueSource(original["valueSource"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateContainersEnvName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersEnvValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersEnvValueSource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret_key_ref"] =
		flattenCloudRunV2JobTemplateTemplateContainersEnvValueSourceSecretKeyRef(original["secretKeyRef"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateContainersEnvValueSourceSecretKeyRef(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret"] =
		flattenCloudRunV2JobTemplateTemplateContainersEnvValueSourceSecretKeyRefSecret(original["secret"], d, config)
	transformed["version"] =
		flattenCloudRunV2JobTemplateTemplateContainersEnvValueSourceSecretKeyRefVersion(original["version"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateContainersEnvValueSourceSecretKeyRefSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersEnvValueSourceSecretKeyRefVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersResources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["limits"] =
		flattenCloudRunV2JobTemplateTemplateContainersResourcesLimits(original["limits"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateContainersResourcesLimits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersPorts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":           flattenCloudRunV2JobTemplateTemplateContainersPortsName(original["name"], d, config),
			"container_port": flattenCloudRunV2JobTemplateTemplateContainersPortsContainerPort(original["containerPort"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateContainersPortsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersPortsContainerPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobTemplateTemplateContainersVolumeMounts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":       flattenCloudRunV2JobTemplateTemplateContainersVolumeMountsName(original["name"], d, config),
			"mount_path": flattenCloudRunV2JobTemplateTemplateContainersVolumeMountsMountPath(original["mountPath"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateContainersVolumeMountsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersVolumeMountsMountPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateContainersWorkingDir(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":               flattenCloudRunV2JobTemplateTemplateVolumesName(original["name"], d, config),
			"secret":             flattenCloudRunV2JobTemplateTemplateVolumesSecret(original["secret"], d, config),
			"cloud_sql_instance": flattenCloudRunV2JobTemplateTemplateVolumesCloudSqlInstance(original["cloudSqlInstance"], d, config),
			"empty_dir":          flattenCloudRunV2JobTemplateTemplateVolumesEmptyDir(original["emptyDir"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateVolumesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumesSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["secret"] =
		flattenCloudRunV2JobTemplateTemplateVolumesSecretSecret(original["secret"], d, config)
	transformed["default_mode"] =
		flattenCloudRunV2JobTemplateTemplateVolumesSecretDefaultMode(original["defaultMode"], d, config)
	transformed["items"] =
		flattenCloudRunV2JobTemplateTemplateVolumesSecretItems(original["items"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateVolumesSecretSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumesSecretDefaultMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobTemplateTemplateVolumesSecretItems(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"path":    flattenCloudRunV2JobTemplateTemplateVolumesSecretItemsPath(original["path"], d, config),
			"version": flattenCloudRunV2JobTemplateTemplateVolumesSecretItemsVersion(original["version"], d, config),
			"mode":    flattenCloudRunV2JobTemplateTemplateVolumesSecretItemsMode(original["mode"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateVolumesSecretItemsPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumesSecretItemsVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumesSecretItemsMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobTemplateTemplateVolumesCloudSqlInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["instances"] =
		flattenCloudRunV2JobTemplateTemplateVolumesCloudSqlInstanceInstances(original["instances"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateVolumesCloudSqlInstanceInstances(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumesEmptyDir(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["medium"] =
		flattenCloudRunV2JobTemplateTemplateVolumesEmptyDirMedium(original["medium"], d, config)
	transformed["size_limit"] =
		flattenCloudRunV2JobTemplateTemplateVolumesEmptyDirSizeLimit(original["sizeLimit"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateVolumesEmptyDirMedium(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVolumesEmptyDirSizeLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateExecutionEnvironment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateEncryptionKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVpcAccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["connector"] =
		flattenCloudRunV2JobTemplateTemplateVpcAccessConnector(original["connector"], d, config)
	transformed["egress"] =
		flattenCloudRunV2JobTemplateTemplateVpcAccessEgress(original["egress"], d, config)
	transformed["network_interfaces"] =
		flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfaces(original["networkInterfaces"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTemplateTemplateVpcAccessConnector(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVpcAccessEgress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"network":    flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfacesNetwork(original["network"], d, config),
			"subnetwork": flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfacesSubnetwork(original["subnetwork"], d, config),
			"tags":       flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfacesTags(original["tags"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfacesNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfacesSubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateVpcAccessNetworkInterfacesTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTemplateTemplateMaxRetries(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobObservedGeneration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenCloudRunV2JobTerminalConditionType(original["type"], d, config)
	transformed["state"] =
		flattenCloudRunV2JobTerminalConditionState(original["state"], d, config)
	transformed["message"] =
		flattenCloudRunV2JobTerminalConditionMessage(original["message"], d, config)
	transformed["last_transition_time"] =
		flattenCloudRunV2JobTerminalConditionLastTransitionTime(original["lastTransitionTime"], d, config)
	transformed["severity"] =
		flattenCloudRunV2JobTerminalConditionSeverity(original["severity"], d, config)
	transformed["reason"] =
		flattenCloudRunV2JobTerminalConditionReason(original["reason"], d, config)
	transformed["revision_reason"] =
		flattenCloudRunV2JobTerminalConditionRevisionReason(original["revisionReason"], d, config)
	transformed["execution_reason"] =
		flattenCloudRunV2JobTerminalConditionExecutionReason(original["executionReason"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobTerminalConditionType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionRevisionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerminalConditionExecutionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":                 flattenCloudRunV2JobConditionsType(original["type"], d, config),
			"state":                flattenCloudRunV2JobConditionsState(original["state"], d, config),
			"message":              flattenCloudRunV2JobConditionsMessage(original["message"], d, config),
			"last_transition_time": flattenCloudRunV2JobConditionsLastTransitionTime(original["lastTransitionTime"], d, config),
			"severity":             flattenCloudRunV2JobConditionsSeverity(original["severity"], d, config),
			"reason":               flattenCloudRunV2JobConditionsReason(original["reason"], d, config),
			"revision_reason":      flattenCloudRunV2JobConditionsRevisionReason(original["revisionReason"], d, config),
			"execution_reason":     flattenCloudRunV2JobConditionsExecutionReason(original["executionReason"], d, config),
		})
	}
	return transformed
}
func flattenCloudRunV2JobConditionsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsRevisionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobConditionsExecutionReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobExecutionCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenCloudRunV2JobLatestCreatedExecution(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenCloudRunV2JobLatestCreatedExecutionName(original["name"], d, config)
	transformed["create_time"] =
		flattenCloudRunV2JobLatestCreatedExecutionCreateTime(original["createTime"], d, config)
	transformed["completion_time"] =
		flattenCloudRunV2JobLatestCreatedExecutionCompletionTime(original["completionTime"], d, config)
	return []interface{}{transformed}
}
func flattenCloudRunV2JobLatestCreatedExecutionName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobLatestCreatedExecutionCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobLatestCreatedExecutionCompletionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobReconciling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenCloudRunV2JobEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudRunV2JobEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
