// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package documentaiwarehouse

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DocumentAIWarehouseDocumentSchemaAssetType string = "contentwarehouse.googleapis.com/DocumentSchema"

const DocumentAIWarehouseDocumentSchemaAssetNameRegex string = "projects/(?P<project_number>[^/]+)/locations/(?P<location>[^/]+)/documentSchemas"

type DocumentAIWarehouseDocumentSchemaConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDocumentAIWarehouseDocumentSchemaConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DocumentAIWarehouseDocumentSchemaConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DocumentAIWarehouseDocumentSchemaConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DocumentAIWarehouseDocumentSchemaConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDocumentAIWarehouseDocumentSchemaRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDocumentAIWarehouseDocumentSchemaRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDocumentAIWarehouseDocumentSchemaName(resource["name"], resource_data, config)
	result["display_name"] = flattenDocumentAIWarehouseDocumentSchemaDisplayName(resource["displayName"], resource_data, config)
	result["document_is_folder"] = flattenDocumentAIWarehouseDocumentSchemaDocumentIsFolder(resource["documentIsFolder"], resource_data, config)
	result["property_definitions"] = flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitions(resource["propertyDefinitions"], resource_data, config)

	return result, nil
}

func flattenDocumentAIWarehouseDocumentSchemaName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaDocumentIsFolder(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":                   flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsName(original["name"], d, config),
			"display_name":           flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDisplayName(original["displayName"], d, config),
			"is_repeatable":          flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRepeatable(original["isRepeatable"], d, config),
			"is_filterable":          flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsFilterable(original["isFilterable"], d, config),
			"is_searchable":          flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsSearchable(original["isSearchable"], d, config),
			"is_metadata":            flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsMetadata(original["isMetadata"], d, config),
			"is_required":            flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRequired(original["isRequired"], d, config),
			"retrieval_importance":   flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsRetrievalImportance(original["retrievalImportance"], d, config),
			"schema_sources":         flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSources(original["schemaSources"], d, config),
			"integer_type_options":   flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptions(original["integerTypeOptions"], d, config),
			"float_type_options":     flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptions(original["floatTypeOptions"], d, config),
			"text_type_options":      flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptions(original["textTypeOptions"], d, config),
			"property_type_options":  flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptions(original["propertyTypeOptions"], d, config),
			"enum_type_options":      flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptions(original["enumTypeOptions"], d, config),
			"date_time_type_options": flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptions(original["dateTimeTypeOptions"], d, config),
			"map_type_options":       flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptions(original["mapTypeOptions"], d, config),
			"timestamp_type_options": flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptions(original["timestampTypeOptions"], d, config),
		})
	}
	return transformed
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRepeatable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsFilterable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsSearchable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIsRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsRetrievalImportance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":           flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesName(original["name"], d, config),
			"processor_type": flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesProcessorType(original["processorType"], d, config),
		})
	}
	return transformed
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsSchemaSourcesProcessorType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsIntegerTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsFloatTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTextTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["property_definitions"] =
		flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitions(original["propertyDefinitions"], d, config)
	return []interface{}{transformed}
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":                   flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsName(original["name"], d, config),
			"display_name":           flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDisplayName(original["displayName"], d, config),
			"is_repeatable":          flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRepeatable(original["isRepeatable"], d, config),
			"is_filterable":          flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsFilterable(original["isFilterable"], d, config),
			"is_searchable":          flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsSearchable(original["isSearchable"], d, config),
			"is_metadata":            flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsMetadata(original["isMetadata"], d, config),
			"is_required":            flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRequired(original["isRequired"], d, config),
			"retrieval_importance":   flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsRetrievalImportance(original["retrievalImportance"], d, config),
			"schema_sources":         flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSources(original["schemaSources"], d, config),
			"integer_type_options":   flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptions(original["integerTypeOptions"], d, config),
			"float_type_options":     flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptions(original["floatTypeOptions"], d, config),
			"text_type_options":      flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptions(original["textTypeOptions"], d, config),
			"enum_type_options":      flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptions(original["enumTypeOptions"], d, config),
			"date_time_type_options": flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptions(original["dateTimeTypeOptions"], d, config),
			"map_type_options":       flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptions(original["mapTypeOptions"], d, config),
			"timestamp_type_options": flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptions(original["timestampTypeOptions"], d, config),
		})
	}
	return transformed
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRepeatable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsFilterable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsSearchable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIsRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsRetrievalImportance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":           flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesName(original["name"], d, config),
			"processor_type": flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesProcessorType(original["processorType"], d, config),
		})
	}
	return transformed
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsSchemaSourcesProcessorType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsIntegerTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsFloatTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTextTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["possible_values"] =
		flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsPossibleValues(original["possibleValues"], d, config)
	transformed["validation_check_disabled"] =
		flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(original["validationCheckDisabled"], d, config)
	return []interface{}{transformed}
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsPossibleValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsDateTimeTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsMapTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsPropertyTypeOptionsPropertyDefinitionsTimestampTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["possible_values"] =
		flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsPossibleValues(original["possibleValues"], d, config)
	transformed["validation_check_disabled"] =
		flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(original["validationCheckDisabled"], d, config)
	return []interface{}{transformed}
}
func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsPossibleValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsEnumTypeOptionsValidationCheckDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsDateTimeTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsMapTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDocumentAIWarehouseDocumentSchemaPropertyDefinitionsTimestampTypeOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}
