// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package securitycenter

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const SecurityCenterOrganizationCustomModuleAssetType string = "securitycenter.googleapis.com/OrganizationCustomModule"

const SecurityCenterOrganizationCustomModuleAssetNameRegex string = "organizations/(?P<organization>[^/]+)/securityHealthAnalyticsSettings/customModules"

type SecurityCenterOrganizationCustomModuleConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewSecurityCenterOrganizationCustomModuleConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &SecurityCenterOrganizationCustomModuleConverter{
		name:   name,
		schema: schema,
	}
}

func (c *SecurityCenterOrganizationCustomModuleConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *SecurityCenterOrganizationCustomModuleConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceSecurityCenterOrganizationCustomModuleRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceSecurityCenterOrganizationCustomModuleRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenSecurityCenterOrganizationCustomModuleName(resource["name"], resource_data, config)
	result["display_name"] = flattenSecurityCenterOrganizationCustomModuleDisplayName(resource["displayName"], resource_data, config)
	result["enablement_state"] = flattenSecurityCenterOrganizationCustomModuleEnablementState(resource["enablementState"], resource_data, config)
	result["update_time"] = flattenSecurityCenterOrganizationCustomModuleUpdateTime(resource["updateTime"], resource_data, config)
	result["last_editor"] = flattenSecurityCenterOrganizationCustomModuleLastEditor(resource["lastEditor"], resource_data, config)
	result["ancestor_module"] = flattenSecurityCenterOrganizationCustomModuleAncestorModule(resource["ancestorModule"], resource_data, config)
	result["custom_config"] = flattenSecurityCenterOrganizationCustomModuleCustomConfig(resource["customConfig"], resource_data, config)

	return result, nil
}

func flattenSecurityCenterOrganizationCustomModuleName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenSecurityCenterOrganizationCustomModuleDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleEnablementState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleLastEditor(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleAncestorModule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["predicate"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicate(original["predicate"], d, config)
	transformed["custom_output"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutput(original["customOutput"], d, config)
	transformed["resource_selector"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigResourceSelector(original["resourceSelector"], d, config)
	transformed["severity"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigSeverity(original["severity"], d, config)
	transformed["description"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigDescription(original["description"], d, config)
	transformed["recommendation"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigRecommendation(original["recommendation"], d, config)
	return []interface{}{transformed}
}
func flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expression"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateExpression(original["expression"], d, config)
	transformed["title"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateTitle(original["title"], d, config)
	transformed["description"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateDescription(original["description"], d, config)
	transformed["location"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateLocation(original["location"], d, config)
	return []interface{}{transformed}
}
func flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateTitle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigPredicateLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["properties"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputProperties(original["properties"], d, config)
	return []interface{}{transformed}
}
func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputProperties(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"name":             flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesName(original["name"], d, config),
			"value_expression": flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpression(original["valueExpression"], d, config),
		})
	}
	return transformed
}
func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expression"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionExpression(original["expression"], d, config)
	transformed["title"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionTitle(original["title"], d, config)
	transformed["description"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionDescription(original["description"], d, config)
	transformed["location"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionLocation(original["location"], d, config)
	return []interface{}{transformed}
}
func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionTitle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigCustomOutputPropertiesValueExpressionLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigResourceSelector(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["resource_types"] =
		flattenSecurityCenterOrganizationCustomModuleCustomConfigResourceSelectorResourceTypes(original["resourceTypes"], d, config)
	return []interface{}{transformed}
}
func flattenSecurityCenterOrganizationCustomModuleCustomConfigResourceSelectorResourceTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenSecurityCenterOrganizationCustomModuleCustomConfigRecommendation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
