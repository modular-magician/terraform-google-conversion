// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package iamworkforcepool

import (
	"fmt"
	"regexp"
	"strings"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const workforcePoolProviderIdRegexp = `^[a-z0-9-]{4,32}$`

func ValidateWorkforcePoolProviderId(v interface{}, k string) (ws []string, errors []error) {
	value := v.(string)

	if strings.HasPrefix(value, "gcp-") {
		errors = append(errors, fmt.Errorf(
			"%q (%q) can not start with \"gcp-\". "+
				"The prefix `gcp-` is reserved for use by Google, and may not be specified.", k, value))
	}

	if !regexp.MustCompile(workforcePoolProviderIdRegexp).MatchString(value) {
		errors = append(errors, fmt.Errorf(
			"%q (%q) must be 4-32 characters, and may contain the characters [a-z0-9-].", k, value))
	}

	return
}

const IAMWorkforcePoolWorkforcePoolProviderAssetType string = "iam.googleapis.com/WorkforcePoolProvider"

const IAMWorkforcePoolWorkforcePoolProviderAssetNameRegex string = "locations/(?P<location>[^/]+)/workforcePools/(?P<workforce_pool_id>[^/]+)/providers"

type IAMWorkforcePoolWorkforcePoolProviderConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewIAMWorkforcePoolWorkforcePoolProviderConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &IAMWorkforcePoolWorkforcePoolProviderConverter{
		name:   name,
		schema: schema,
	}
}

func (c *IAMWorkforcePoolWorkforcePoolProviderConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *IAMWorkforcePoolWorkforcePoolProviderConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceIAMWorkforcePoolWorkforcePoolProviderRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceIAMWorkforcePoolWorkforcePoolProviderRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenIAMWorkforcePoolWorkforcePoolProviderName(resource["name"], resource_data, config)
	result["display_name"] = flattenIAMWorkforcePoolWorkforcePoolProviderDisplayName(resource["displayName"], resource_data, config)
	result["description"] = flattenIAMWorkforcePoolWorkforcePoolProviderDescription(resource["description"], resource_data, config)
	result["state"] = flattenIAMWorkforcePoolWorkforcePoolProviderState(resource["state"], resource_data, config)
	result["disabled"] = flattenIAMWorkforcePoolWorkforcePoolProviderDisabled(resource["disabled"], resource_data, config)
	result["attribute_mapping"] = flattenIAMWorkforcePoolWorkforcePoolProviderAttributeMapping(resource["attributeMapping"], resource_data, config)
	result["attribute_condition"] = flattenIAMWorkforcePoolWorkforcePoolProviderAttributeCondition(resource["attributeCondition"], resource_data, config)
	result["saml"] = flattenIAMWorkforcePoolWorkforcePoolProviderSaml(resource["saml"], resource_data, config)
	result["oidc"] = flattenIAMWorkforcePoolWorkforcePoolProviderOidc(resource["oidc"], resource_data, config)

	return result, nil
}

func flattenIAMWorkforcePoolWorkforcePoolProviderName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderAttributeMapping(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderAttributeCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderSaml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["idp_metadata_xml"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderSamlIdpMetadataXml(original["idpMetadataXml"], d, config)
	return []interface{}{transformed}
}
func flattenIAMWorkforcePoolWorkforcePoolProviderSamlIdpMetadataXml(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidc(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["issuer_uri"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcIssuerUri(original["issuerUri"], d, config)
	transformed["client_id"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcClientId(original["clientId"], d, config)
	transformed["client_secret"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcClientSecret(original["clientSecret"], d, config)
	transformed["web_sso_config"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfig(original["webSsoConfig"], d, config)
	transformed["jwks_json"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcJwksJson(original["jwksJson"], d, config)
	return []interface{}{transformed}
}
func flattenIAMWorkforcePoolWorkforcePoolProviderOidcIssuerUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidcClientId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidcClientSecret(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["value"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcClientSecretValue(original["value"], d, config)
	return []interface{}{transformed}
}
func flattenIAMWorkforcePoolWorkforcePoolProviderOidcClientSecretValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["thumbprint"] = original["thumbprint"]
	// Trigger a diff based on the plain_text if there is no change in the thumbprint,
	// otherwise leave plain_text empty to always trigger a diff.
	if original["thumbprint"].(string) == d.Get("oidc.0.client_secret.0.value.0.thumbprint").(string) {
		transformed["plain_text"] = d.Get("oidc.0.client_secret.0.value.0.plain_text")
	}
	return []interface{}{transformed}
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["response_type"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfigResponseType(original["responseType"], d, config)
	transformed["assertion_claims_behavior"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior(original["assertionClaimsBehavior"], d, config)
	transformed["additional_scopes"] =
		flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfigAdditionalScopes(original["additionalScopes"], d, config)
	return []interface{}{transformed}
}
func flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfigResponseType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfigAssertionClaimsBehavior(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidcWebSsoConfigAdditionalScopes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIAMWorkforcePoolWorkforcePoolProviderOidcJwksJson(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
