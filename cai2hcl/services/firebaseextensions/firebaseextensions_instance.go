// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firebaseextensions

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const FirebaseExtensionsInstanceAssetType string = "firebaseextensions.googleapis.com/Instance"

const FirebaseExtensionsInstanceAssetNameRegex string = "projects/(?P<project>[^/]+)/instances/"

type FirebaseExtensionsInstanceConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewFirebaseExtensionsInstanceConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &FirebaseExtensionsInstanceConverter{
		name:   name,
		schema: schema,
	}
}

func (c *FirebaseExtensionsInstanceConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *FirebaseExtensionsInstanceConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceFirebaseExtensionsInstanceRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceFirebaseExtensionsInstanceRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenFirebaseExtensionsInstanceName(resource["name"], resource_data, config)
	result["create_time"] = flattenFirebaseExtensionsInstanceCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenFirebaseExtensionsInstanceUpdateTime(resource["updateTime"], resource_data, config)
	result["config"] = flattenFirebaseExtensionsInstanceConfig(resource["config"], resource_data, config)
	result["state"] = flattenFirebaseExtensionsInstanceState(resource["state"], resource_data, config)
	result["error_status"] = flattenFirebaseExtensionsInstanceErrorStatus(resource["errorStatus"], resource_data, config)
	result["service_account_email"] = flattenFirebaseExtensionsInstanceServiceAccountEmail(resource["serviceAccountEmail"], resource_data, config)
	result["last_operation_name"] = flattenFirebaseExtensionsInstanceLastOperationName(resource["lastOperationName"], resource_data, config)
	result["last_operation_type"] = flattenFirebaseExtensionsInstanceLastOperationType(resource["lastOperationType"], resource_data, config)
	result["etag"] = flattenFirebaseExtensionsInstanceEtag(resource["etag"], resource_data, config)
	result["runtime_data"] = flattenFirebaseExtensionsInstanceRuntimeData(resource["runtimeData"], resource_data, config)

	return result, nil
}

func flattenFirebaseExtensionsInstanceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenFirebaseExtensionsInstanceConfigName(original["name"], d, config)
	transformed["create_time"] =
		flattenFirebaseExtensionsInstanceConfigCreateTime(original["createTime"], d, config)
	transformed["params"] =
		flattenFirebaseExtensionsInstanceConfigParams(original["params"], d, config)
	transformed["system_params"] =
		flattenFirebaseExtensionsInstanceConfigSystemParams(original["systemParams"], d, config)
	transformed["extension_ref"] =
		flattenFirebaseExtensionsInstanceConfigExtensionRef(original["extensionRef"], d, config)
	transformed["extension_version"] =
		flattenFirebaseExtensionsInstanceConfigExtensionVersion(original["extensionVersion"], d, config)
	transformed["allowed_event_types"] =
		flattenFirebaseExtensionsInstanceConfigAllowedEventTypes(original["allowedEventTypes"], d, config)
	transformed["eventarc_channel"] =
		flattenFirebaseExtensionsInstanceConfigEventarcChannel(original["eventarcChannel"], d, config)
	transformed["populated_postinstall_content"] =
		flattenFirebaseExtensionsInstanceConfigPopulatedPostinstallContent(original["populatedPostinstallContent"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseExtensionsInstanceConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigParams(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigSystemParams(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigExtensionRef(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigExtensionVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigAllowedEventTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigEventarcChannel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceConfigPopulatedPostinstallContent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceErrorStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenFirebaseExtensionsInstanceErrorStatusCode(original["code"], d, config)
	transformed["message"] =
		flattenFirebaseExtensionsInstanceErrorStatusMessage(original["message"], d, config)
	transformed["details"] =
		flattenFirebaseExtensionsInstanceErrorStatusDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseExtensionsInstanceErrorStatusCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenFirebaseExtensionsInstanceErrorStatusMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceErrorStatusDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceServiceAccountEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceLastOperationName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceLastOperationType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceRuntimeData(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["state_update_time"] =
		flattenFirebaseExtensionsInstanceRuntimeDataStateUpdateTime(original["stateUpdateTime"], d, config)
	transformed["processing_state"] =
		flattenFirebaseExtensionsInstanceRuntimeDataProcessingState(original["processingState"], d, config)
	transformed["fatal_error"] =
		flattenFirebaseExtensionsInstanceRuntimeDataFatalError(original["fatalError"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseExtensionsInstanceRuntimeDataStateUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceRuntimeDataProcessingState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["state"] =
		flattenFirebaseExtensionsInstanceRuntimeDataProcessingStateState(original["state"], d, config)
	transformed["detail_message"] =
		flattenFirebaseExtensionsInstanceRuntimeDataProcessingStateDetailMessage(original["detailMessage"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseExtensionsInstanceRuntimeDataProcessingStateState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceRuntimeDataProcessingStateDetailMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirebaseExtensionsInstanceRuntimeDataFatalError(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["error_message"] =
		flattenFirebaseExtensionsInstanceRuntimeDataFatalErrorErrorMessage(original["errorMessage"], d, config)
	return []interface{}{transformed}
}
func flattenFirebaseExtensionsInstanceRuntimeDataFatalErrorErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
