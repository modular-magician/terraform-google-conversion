// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"
	"net"
	"reflect"
	"strconv"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func ipv6RepresentationDiffSuppress(_, old, new string, d *schema.ResourceData) bool {
	//Diff suppress any equal IPV6 address in different representations
	//An IPV6 address can have long or short representations
	//E.g 2001:0cb0:0000:0000:0fc0:0000:0000:0abc, after compression:
	//A) 2001:0cb0::0fc0:0000:0000:0abc (Omit groups of all zeros)
	//B) 2001:cb0:0:0:fc0::abc (Omit leading zeros)
	//C) 2001:cb0::fc0:0:0:abc (Combining A and B)
	//The GCP API follows rule B) for normalzation

	oldIp := net.ParseIP(old)
	newIp := net.ParseIP(new)
	return oldIp.Equal(newIp)
}

const ComputeRouterBgpPeerAssetType string = "compute.googleapis.com/RouterBgpPeer"

const ComputeRouterBgpPeerAssetNameRegex string = "projects/(?P<project>[^/]+)/regions/(?P<region>[^/]+)/routers/(?P<router>[^/]+)"

type ComputeRouterBgpPeerConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewComputeRouterBgpPeerConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ComputeRouterBgpPeerConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ComputeRouterBgpPeerConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ComputeRouterBgpPeerConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceComputeRouterBgpPeerRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceComputeRouterBgpPeerRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenNestedComputeRouterBgpPeerName(resource["name"], resource_data, config)
	result["interface"] = flattenNestedComputeRouterBgpPeerInterface(resource["interfaceName"], resource_data, config)
	result["ip_address"] = flattenNestedComputeRouterBgpPeerIpAddress(resource["ipAddress"], resource_data, config)
	result["peer_ip_address"] = flattenNestedComputeRouterBgpPeerPeerIpAddress(resource["peerIpAddress"], resource_data, config)
	result["peer_asn"] = flattenNestedComputeRouterBgpPeerPeerAsn(resource["peerAsn"], resource_data, config)
	result["advertised_route_priority"] = flattenNestedComputeRouterBgpPeerAdvertisedRoutePriority(resource["advertisedRoutePriority"], resource_data, config)
	result["advertise_mode"] = flattenNestedComputeRouterBgpPeerAdvertiseMode(resource["advertiseMode"], resource_data, config)
	result["advertised_groups"] = flattenNestedComputeRouterBgpPeerAdvertisedGroups(resource["advertisedGroups"], resource_data, config)
	result["advertised_ip_ranges"] = flattenNestedComputeRouterBgpPeerAdvertisedIpRanges(resource["advertisedIpRanges"], resource_data, config)
	result["management_type"] = flattenNestedComputeRouterBgpPeerManagementType(resource["managementType"], resource_data, config)
	result["bfd"] = flattenNestedComputeRouterBgpPeerBfd(resource["bfd"], resource_data, config)
	result["enable"] = flattenNestedComputeRouterBgpPeerEnable(resource["enable"], resource_data, config)
	result["router_appliance_instance"] = flattenNestedComputeRouterBgpPeerRouterApplianceInstance(resource["routerApplianceInstance"], resource_data, config)
	result["enable_ipv6"] = flattenNestedComputeRouterBgpPeerEnableIpv6(resource["enableIpv6"], resource_data, config)
	result["ipv6_nexthop_address"] = flattenNestedComputeRouterBgpPeerIpv6NexthopAddress(resource["ipv6NexthopAddress"], resource_data, config)
	result["peer_ipv6_nexthop_address"] = flattenNestedComputeRouterBgpPeerPeerIpv6NexthopAddress(resource["peerIpv6NexthopAddress"], resource_data, config)

	return result, nil
}

func flattenNestedComputeRouterBgpPeerName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerInterface(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerPeerIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerPeerAsn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNestedComputeRouterBgpPeerAdvertisedRoutePriority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNestedComputeRouterBgpPeerAdvertiseMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil || tpgresource.IsEmptyValue(reflect.ValueOf(v)) {
		return "DEFAULT"
	}

	return v
}

func flattenNestedComputeRouterBgpPeerAdvertisedGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerAdvertisedIpRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"range":       flattenNestedComputeRouterBgpPeerAdvertisedIpRangesRange(original["range"], d, config),
			"description": flattenNestedComputeRouterBgpPeerAdvertisedIpRangesDescription(original["description"], d, config),
		})
	}
	return transformed
}
func flattenNestedComputeRouterBgpPeerAdvertisedIpRangesRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerAdvertisedIpRangesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerManagementType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerBfd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["session_initialization_mode"] =
		flattenNestedComputeRouterBgpPeerBfdSessionInitializationMode(original["sessionInitializationMode"], d, config)
	transformed["min_transmit_interval"] =
		flattenNestedComputeRouterBgpPeerBfdMinTransmitInterval(original["minTransmitInterval"], d, config)
	transformed["min_receive_interval"] =
		flattenNestedComputeRouterBgpPeerBfdMinReceiveInterval(original["minReceiveInterval"], d, config)
	transformed["multiplier"] =
		flattenNestedComputeRouterBgpPeerBfdMultiplier(original["multiplier"], d, config)
	return []interface{}{transformed}
}
func flattenNestedComputeRouterBgpPeerBfdSessionInitializationMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerBfdMinTransmitInterval(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNestedComputeRouterBgpPeerBfdMinReceiveInterval(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNestedComputeRouterBgpPeerBfdMultiplier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNestedComputeRouterBgpPeerEnable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return true
	}
	b, err := strconv.ParseBool(v.(string))
	if err != nil {
		// If we can't convert it into a bool return value as is and let caller handle it
		return v
	}
	return b
}

func flattenNestedComputeRouterBgpPeerRouterApplianceInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}

func flattenNestedComputeRouterBgpPeerEnableIpv6(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerIpv6NexthopAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNestedComputeRouterBgpPeerPeerIpv6NexthopAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
