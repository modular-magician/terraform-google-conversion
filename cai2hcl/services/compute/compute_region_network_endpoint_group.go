// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ComputeRegionNetworkEndpointGroupAssetType string = "compute.googleapis.com/RegionNetworkEndpointGroup"

const ComputeRegionNetworkEndpointGroupAssetNameRegex string = "projects/(?P<project>[^/]+)/regions/(?P<region>[^/]+)/networkEndpointGroups"

type ComputeRegionNetworkEndpointGroupConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewComputeRegionNetworkEndpointGroupConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ComputeRegionNetworkEndpointGroupConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ComputeRegionNetworkEndpointGroupConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ComputeRegionNetworkEndpointGroupConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceComputeRegionNetworkEndpointGroupRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceComputeRegionNetworkEndpointGroupRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenComputeRegionNetworkEndpointGroupName(resource["name"], resource_data, config)
	result["description"] = flattenComputeRegionNetworkEndpointGroupDescription(resource["description"], resource_data, config)
	result["network_endpoint_type"] = flattenComputeRegionNetworkEndpointGroupNetworkEndpointType(resource["networkEndpointType"], resource_data, config)
	result["psc_target_service"] = flattenComputeRegionNetworkEndpointGroupPscTargetService(resource["pscTargetService"], resource_data, config)
	result["network"] = flattenComputeRegionNetworkEndpointGroupNetwork(resource["network"], resource_data, config)
	result["subnetwork"] = flattenComputeRegionNetworkEndpointGroupSubnetwork(resource["subnetwork"], resource_data, config)
	result["cloud_run"] = flattenComputeRegionNetworkEndpointGroupCloudRun(resource["cloudRun"], resource_data, config)
	result["app_engine"] = flattenComputeRegionNetworkEndpointGroupAppEngine(resource["appEngine"], resource_data, config)
	result["cloud_function"] = flattenComputeRegionNetworkEndpointGroupCloudFunction(resource["cloudFunction"], resource_data, config)
	result["serverless_deployment"] = flattenComputeRegionNetworkEndpointGroupServerlessDeployment(resource["serverlessDeployment"], resource_data, config)
	result["region"] = flattenComputeRegionNetworkEndpointGroupRegion(resource["region"], resource_data, config)

	return result, nil
}

func flattenComputeRegionNetworkEndpointGroupName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupNetworkEndpointType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupPscTargetService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}

func flattenComputeRegionNetworkEndpointGroupSubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}

func flattenComputeRegionNetworkEndpointGroupCloudRun(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service"] =
		flattenComputeRegionNetworkEndpointGroupCloudRunService(original["service"], d, config)
	transformed["tag"] =
		flattenComputeRegionNetworkEndpointGroupCloudRunTag(original["tag"], d, config)
	transformed["url_mask"] =
		flattenComputeRegionNetworkEndpointGroupCloudRunUrlMask(original["urlMask"], d, config)
	return []interface{}{transformed}
}
func flattenComputeRegionNetworkEndpointGroupCloudRunService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupCloudRunTag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupCloudRunUrlMask(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupAppEngine(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["service"] =
		flattenComputeRegionNetworkEndpointGroupAppEngineService(original["service"], d, config)
	transformed["version"] =
		flattenComputeRegionNetworkEndpointGroupAppEngineVersion(original["version"], d, config)
	transformed["url_mask"] =
		flattenComputeRegionNetworkEndpointGroupAppEngineUrlMask(original["urlMask"], d, config)
	return []interface{}{transformed}
}
func flattenComputeRegionNetworkEndpointGroupAppEngineService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupAppEngineVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupAppEngineUrlMask(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupCloudFunction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["function"] =
		flattenComputeRegionNetworkEndpointGroupCloudFunctionFunction(original["function"], d, config)
	transformed["url_mask"] =
		flattenComputeRegionNetworkEndpointGroupCloudFunctionUrlMask(original["urlMask"], d, config)
	return []interface{}{transformed}
}
func flattenComputeRegionNetworkEndpointGroupCloudFunctionFunction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupCloudFunctionUrlMask(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupServerlessDeployment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["platform"] =
		flattenComputeRegionNetworkEndpointGroupServerlessDeploymentPlatform(original["platform"], d, config)
	transformed["resource"] =
		flattenComputeRegionNetworkEndpointGroupServerlessDeploymentResource(original["resource"], d, config)
	transformed["version"] =
		flattenComputeRegionNetworkEndpointGroupServerlessDeploymentVersion(original["version"], d, config)
	transformed["url_mask"] =
		flattenComputeRegionNetworkEndpointGroupServerlessDeploymentUrlMask(original["urlMask"], d, config)
	return []interface{}{transformed}
}
func flattenComputeRegionNetworkEndpointGroupServerlessDeploymentPlatform(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupServerlessDeploymentResource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupServerlessDeploymentVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupServerlessDeploymentUrlMask(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeRegionNetworkEndpointGroupRegion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}
