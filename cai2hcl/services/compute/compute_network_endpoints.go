// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"
	"log"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

type NetworkEndpointsNetworkEndpoint struct {
	IPAddress string
	Port      int
	Instance  string
}

func NetworkEndpointsNetworkEndpointConvertToStruct(endpoint interface{}) NetworkEndpointsNetworkEndpoint {
	e := endpoint.(map[string]interface{})
	ipAddress := e["ip_address"].(string)
	port := e["port"].(int)
	instance, _ := e["instance"].(string)
	return NetworkEndpointsNetworkEndpoint{
		IPAddress: ipAddress,
		Port:      port,
		Instance:  instance,
	}
}

func NetworkEndpointsNetworkEndpointConvertToAny(endpoint NetworkEndpointsNetworkEndpoint) interface{} {
	m := make(map[string]interface{})
	m["ip_address"] = endpoint.IPAddress
	m["port"] = endpoint.Port
	m["instance"] = endpoint.Instance
	return m
}

// Continues to read network endpoints as long as there are unread pages remaining
func networkEndpointsPaginatedRead(d *schema.ResourceData, config *transport_tpg.Config, userAgent, url, project, billingProject, pt string) ([]interface{}, error) {
	var allEndpoints []interface{}
	for len(pt) > 0 {
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "POST",
			Project:   billingProject,
			RawURL:    fmt.Sprintf("%s?pageToken=%s", url, pt),
			UserAgent: userAgent,
		})
		if err != nil {
			return nil, transport_tpg.HandleNotFoundError(err, d, fmt.Sprintf("ComputeNetworkEndpoints %q", d.Id()))
		}
		resEndpoints := res["items"].([]interface{})
		allEndpoints = append(allEndpoints, resEndpoints...)
		pt, _ = res["nextPageToken"].(string)
	}
	return allEndpoints, nil
}

// Mutates the parent NEG by attaching or detaching endpoints in chunks. `url` determines if endpoints are attached or detached.
// The last page is not processed, but instead returned for the Create/Delete functions to write.
func networkEndpointsPaginatedMutate(d *schema.ResourceData, endpoints []interface{}, config *transport_tpg.Config, userAgent, url, project, billingProject string, chunkSize int, returnLastPage bool) ([]interface{}, error) {
	// Pull out what this mutation is doing - either attachNetworkEndpoints or detachNetworkEndpoints
	verb := url[len(url)-len("attachNetworkEndpoints"):]
	id, err := tpgresource.ReplaceVars(d, config, "{{project}}/{{zone}}/{{network_endpoint_group}}/endpoints")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	i := 0
	for ; i < len(endpoints); i += chunkSize {
		j := i + chunkSize
		if j > len(endpoints) {
			if returnLastPage {
				break
			}
			j = len(endpoints)
		}
		timeoutType := schema.TimeoutCreate
		if verb != "attachNetworkEndpoints" {
			timeoutType = schema.TimeoutDelete
		}
		body := map[string]interface{}{"networkEndpoints": endpoints[i:j]}
		res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
			Config:    config,
			Method:    "POST",
			Project:   billingProject,
			RawURL:    url,
			UserAgent: userAgent,
			Body:      body,
			Timeout:   d.Timeout(timeoutType),
		})
		if err != nil {
			return nil, fmt.Errorf("Error during %s: %s", verb, err)
		}

		err = ComputeOperationWaitTime(
			config, res, project, verb, userAgent,
			d.Timeout(schema.TimeoutDefault))

		if err != nil {
			// The mutation wasn't applied
			return nil, fmt.Errorf("Error in %s operation: %s", verb, err)
		}

		log.Printf("[DEBUG] Finished %s %q: %#v", verb, id, res)
	}
	if returnLastPage {
		return endpoints[i:], nil
	}
	return nil, nil
}

const ComputeNetworkEndpointsAssetType string = "compute.googleapis.com/NetworkEndpoints"

const ComputeNetworkEndpointsAssetNameRegex string = "projects/(?P<project>[^/]+)/zones/(?P<zone>[^/]+)/networkEndpointGroups/(?P<network_endpoint_group>[^/]+)"

type ComputeNetworkEndpointsConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewComputeNetworkEndpointsConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ComputeNetworkEndpointsConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ComputeNetworkEndpointsConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ComputeNetworkEndpointsConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceComputeNetworkEndpointsRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceComputeNetworkEndpointsRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["network_endpoints"] = flattenComputeNetworkEndpointsNetworkEndpoints(resource["networkEndpoints"], resource_data, config)

	return result, nil
}

func flattenComputeNetworkEndpointsNetworkEndpoints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := schema.NewSet(schema.HashResource(computeNetworkEndpointsNetworkEndpointsSchema()), []interface{}{})
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed.Add(map[string]interface{}{
			"instance":   flattenComputeNetworkEndpointsNetworkEndpointsInstance(original["instance"], d, config),
			"port":       flattenComputeNetworkEndpointsNetworkEndpointsPort(original["port"], d, config),
			"ip_address": flattenComputeNetworkEndpointsNetworkEndpointsIpAddress(original["ipAddress"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkEndpointsNetworkEndpointsInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}

func flattenComputeNetworkEndpointsNetworkEndpointsPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles int given in float64 format
	if floatVal, ok := v.(float64); ok {
		return int(floatVal)
	}
	return v
}

func flattenComputeNetworkEndpointsNetworkEndpointsIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
