// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ComputeNetworkAttachmentAssetType string = "compute.googleapis.com/NetworkAttachment"

const ComputeNetworkAttachmentAssetNameRegex string = "projects/(?P<project>[^/]+)/regions/(?P<region>[^/]+)/networkAttachments"

type ComputeNetworkAttachmentConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewComputeNetworkAttachmentConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ComputeNetworkAttachmentConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ComputeNetworkAttachmentConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ComputeNetworkAttachmentConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceComputeNetworkAttachmentRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceComputeNetworkAttachmentRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["kind"] = flattenComputeNetworkAttachmentKind(resource["kind"], resource_data, config)
	result["id"] = flattenComputeNetworkAttachmentId(resource["id"], resource_data, config)
	result["creation_timestamp"] = flattenComputeNetworkAttachmentCreationTimestamp(resource["creationTimestamp"], resource_data, config)
	result["description"] = flattenComputeNetworkAttachmentDescription(resource["description"], resource_data, config)
	result["self_link"] = flattenComputeNetworkAttachmentSelfLink(resource["selfLink"], resource_data, config)
	result["self_link_with_id"] = flattenComputeNetworkAttachmentSelfLinkWithId(resource["selfLinkWithId"], resource_data, config)
	result["connection_preference"] = flattenComputeNetworkAttachmentConnectionPreference(resource["connectionPreference"], resource_data, config)
	result["connection_endpoints"] = flattenComputeNetworkAttachmentConnectionEndpoints(resource["connectionEndpoints"], resource_data, config)
	result["subnetworks"] = flattenComputeNetworkAttachmentSubnetworks(resource["subnetworks"], resource_data, config)
	result["producer_reject_lists"] = flattenComputeNetworkAttachmentProducerRejectLists(resource["producerRejectLists"], resource_data, config)
	result["producer_accept_lists"] = flattenComputeNetworkAttachmentProducerAcceptLists(resource["producerAcceptLists"], resource_data, config)
	result["fingerprint"] = flattenComputeNetworkAttachmentFingerprint(resource["fingerprint"], resource_data, config)
	result["network"] = flattenComputeNetworkAttachmentNetwork(resource["network"], resource_data, config)
	result["name"] = flattenComputeNetworkAttachmentName(resource["name"], resource_data, config)
	result["region"] = flattenComputeNetworkAttachmentRegion(resource["region"], resource_data, config)

	return result, nil
}

func flattenComputeNetworkAttachmentKind(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentCreationTimestamp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentSelfLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentSelfLinkWithId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentConnectionPreference(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentConnectionEndpoints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"status":                   flattenComputeNetworkAttachmentConnectionEndpointsStatus(original["status"], d, config),
			"project_id_or_num":        flattenComputeNetworkAttachmentConnectionEndpointsProjectIdOrNum(original["projectIdOrNum"], d, config),
			"subnetwork":               flattenComputeNetworkAttachmentConnectionEndpointsSubnetwork(original["subnetwork"], d, config),
			"ip_address":               flattenComputeNetworkAttachmentConnectionEndpointsIpAddress(original["ipAddress"], d, config),
			"secondary_ip_cidr_ranges": flattenComputeNetworkAttachmentConnectionEndpointsSecondaryIpCidrRanges(original["secondaryIpCidrRanges"], d, config),
		})
	}
	return transformed
}
func flattenComputeNetworkAttachmentConnectionEndpointsStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentConnectionEndpointsProjectIdOrNum(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentConnectionEndpointsSubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentConnectionEndpointsIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentConnectionEndpointsSecondaryIpCidrRanges(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentSubnetworks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertAndMapStringArr(v.([]interface{}), tpgresource.ConvertSelfLinkToV1)
}

func flattenComputeNetworkAttachmentProducerRejectLists(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentProducerAcceptLists(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentFingerprint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeNetworkAttachmentRegion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}
