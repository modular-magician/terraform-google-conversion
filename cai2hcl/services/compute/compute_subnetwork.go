// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package compute

import (
	"context"
	"fmt"
	"net"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Whether the IP CIDR change shrinks the block.
func IsShrinkageIpCidr(_ context.Context, old, new, _ interface{}) bool {
	_, oldCidr, oldErr := net.ParseCIDR(old.(string))
	_, newCidr, newErr := net.ParseCIDR(new.(string))

	if oldErr != nil || newErr != nil {
		// This should never happen. The ValidateFunc on the field ensures it.
		return false
	}

	oldStart, oldEnd := cidr.AddressRange(oldCidr)

	if newCidr.Contains(oldStart) && newCidr.Contains(oldEnd) {
		// This is a CIDR range expansion, no need to ForceNew, we have an update method for it.
		return false
	}

	return true
}

const ComputeSubnetworkAssetType string = "compute.googleapis.com/Subnetwork"

const ComputeSubnetworkAssetNameRegex string = "projects/(?P<project>[^/]+)/regions/(?P<region>[^/]+)/subnetworks"

type ComputeSubnetworkConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewComputeSubnetworkConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ComputeSubnetworkConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ComputeSubnetworkConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ComputeSubnetworkConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceComputeSubnetworkRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceComputeSubnetworkRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["creation_timestamp"] = flattenComputeSubnetworkCreationTimestamp(resource["creationTimestamp"], resource_data, config)
	result["description"] = flattenComputeSubnetworkDescription(resource["description"], resource_data, config)
	result["gateway_address"] = flattenComputeSubnetworkGatewayAddress(resource["gatewayAddress"], resource_data, config)
	result["ip_cidr_range"] = flattenComputeSubnetworkIpCidrRange(resource["ipCidrRange"], resource_data, config)
	result["name"] = flattenComputeSubnetworkName(resource["name"], resource_data, config)
	result["network"] = flattenComputeSubnetworkNetwork(resource["network"], resource_data, config)
	result["purpose"] = flattenComputeSubnetworkPurpose(resource["purpose"], resource_data, config)
	result["role"] = flattenComputeSubnetworkRole(resource["role"], resource_data, config)
	result["secondary_ip_range"] = flattenComputeSubnetworkSecondaryIpRange(resource["secondaryIpRanges"], resource_data, config)
	result["private_ip_google_access"] = flattenComputeSubnetworkPrivateIpGoogleAccess(resource["privateIpGoogleAccess"], resource_data, config)
	result["private_ipv6_google_access"] = flattenComputeSubnetworkPrivateIpv6GoogleAccess(resource["privateIpv6GoogleAccess"], resource_data, config)
	result["region"] = flattenComputeSubnetworkRegion(resource["region"], resource_data, config)
	result["log_config"] = flattenComputeSubnetworkLogConfig(resource["logConfig"], resource_data, config)
	result["stack_type"] = flattenComputeSubnetworkStackType(resource["stackType"], resource_data, config)
	result["ipv6_access_type"] = flattenComputeSubnetworkIpv6AccessType(resource["ipv6AccessType"], resource_data, config)
	result["ipv6_cidr_range"] = flattenComputeSubnetworkIpv6CidrRange(resource["ipv6CidrRange"], resource_data, config)
	result["internal_ipv6_prefix"] = flattenComputeSubnetworkInternalIpv6Prefix(resource["internalIpv6Prefix"], resource_data, config)
	result["external_ipv6_prefix"] = flattenComputeSubnetworkExternalIpv6Prefix(resource["externalIpv6Prefix"], resource_data, config)
	result["allow_subnet_cidr_routes_overlap"] = flattenComputeSubnetworkAllowSubnetCidrRoutesOverlap(resource["allowSubnetCidrRoutesOverlap"], resource_data, config)

	return result, nil
}

func flattenComputeSubnetworkCreationTimestamp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkGatewayAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkIpCidrRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.ConvertSelfLinkToV1(v.(string))
}

func flattenComputeSubnetworkPurpose(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkRole(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkSecondaryIpRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"range_name":    flattenComputeSubnetworkSecondaryIpRangeRangeName(original["rangeName"], d, config),
			"ip_cidr_range": flattenComputeSubnetworkSecondaryIpRangeIpCidrRange(original["ipCidrRange"], d, config),
		})
	}
	return transformed
}
func flattenComputeSubnetworkSecondaryIpRangeRangeName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkSecondaryIpRangeIpCidrRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkPrivateIpGoogleAccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkPrivateIpv6GoogleAccess(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkRegion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenComputeSubnetworkLogConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}

	v, ok := original["enable"]
	if ok && !v.(bool) {
		return nil
	}

	transformed := make(map[string]interface{})
	transformed["flow_sampling"] = original["flowSampling"]
	transformed["aggregation_interval"] = original["aggregationInterval"]
	transformed["metadata"] = original["metadata"]
	if original["metadata"].(string) == "CUSTOM_METADATA" {
		transformed["metadata_fields"] = original["metadataFields"]
	} else {
		// MetadataFields can only be set when metadata is CUSTOM_METADATA. However, when updating
		// from custom to include/exclude, the API will return the previous values of the metadata fields,
		// despite not actually having any custom fields at the moment. The API team has confirmed
		// this as WAI (b/162771344), so we work around it by clearing the response if metadata is
		// not custom.
		transformed["metadata_fields"] = nil
	}
	transformed["filter_expr"] = original["filterExpr"]

	return []interface{}{transformed}
}

func flattenComputeSubnetworkStackType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkIpv6AccessType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkIpv6CidrRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkInternalIpv6Prefix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkExternalIpv6Prefix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenComputeSubnetworkAllowSubnetCidrRoutesOverlap(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
