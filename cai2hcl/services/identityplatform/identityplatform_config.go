// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package identityplatform

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const IdentityPlatformConfigAssetType string = "identitytoolkit.googleapis.com/Config"

const IdentityPlatformConfigAssetNameRegex string = "projects/(?P<project>[^/]+)/config"

type IdentityPlatformConfigConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewIdentityPlatformConfigConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &IdentityPlatformConfigConverter{
		name:   name,
		schema: schema,
	}
}

func (c *IdentityPlatformConfigConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *IdentityPlatformConfigConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceIdentityPlatformConfigRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceIdentityPlatformConfigRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenIdentityPlatformConfigName(resource["name"], resource_data, config)
	result["autodelete_anonymous_users"] = flattenIdentityPlatformConfigAutodeleteAnonymousUsers(resource["autodeleteAnonymousUsers"], resource_data, config)
	result["sign_in"] = flattenIdentityPlatformConfigSignIn(resource["signIn"], resource_data, config)
	result["blocking_functions"] = flattenIdentityPlatformConfigBlockingFunctions(resource["blockingFunctions"], resource_data, config)
	result["quota"] = flattenIdentityPlatformConfigQuota(resource["quota"], resource_data, config)
	result["authorized_domains"] = flattenIdentityPlatformConfigAuthorizedDomains(resource["authorizedDomains"], resource_data, config)
	result["sms_region_config"] = flattenIdentityPlatformConfigSmsRegionConfig(resource["smsRegionConfig"], resource_data, config)

	return result, nil
}

func flattenIdentityPlatformConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigAutodeleteAnonymousUsers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignIn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["email"] =
		flattenIdentityPlatformConfigSignInEmail(original["email"], d, config)
	transformed["phone_number"] =
		flattenIdentityPlatformConfigSignInPhoneNumber(original["phoneNumber"], d, config)
	transformed["anonymous"] =
		flattenIdentityPlatformConfigSignInAnonymous(original["anonymous"], d, config)
	transformed["allow_duplicate_emails"] =
		flattenIdentityPlatformConfigSignInAllowDuplicateEmails(original["allowDuplicateEmails"], d, config)
	transformed["hash_config"] =
		flattenIdentityPlatformConfigSignInHashConfig(original["hashConfig"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSignInEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenIdentityPlatformConfigSignInEmailEnabled(original["enabled"], d, config)
	transformed["password_required"] =
		flattenIdentityPlatformConfigSignInEmailPasswordRequired(original["passwordRequired"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSignInEmailEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInEmailPasswordRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInPhoneNumber(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenIdentityPlatformConfigSignInPhoneNumberEnabled(original["enabled"], d, config)
	transformed["test_phone_numbers"] =
		flattenIdentityPlatformConfigSignInPhoneNumberTestPhoneNumbers(original["testPhoneNumbers"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSignInPhoneNumberEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInPhoneNumberTestPhoneNumbers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInAnonymous(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}

	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})

	if original["enabled"] == nil {
		transformed["enabled"] = false
	} else {
		transformed["enabled"] = original["enabled"]
	}

	return []interface{}{transformed}
}

func flattenIdentityPlatformConfigSignInAllowDuplicateEmails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInHashConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["algorithm"] =
		flattenIdentityPlatformConfigSignInHashConfigAlgorithm(original["algorithm"], d, config)
	transformed["signer_key"] =
		flattenIdentityPlatformConfigSignInHashConfigSignerKey(original["signerKey"], d, config)
	transformed["salt_separator"] =
		flattenIdentityPlatformConfigSignInHashConfigSaltSeparator(original["saltSeparator"], d, config)
	transformed["rounds"] =
		flattenIdentityPlatformConfigSignInHashConfigRounds(original["rounds"], d, config)
	transformed["memory_cost"] =
		flattenIdentityPlatformConfigSignInHashConfigMemoryCost(original["memoryCost"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSignInHashConfigAlgorithm(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInHashConfigSignerKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInHashConfigSaltSeparator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSignInHashConfigRounds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenIdentityPlatformConfigSignInHashConfigMemoryCost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenIdentityPlatformConfigBlockingFunctions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["triggers"] =
		flattenIdentityPlatformConfigBlockingFunctionsTriggers(original["triggers"], d, config)
	transformed["forward_inbound_credentials"] =
		flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentials(original["forwardInboundCredentials"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigBlockingFunctionsTriggers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"event_type":   k,
			"function_uri": flattenIdentityPlatformConfigBlockingFunctionsTriggersFunctionUri(original["functionUri"], d, config),
			"update_time":  flattenIdentityPlatformConfigBlockingFunctionsTriggersUpdateTime(original["updateTime"], d, config),
		})
	}
	return transformed
}
func flattenIdentityPlatformConfigBlockingFunctionsTriggersFunctionUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigBlockingFunctionsTriggersUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentials(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["id_token"] =
		flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsIdToken(original["idToken"], d, config)
	transformed["access_token"] =
		flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsAccessToken(original["accessToken"], d, config)
	transformed["refresh_token"] =
		flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsRefreshToken(original["refreshToken"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsIdToken(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsAccessToken(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigBlockingFunctionsForwardInboundCredentialsRefreshToken(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigQuota(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["sign_up_quota_config"] =
		flattenIdentityPlatformConfigQuotaSignUpQuotaConfig(original["signUpQuotaConfig"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigQuotaSignUpQuotaConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["quota"] =
		flattenIdentityPlatformConfigQuotaSignUpQuotaConfigQuota(original["quota"], d, config)
	transformed["start_time"] =
		flattenIdentityPlatformConfigQuotaSignUpQuotaConfigStartTime(original["startTime"], d, config)
	transformed["quota_duration"] =
		flattenIdentityPlatformConfigQuotaSignUpQuotaConfigQuotaDuration(original["quotaDuration"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigQuotaSignUpQuotaConfigQuota(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenIdentityPlatformConfigQuotaSignUpQuotaConfigStartTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigQuotaSignUpQuotaConfigQuotaDuration(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigAuthorizedDomains(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSmsRegionConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_by_default"] =
		flattenIdentityPlatformConfigSmsRegionConfigAllowByDefault(original["allowByDefault"], d, config)
	transformed["allowlist_only"] =
		flattenIdentityPlatformConfigSmsRegionConfigAllowlistOnly(original["allowlistOnly"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSmsRegionConfigAllowByDefault(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["disallowed_regions"] =
		flattenIdentityPlatformConfigSmsRegionConfigAllowByDefaultDisallowedRegions(original["disallowedRegions"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSmsRegionConfigAllowByDefaultDisallowedRegions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenIdentityPlatformConfigSmsRegionConfigAllowlistOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allowed_regions"] =
		flattenIdentityPlatformConfigSmsRegionConfigAllowlistOnlyAllowedRegions(original["allowedRegions"], d, config)
	return []interface{}{transformed}
}
func flattenIdentityPlatformConfigSmsRegionConfigAllowlistOnlyAllowedRegions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
