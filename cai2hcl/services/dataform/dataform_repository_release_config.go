// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataform

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DataformRepositoryReleaseConfigAssetType string = "dataform.googleapis.com/RepositoryReleaseConfig"

const DataformRepositoryReleaseConfigAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<region>[^/]+)/repositories/(?P<repository>[^/]+)/releaseConfigs"

type DataformRepositoryReleaseConfigConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDataformRepositoryReleaseConfigConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DataformRepositoryReleaseConfigConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DataformRepositoryReleaseConfigConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DataformRepositoryReleaseConfigConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDataformRepositoryReleaseConfigRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDataformRepositoryReleaseConfigRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDataformRepositoryReleaseConfigName(resource["name"], resource_data, config)
	result["git_commitish"] = flattenDataformRepositoryReleaseConfigGitCommitish(resource["gitCommitish"], resource_data, config)
	result["cron_schedule"] = flattenDataformRepositoryReleaseConfigCronSchedule(resource["cronSchedule"], resource_data, config)
	result["time_zone"] = flattenDataformRepositoryReleaseConfigTimeZone(resource["timeZone"], resource_data, config)
	result["code_compilation_config"] = flattenDataformRepositoryReleaseConfigCodeCompilationConfig(resource["codeCompilationConfig"], resource_data, config)
	result["recent_scheduled_release_records"] = flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecords(resource["recentScheduledReleaseRecords"], resource_data, config)

	return result, nil
}

func flattenDataformRepositoryReleaseConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenDataformRepositoryReleaseConfigGitCommitish(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCronSchedule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["default_database"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(original["defaultDatabase"], d, config)
	transformed["default_schema"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(original["defaultSchema"], d, config)
	transformed["default_location"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(original["defaultLocation"], d, config)
	transformed["assertion_schema"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(original["assertionSchema"], d, config)
	transformed["vars"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigVars(original["vars"], d, config)
	transformed["database_suffix"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(original["databaseSuffix"], d, config)
	transformed["schema_suffix"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(original["schemaSuffix"], d, config)
	transformed["table_prefix"] =
		flattenDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(original["tablePrefix"], d, config)
	return []interface{}{transformed}
}
func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultDatabase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultSchema(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDefaultLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigAssertionSchema(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigVars(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigDatabaseSuffix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigSchemaSuffix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigCodeCompilationConfigTablePrefix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecords(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"release_time":       flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsReleaseTime(original["releaseTime"], d, config),
			"compilation_result": flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsCompilationResult(original["compilationResult"], d, config),
			"error_status":       flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatus(original["errorStatus"], d, config),
		})
	}
	return transformed
}
func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsReleaseTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsCompilationResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusCode(original["code"], d, config)
	transformed["message"] =
		flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusMessage(original["message"], d, config)
	return []interface{}{transformed}
}
func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDataformRepositoryReleaseConfigRecentScheduledReleaseRecordsErrorStatusMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
