// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudasset

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const CloudAssetOrganizationFeedAssetType string = "cloudasset.googleapis.com/OrganizationFeed"

const CloudAssetOrganizationFeedAssetNameRegex string = "organizations/(?P<org_id>[^/]+)/feeds"

type CloudAssetOrganizationFeedConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewCloudAssetOrganizationFeedConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &CloudAssetOrganizationFeedConverter{
		name:   name,
		schema: schema,
	}
}

func (c *CloudAssetOrganizationFeedConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *CloudAssetOrganizationFeedConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceCloudAssetOrganizationFeedRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceCloudAssetOrganizationFeedRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenCloudAssetOrganizationFeedName(resource["name"], resource_data, config)
	result["asset_names"] = flattenCloudAssetOrganizationFeedAssetNames(resource["assetNames"], resource_data, config)
	result["asset_types"] = flattenCloudAssetOrganizationFeedAssetTypes(resource["assetTypes"], resource_data, config)
	result["content_type"] = flattenCloudAssetOrganizationFeedContentType(resource["contentType"], resource_data, config)
	result["feed_output_config"] = flattenCloudAssetOrganizationFeedFeedOutputConfig(resource["feedOutputConfig"], resource_data, config)
	result["condition"] = flattenCloudAssetOrganizationFeedCondition(resource["condition"], resource_data, config)

	return result, nil
}

func flattenCloudAssetOrganizationFeedName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedAssetNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedAssetTypes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedContentType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedFeedOutputConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["pubsub_destination"] =
		flattenCloudAssetOrganizationFeedFeedOutputConfigPubsubDestination(original["pubsubDestination"], d, config)
	return []interface{}{transformed}
}
func flattenCloudAssetOrganizationFeedFeedOutputConfigPubsubDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["topic"] =
		flattenCloudAssetOrganizationFeedFeedOutputConfigPubsubDestinationTopic(original["topic"], d, config)
	return []interface{}{transformed}
}
func flattenCloudAssetOrganizationFeedFeedOutputConfigPubsubDestinationTopic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedCondition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["expression"] =
		flattenCloudAssetOrganizationFeedConditionExpression(original["expression"], d, config)
	transformed["title"] =
		flattenCloudAssetOrganizationFeedConditionTitle(original["title"], d, config)
	transformed["description"] =
		flattenCloudAssetOrganizationFeedConditionDescription(original["description"], d, config)
	transformed["location"] =
		flattenCloudAssetOrganizationFeedConditionLocation(original["location"], d, config)
	return []interface{}{transformed}
}
func flattenCloudAssetOrganizationFeedConditionExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedConditionTitle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedConditionDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudAssetOrganizationFeedConditionLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
