// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflowcx

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DialogflowCXAgentAssetType string = "{{location}}-dialogflow.googleapis.com/Agent"

const DialogflowCXAgentAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/agents"

type DialogflowCXAgentConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDialogflowCXAgentConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DialogflowCXAgentConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DialogflowCXAgentConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DialogflowCXAgentConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDialogflowCXAgentRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDialogflowCXAgentRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDialogflowCXAgentName(resource["name"], resource_data, config)
	result["display_name"] = flattenDialogflowCXAgentDisplayName(resource["displayName"], resource_data, config)
	result["default_language_code"] = flattenDialogflowCXAgentDefaultLanguageCode(resource["defaultLanguageCode"], resource_data, config)
	result["supported_language_codes"] = flattenDialogflowCXAgentSupportedLanguageCodes(resource["supportedLanguageCodes"], resource_data, config)
	result["time_zone"] = flattenDialogflowCXAgentTimeZone(resource["timeZone"], resource_data, config)
	result["description"] = flattenDialogflowCXAgentDescription(resource["description"], resource_data, config)
	result["avatar_uri"] = flattenDialogflowCXAgentAvatarUri(resource["avatarUri"], resource_data, config)
	result["speech_to_text_settings"] = flattenDialogflowCXAgentSpeechToTextSettings(resource["speechToTextSettings"], resource_data, config)
	result["start_flow"] = flattenDialogflowCXAgentStartFlow(resource["startFlow"], resource_data, config)
	result["security_settings"] = flattenDialogflowCXAgentSecuritySettings(resource["securitySettings"], resource_data, config)
	result["enable_stackdriver_logging"] = flattenDialogflowCXAgentEnableStackdriverLogging(resource["enableStackdriverLogging"], resource_data, config)
	result["enable_spell_correction"] = flattenDialogflowCXAgentEnableSpellCorrection(resource["enableSpellCorrection"], resource_data, config)
	result["advanced_settings"] = flattenDialogflowCXAgentAdvancedSettings(resource["advancedSettings"], resource_data, config)
	result["git_integration_settings"] = flattenDialogflowCXAgentGitIntegrationSettings(resource["gitIntegrationSettings"], resource_data, config)
	result["text_to_speech_settings"] = flattenDialogflowCXAgentTextToSpeechSettings(resource["textToSpeechSettings"], resource_data, config)

	return result, nil
}

func flattenDialogflowCXAgentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenDialogflowCXAgentDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentDefaultLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentSupportedLanguageCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentAvatarUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentSpeechToTextSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_speech_adaptation"] =
		flattenDialogflowCXAgentSpeechToTextSettingsEnableSpeechAdaptation(original["enableSpeechAdaptation"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentSpeechToTextSettingsEnableSpeechAdaptation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentStartFlow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentSecuritySettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentEnableStackdriverLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentEnableSpellCorrection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentAdvancedSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["audio_export_gcs_destination"] =
		flattenDialogflowCXAgentAdvancedSettingsAudioExportGcsDestination(original["audioExportGcsDestination"], d, config)
	transformed["dtmf_settings"] =
		flattenDialogflowCXAgentAdvancedSettingsDtmfSettings(original["dtmfSettings"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentAdvancedSettingsAudioExportGcsDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenDialogflowCXAgentAdvancedSettingsAudioExportGcsDestinationUri(original["uri"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentAdvancedSettingsAudioExportGcsDestinationUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentAdvancedSettingsDtmfSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenDialogflowCXAgentAdvancedSettingsDtmfSettingsEnabled(original["enabled"], d, config)
	transformed["max_digits"] =
		flattenDialogflowCXAgentAdvancedSettingsDtmfSettingsMaxDigits(original["maxDigits"], d, config)
	transformed["finish_digit"] =
		flattenDialogflowCXAgentAdvancedSettingsDtmfSettingsFinishDigit(original["finishDigit"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentAdvancedSettingsDtmfSettingsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentAdvancedSettingsDtmfSettingsMaxDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXAgentAdvancedSettingsDtmfSettingsFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentGitIntegrationSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["github_settings"] =
		flattenDialogflowCXAgentGitIntegrationSettingsGithubSettings(original["githubSettings"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentGitIntegrationSettingsGithubSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["display_name"] =
		flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsDisplayName(original["displayName"], d, config)
	transformed["repository_uri"] =
		flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsRepositoryUri(original["repositoryUri"], d, config)
	transformed["tracking_branch"] =
		flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsTrackingBranch(original["trackingBranch"], d, config)
	transformed["access_token"] =
		flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsAccessToken(original["accessToken"], d, config)
	transformed["branches"] =
		flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsBranches(original["branches"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsRepositoryUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsTrackingBranch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsAccessToken(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("git_integration_settings.0.github_settings.0.access_token")
}

func flattenDialogflowCXAgentGitIntegrationSettingsGithubSettingsBranches(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXAgentTextToSpeechSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["synthesize_speech_configs"] =
		flattenDialogflowCXAgentTextToSpeechSettingsSynthesizeSpeechConfigs(original["synthesizeSpeechConfigs"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXAgentTextToSpeechSettingsSynthesizeSpeechConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}
