// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflowcx

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DialogflowCXTestCaseAssetType string = "{{location}}-dialogflow.googleapis.com/TestCase"

const DialogflowCXTestCaseAssetNameRegex string = "(?P<parent>[^/]+)/testCases"

type DialogflowCXTestCaseConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDialogflowCXTestCaseConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DialogflowCXTestCaseConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DialogflowCXTestCaseConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DialogflowCXTestCaseConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDialogflowCXTestCaseRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDialogflowCXTestCaseRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDialogflowCXTestCaseName(resource["name"], resource_data, config)
	result["tags"] = flattenDialogflowCXTestCaseTags(resource["tags"], resource_data, config)
	result["display_name"] = flattenDialogflowCXTestCaseDisplayName(resource["displayName"], resource_data, config)
	result["notes"] = flattenDialogflowCXTestCaseNotes(resource["notes"], resource_data, config)
	result["test_config"] = flattenDialogflowCXTestCaseTestConfig(resource["testConfig"], resource_data, config)
	result["test_case_conversation_turns"] = flattenDialogflowCXTestCaseTestCaseConversationTurns(resource["testCaseConversationTurns"], resource_data, config)
	result["creation_time"] = flattenDialogflowCXTestCaseCreationTime(resource["creationTime"], resource_data, config)
	result["last_test_result"] = flattenDialogflowCXTestCaseLastTestResult(resource["lastTestResult"], resource_data, config)

	return result, nil
}

func flattenDialogflowCXTestCaseName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenDialogflowCXTestCaseTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseNotes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tracking_parameters"] =
		flattenDialogflowCXTestCaseTestConfigTrackingParameters(original["trackingParameters"], d, config)
	transformed["flow"] =
		flattenDialogflowCXTestCaseTestConfigFlow(original["flow"], d, config)
	transformed["page"] =
		flattenDialogflowCXTestCaseTestConfigPage(original["page"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestConfigTrackingParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestConfigFlow(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestConfigPage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"user_input":           flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInput(original["userInput"], d, config),
			"virtual_agent_output": flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutput(original["virtualAgentOutput"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["input"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInput(original["input"], d, config)
	transformed["injected_parameters"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInjectedParameters(original["injectedParameters"], d, config)
	transformed["is_webhook_enabled"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputIsWebhookEnabled(original["isWebhookEnabled"], d, config)
	transformed["enable_sentiment_analysis"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputEnableSentimentAnalysis(original["enableSentimentAnalysis"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["language_code"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputLanguageCode(original["languageCode"], d, config)
	transformed["text"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputText(original["text"], d, config)
	transformed["event"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputEvent(original["event"], d, config)
	transformed["dtmf"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputDtmf(original["dtmf"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputTextText(original["text"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["event"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputEventEvent(original["event"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputEventEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputDtmf(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["digits"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputDtmfDigits(original["digits"], d, config)
	transformed["finish_digit"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputDtmfFinishDigit(original["finishDigit"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputDtmfDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInputDtmfFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputInjectedParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputIsWebhookEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsUserInputEnableSentimentAnalysis(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["session_parameters"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputSessionParameters(original["sessionParameters"], d, config)
	transformed["triggered_intent"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTriggeredIntent(original["triggeredIntent"], d, config)
	transformed["current_page"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputCurrentPage(original["currentPage"], d, config)
	transformed["text_responses"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTextResponses(original["textResponses"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputSessionParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTriggeredIntent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTriggeredIntentName(original["name"], d, config)
	transformed["display_name"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTriggeredIntentDisplayName(original["displayName"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTriggeredIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTriggeredIntentDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputCurrentPage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputCurrentPageName(original["name"], d, config)
	transformed["display_name"] =
		flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputCurrentPageDisplayName(original["displayName"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputCurrentPageName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputCurrentPageDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTextResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"text": flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTextResponsesText(original["text"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXTestCaseTestCaseConversationTurnsVirtualAgentOutputTextResponsesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseCreationTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDialogflowCXTestCaseLastTestResultName(original["name"], d, config)
	transformed["environment"] =
		flattenDialogflowCXTestCaseLastTestResultEnvironment(original["environment"], d, config)
	transformed["conversation_turns"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurns(original["conversationTurns"], d, config)
	transformed["test_result"] =
		flattenDialogflowCXTestCaseLastTestResultTestResult(original["testResult"], d, config)
	transformed["test_time"] =
		flattenDialogflowCXTestCaseLastTestResultTestTime(original["testTime"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultEnvironment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"user_input":           flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInput(original["userInput"], d, config),
			"virtual_agent_output": flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutput(original["virtualAgentOutput"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["input"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInput(original["input"], d, config)
	transformed["injected_parameters"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInjectedParameters(original["injectedParameters"], d, config)
	transformed["is_webhook_enabled"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputIsWebhookEnabled(original["isWebhookEnabled"], d, config)
	transformed["enable_sentiment_analysis"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputEnableSentimentAnalysis(original["enableSentimentAnalysis"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["language_code"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputLanguageCode(original["languageCode"], d, config)
	transformed["text"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputText(original["text"], d, config)
	transformed["event"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputEvent(original["event"], d, config)
	transformed["dtmf"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputDtmf(original["dtmf"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["text"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputTextText(original["text"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputTextText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["event"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputEventEvent(original["event"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputEventEvent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputDtmf(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["digits"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputDtmfDigits(original["digits"], d, config)
	transformed["finish_digit"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputDtmfFinishDigit(original["finishDigit"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputDtmfDigits(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInputDtmfFinishDigit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputInjectedParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputIsWebhookEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsUserInputEnableSentimentAnalysis(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutput(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["session_parameters"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputSessionParameters(original["sessionParameters"], d, config)
	transformed["differences"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputDifferences(original["differences"], d, config)
	transformed["triggered_intent"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTriggeredIntent(original["triggeredIntent"], d, config)
	transformed["current_page"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputCurrentPage(original["currentPage"], d, config)
	transformed["text_responses"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTextResponses(original["textResponses"], d, config)
	transformed["status"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatus(original["status"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputSessionParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputDifferences(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":        flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputDifferencesType(original["type"], d, config),
			"description": flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputDifferencesDescription(original["description"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputDifferencesType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputDifferencesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTriggeredIntent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTriggeredIntentName(original["name"], d, config)
	transformed["display_name"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTriggeredIntentDisplayName(original["displayName"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTriggeredIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTriggeredIntentDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputCurrentPage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputCurrentPageName(original["name"], d, config)
	transformed["display_name"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputCurrentPageDisplayName(original["displayName"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputCurrentPageName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputCurrentPageDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTextResponses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"text": flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTextResponsesText(original["text"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputTextResponsesText(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatusCode(original["code"], d, config)
	transformed["message"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatusMessage(original["message"], d, config)
	transformed["details"] =
		flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatusDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatusCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatusMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultConversationTurnsVirtualAgentOutputStatusDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	b, err := json.Marshal(v)
	if err != nil {
		// TODO: return error once https://github.com/GoogleCloudPlatform/magic-modules/issues/3257 is fixed.
		log.Printf("[ERROR] failed to marshal schema to JSON: %v", err)
	}
	return string(b)
}

func flattenDialogflowCXTestCaseLastTestResultTestResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowCXTestCaseLastTestResultTestTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
