// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package gkebackup

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GKEBackupRestorePlanAssetType string = "gkebackup.googleapis.com/RestorePlan"

const GKEBackupRestorePlanAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/restorePlans"

type GKEBackupRestorePlanConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewGKEBackupRestorePlanConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &GKEBackupRestorePlanConverter{
		name:   name,
		schema: schema,
	}
}

func (c *GKEBackupRestorePlanConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *GKEBackupRestorePlanConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceGKEBackupRestorePlanRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceGKEBackupRestorePlanRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenGKEBackupRestorePlanName(resource["name"], resource_data, config)
	result["uid"] = flattenGKEBackupRestorePlanUid(resource["uid"], resource_data, config)
	result["description"] = flattenGKEBackupRestorePlanDescription(resource["description"], resource_data, config)
	result["labels"] = flattenGKEBackupRestorePlanLabels(resource["labels"], resource_data, config)
	result["backup_plan"] = flattenGKEBackupRestorePlanBackupPlan(resource["backupPlan"], resource_data, config)
	result["cluster"] = flattenGKEBackupRestorePlanCluster(resource["cluster"], resource_data, config)
	result["restore_config"] = flattenGKEBackupRestorePlanRestoreConfig(resource["restoreConfig"], resource_data, config)
	result["state"] = flattenGKEBackupRestorePlanState(resource["state"], resource_data, config)
	result["state_reason"] = flattenGKEBackupRestorePlanStateReason(resource["stateReason"], resource_data, config)
	result["terraform_labels"] = flattenGKEBackupRestorePlanTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenGKEBackupRestorePlanEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenGKEBackupRestorePlanName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenGKEBackupRestorePlanUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenGKEBackupRestorePlanBackupPlan(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["all_namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigAllNamespaces(original["allNamespaces"], d, config)
	transformed["excluded_namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigExcludedNamespaces(original["excludedNamespaces"], d, config)
	transformed["selected_namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigSelectedNamespaces(original["selectedNamespaces"], d, config)
	transformed["selected_applications"] =
		flattenGKEBackupRestorePlanRestoreConfigSelectedApplications(original["selectedApplications"], d, config)
	transformed["no_namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigNoNamespaces(original["noNamespaces"], d, config)
	transformed["namespaced_resource_restore_mode"] =
		flattenGKEBackupRestorePlanRestoreConfigNamespacedResourceRestoreMode(original["namespacedResourceRestoreMode"], d, config)
	transformed["volume_data_restore_policy"] =
		flattenGKEBackupRestorePlanRestoreConfigVolumeDataRestorePolicy(original["volumeDataRestorePolicy"], d, config)
	transformed["cluster_resource_restore_scope"] =
		flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScope(original["clusterResourceRestoreScope"], d, config)
	transformed["cluster_resource_conflict_policy"] =
		flattenGKEBackupRestorePlanRestoreConfigClusterResourceConflictPolicy(original["clusterResourceConflictPolicy"], d, config)
	transformed["transformation_rules"] =
		flattenGKEBackupRestorePlanRestoreConfigTransformationRules(original["transformationRules"], d, config)
	return []interface{}{transformed}
}
func flattenGKEBackupRestorePlanRestoreConfigAllNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigExcludedNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigExcludedNamespacesNamespaces(original["namespaces"], d, config)
	return []interface{}{transformed}
}
func flattenGKEBackupRestorePlanRestoreConfigExcludedNamespacesNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigSelectedNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigSelectedNamespacesNamespaces(original["namespaces"], d, config)
	return []interface{}{transformed}
}
func flattenGKEBackupRestorePlanRestoreConfigSelectedNamespacesNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigSelectedApplications(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["namespaced_names"] =
		flattenGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNames(original["namespacedNames"], d, config)
	return []interface{}{transformed}
}
func flattenGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"namespace": flattenGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesNamespace(original["namespace"], d, config),
			"name":      flattenGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesName(original["name"], d, config),
		})
	}
	return transformed
}
func flattenGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesNamespace(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigSelectedApplicationsNamespacedNamesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigNoNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigNamespacedResourceRestoreMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigVolumeDataRestorePolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScope(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["all_group_kinds"] =
		flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeAllGroupKinds(original["allGroupKinds"], d, config)
	transformed["excluded_group_kinds"] =
		flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKinds(original["excludedGroupKinds"], d, config)
	transformed["selected_group_kinds"] =
		flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKinds(original["selectedGroupKinds"], d, config)
	transformed["no_group_kinds"] =
		flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeNoGroupKinds(original["noGroupKinds"], d, config)
	return []interface{}{transformed}
}
func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeAllGroupKinds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKinds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"resource_group": flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceGroup(original["resourceGroup"], d, config),
			"resource_kind":  flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceKind(original["resourceKind"], d, config),
		})
	}
	return transformed
}
func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeExcludedGroupKindsResourceKind(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKinds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"resource_group": flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceGroup(original["resourceGroup"], d, config),
			"resource_kind":  flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceKind(original["resourceKind"], d, config),
		})
	}
	return transformed
}
func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeSelectedGroupKindsResourceKind(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceRestoreScopeNoGroupKinds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigClusterResourceConflictPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"description":     flattenGKEBackupRestorePlanRestoreConfigTransformationRulesDescription(original["description"], d, config),
			"resource_filter": flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilter(original["resourceFilter"], d, config),
			"field_actions":   flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActions(original["fieldActions"], d, config),
		})
	}
	return transformed
}
func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["namespaces"] =
		flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterNamespaces(original["namespaces"], d, config)
	transformed["group_kinds"] =
		flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKinds(original["groupKinds"], d, config)
	transformed["json_path"] =
		flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterJsonPath(original["jsonPath"], d, config)
	return []interface{}{transformed}
}
func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterNamespaces(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKinds(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"resource_group": flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceGroup(original["resourceGroup"], d, config),
			"resource_kind":  flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceKind(original["resourceKind"], d, config),
		})
	}
	return transformed
}
func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceGroup(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterGroupKindsResourceKind(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesResourceFilterJsonPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"op":        flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOp(original["op"], d, config),
			"from_path": flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsFromPath(original["fromPath"], d, config),
			"path":      flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsPath(original["path"], d, config),
			"value":     flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsOp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsFromPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanRestoreConfigTransformationRulesFieldActionsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanStateReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGKEBackupRestorePlanTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenGKEBackupRestorePlanEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
