// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkconnectivity

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkConnectivityServiceConnectionPolicyAssetType string = "networkconnectivity.googleapis.com/ServiceConnectionPolicy"

const NetworkConnectivityServiceConnectionPolicyAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/serviceConnectionPolicies"

type NetworkConnectivityServiceConnectionPolicyConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkConnectivityServiceConnectionPolicyConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &NetworkConnectivityServiceConnectionPolicyConverter{
		name:   name,
		schema: schema,
	}
}

func (c *NetworkConnectivityServiceConnectionPolicyConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *NetworkConnectivityServiceConnectionPolicyConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceNetworkConnectivityServiceConnectionPolicyRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceNetworkConnectivityServiceConnectionPolicyRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["create_time"] = flattenNetworkConnectivityServiceConnectionPolicyCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenNetworkConnectivityServiceConnectionPolicyUpdateTime(resource["updateTime"], resource_data, config)
	result["service_class"] = flattenNetworkConnectivityServiceConnectionPolicyServiceClass(resource["serviceClass"], resource_data, config)
	result["description"] = flattenNetworkConnectivityServiceConnectionPolicyDescription(resource["description"], resource_data, config)
	result["network"] = flattenNetworkConnectivityServiceConnectionPolicyNetwork(resource["network"], resource_data, config)
	result["psc_config"] = flattenNetworkConnectivityServiceConnectionPolicyPscConfig(resource["pscConfig"], resource_data, config)
	result["etag"] = flattenNetworkConnectivityServiceConnectionPolicyEtag(resource["etag"], resource_data, config)
	result["psc_connections"] = flattenNetworkConnectivityServiceConnectionPolicyPscConnections(resource["pscConnections"], resource_data, config)
	result["infrastructure"] = flattenNetworkConnectivityServiceConnectionPolicyInfrastructure(resource["infrastructure"], resource_data, config)
	result["labels"] = flattenNetworkConnectivityServiceConnectionPolicyLabels(resource["labels"], resource_data, config)
	result["terraform_labels"] = flattenNetworkConnectivityServiceConnectionPolicyTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenNetworkConnectivityServiceConnectionPolicyEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenNetworkConnectivityServiceConnectionPolicyCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyServiceClass(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["subnetworks"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConfigSubnetworks(original["subnetworks"], d, config)
	transformed["limit"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConfigLimit(original["limit"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkConnectivityServiceConnectionPolicyPscConfigSubnetworks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConfigLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnections(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"state":                    flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsState(original["state"], d, config),
			"consumer_forwarding_rule": flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsConsumerForwardingRule(original["consumerForwardingRule"], d, config),
			"consumer_address":         flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsConsumerAddress(original["consumerAddress"], d, config),
			"error_type":               flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorType(original["errorType"], d, config),
			"error":                    flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsError(original["error"], d, config),
			"gce_operation":            flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsGceOperation(original["gceOperation"], d, config),
			"consumer_target_project":  flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsConsumerTargetProject(original["consumerTargetProject"], d, config),
			"psc_connection_id":        flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsPscConnectionId(original["pscConnectionId"], d, config),
			"error_info":               flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfo(original["errorInfo"], d, config),
		})
	}
	return transformed
}
func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsConsumerForwardingRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsConsumerAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsError(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["message"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorMessage(original["message"], d, config)
	transformed["code"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorCode(original["code"], d, config)
	transformed["details"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsGceOperation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsConsumerTargetProject(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsPscConnectionId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["reason"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfoReason(original["reason"], d, config)
	transformed["domain"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfoDomain(original["domain"], d, config)
	transformed["metadata"] =
		flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfoMetadata(original["metadata"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfoReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfoDomain(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyPscConnectionsErrorInfoMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyInfrastructure(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityServiceConnectionPolicyLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkConnectivityServiceConnectionPolicyTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkConnectivityServiceConnectionPolicyEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
