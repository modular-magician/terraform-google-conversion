// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkconnectivity

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkConnectivityPolicyBasedRouteAssetType string = "networkconnectivity.googleapis.com/PolicyBasedRoute"

const NetworkConnectivityPolicyBasedRouteAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/global/policyBasedRoutes"

type NetworkConnectivityPolicyBasedRouteConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkConnectivityPolicyBasedRouteConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &NetworkConnectivityPolicyBasedRouteConverter{
		name:   name,
		schema: schema,
	}
}

func (c *NetworkConnectivityPolicyBasedRouteConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *NetworkConnectivityPolicyBasedRouteConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceNetworkConnectivityPolicyBasedRouteRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceNetworkConnectivityPolicyBasedRouteRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["description"] = flattenNetworkConnectivityPolicyBasedRouteDescription(resource["description"], resource_data, config)
	result["labels"] = flattenNetworkConnectivityPolicyBasedRouteLabels(resource["labels"], resource_data, config)
	result["network"] = flattenNetworkConnectivityPolicyBasedRouteNetwork(resource["network"], resource_data, config)
	result["filter"] = flattenNetworkConnectivityPolicyBasedRouteFilter(resource["filter"], resource_data, config)
	result["next_hop_other_routes"] = flattenNetworkConnectivityPolicyBasedRouteNextHopOtherRoutes(resource["nextHopOtherRoutes"], resource_data, config)
	result["next_hop_ilb_ip"] = flattenNetworkConnectivityPolicyBasedRouteNextHopIlbIp(resource["nextHopIlbIp"], resource_data, config)
	result["priority"] = flattenNetworkConnectivityPolicyBasedRoutePriority(resource["priority"], resource_data, config)
	result["virtual_machine"] = flattenNetworkConnectivityPolicyBasedRouteVirtualMachine(resource["virtualMachine"], resource_data, config)
	result["interconnect_attachment"] = flattenNetworkConnectivityPolicyBasedRouteInterconnectAttachment(resource["interconnectAttachment"], resource_data, config)
	result["create_time"] = flattenNetworkConnectivityPolicyBasedRouteCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenNetworkConnectivityPolicyBasedRouteUpdateTime(resource["updateTime"], resource_data, config)
	result["kind"] = flattenNetworkConnectivityPolicyBasedRouteKind(resource["kind"], resource_data, config)
	result["warnings"] = flattenNetworkConnectivityPolicyBasedRouteWarnings(resource["warnings"], resource_data, config)
	result["terraform_labels"] = flattenNetworkConnectivityPolicyBasedRouteTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenNetworkConnectivityPolicyBasedRouteEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenNetworkConnectivityPolicyBasedRouteDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkConnectivityPolicyBasedRouteNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["protocol_version"] =
		flattenNetworkConnectivityPolicyBasedRouteFilterProtocolVersion(original["protocolVersion"], d, config)
	transformed["ip_protocol"] =
		flattenNetworkConnectivityPolicyBasedRouteFilterIpProtocol(original["ipProtocol"], d, config)
	transformed["src_range"] =
		flattenNetworkConnectivityPolicyBasedRouteFilterSrcRange(original["srcRange"], d, config)
	transformed["dest_range"] =
		flattenNetworkConnectivityPolicyBasedRouteFilterDestRange(original["destRange"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkConnectivityPolicyBasedRouteFilterProtocolVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteFilterIpProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteFilterSrcRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteFilterDestRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteNextHopOtherRoutes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteNextHopIlbIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRoutePriority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkConnectivityPolicyBasedRouteVirtualMachine(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["tags"] =
		flattenNetworkConnectivityPolicyBasedRouteVirtualMachineTags(original["tags"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkConnectivityPolicyBasedRouteVirtualMachineTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteInterconnectAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["region"] =
		flattenNetworkConnectivityPolicyBasedRouteInterconnectAttachmentRegion(original["region"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkConnectivityPolicyBasedRouteInterconnectAttachmentRegion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteKind(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteWarnings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"code":            flattenNetworkConnectivityPolicyBasedRouteWarningsCode(original["code"], d, config),
			"data":            flattenNetworkConnectivityPolicyBasedRouteWarningsData(original["data"], d, config),
			"warning_message": flattenNetworkConnectivityPolicyBasedRouteWarningsWarningMessage(original["warningMessage"], d, config),
		})
	}
	return transformed
}
func flattenNetworkConnectivityPolicyBasedRouteWarningsCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteWarningsData(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteWarningsWarningMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkConnectivityPolicyBasedRouteTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkConnectivityPolicyBasedRouteEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
