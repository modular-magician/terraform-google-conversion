// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package databasemigrationservice

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DatabaseMigrationServiceConnectionProfileAssetType string = "datamigration.googleapis.com/ConnectionProfile"

const DatabaseMigrationServiceConnectionProfileAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/connectionProfiles"

type DatabaseMigrationServiceConnectionProfileConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDatabaseMigrationServiceConnectionProfileConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DatabaseMigrationServiceConnectionProfileConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DatabaseMigrationServiceConnectionProfileConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DatabaseMigrationServiceConnectionProfileConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDatabaseMigrationServiceConnectionProfileRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDatabaseMigrationServiceConnectionProfileRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDatabaseMigrationServiceConnectionProfileName(resource["name"], resource_data, config)
	result["display_name"] = flattenDatabaseMigrationServiceConnectionProfileDisplayName(resource["displayName"], resource_data, config)
	result["create_time"] = flattenDatabaseMigrationServiceConnectionProfileCreateTime(resource["createTime"], resource_data, config)
	result["labels"] = flattenDatabaseMigrationServiceConnectionProfileLabels(resource["labels"], resource_data, config)
	result["state"] = flattenDatabaseMigrationServiceConnectionProfileState(resource["state"], resource_data, config)
	result["error"] = flattenDatabaseMigrationServiceConnectionProfileError(resource["error"], resource_data, config)
	result["dbprovider"] = flattenDatabaseMigrationServiceConnectionProfileDbprovider(resource["provider"], resource_data, config)
	result["mysql"] = flattenDatabaseMigrationServiceConnectionProfileMysql(resource["mysql"], resource_data, config)
	result["postgresql"] = flattenDatabaseMigrationServiceConnectionProfilePostgresql(resource["postgresql"], resource_data, config)
	result["oracle"] = flattenDatabaseMigrationServiceConnectionProfileOracle(resource["oracle"], resource_data, config)
	result["cloudsql"] = flattenDatabaseMigrationServiceConnectionProfileCloudsql(resource["cloudsql"], resource_data, config)
	result["alloydb"] = flattenDatabaseMigrationServiceConnectionProfileAlloydb(resource["alloydb"], resource_data, config)
	result["terraform_labels"] = flattenDatabaseMigrationServiceConnectionProfileTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenDatabaseMigrationServiceConnectionProfileEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenDatabaseMigrationServiceConnectionProfileName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDatabaseMigrationServiceConnectionProfileState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileError(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["code"] =
		flattenDatabaseMigrationServiceConnectionProfileErrorCode(original["code"], d, config)
	transformed["message"] =
		flattenDatabaseMigrationServiceConnectionProfileErrorMessage(original["message"], d, config)
	transformed["details"] =
		flattenDatabaseMigrationServiceConnectionProfileErrorDetails(original["details"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileErrorCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileErrorDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileDbprovider(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysql(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlHost(original["host"], d, config)
	transformed["port"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlPort(original["port"], d, config)
	transformed["username"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlPassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlPasswordSet(original["passwordSet"], d, config)
	transformed["ssl"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSsl(original["ssl"], d, config)
	transformed["cloud_sql_id"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlCloudSqlId(original["cloudSqlId"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileMysqlHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslType(original["type"], d, config)
	transformed["client_key"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientKey(original["clientKey"], d, config)
	transformed["client_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientCertificate(original["clientCertificate"], d, config)
	transformed["ca_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfileMysqlSslCaCertificate(original["caCertificate"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileMysqlSslType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.ssl.0.client_key")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSslClientCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.ssl.0.client_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlSslCaCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("mysql.0.ssl.0.ca_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfileMysqlCloudSqlId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresql(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlHost(original["host"], d, config)
	transformed["port"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlPort(original["port"], d, config)
	transformed["username"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlPassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlPasswordSet(original["passwordSet"], d, config)
	transformed["ssl"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSsl(original["ssl"], d, config)
	transformed["cloud_sql_id"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlCloudSqlId(original["cloudSqlId"], d, config)
	transformed["network_architecture"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlNetworkArchitecture(original["networkArchitecture"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfilePostgresqlHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslType(original["type"], d, config)
	transformed["client_key"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientKey(original["clientKey"], d, config)
	transformed["client_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientCertificate(original["clientCertificate"], d, config)
	transformed["ca_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslCaCertificate(original["caCertificate"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.ssl.0.client_key")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslClientCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.ssl.0.client_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlSslCaCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("postgresql.0.ssl.0.ca_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlCloudSqlId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfilePostgresqlNetworkArchitecture(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOracle(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleHost(original["host"], d, config)
	transformed["port"] =
		flattenDatabaseMigrationServiceConnectionProfileOraclePort(original["port"], d, config)
	transformed["username"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleUsername(original["username"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfileOraclePassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileOraclePasswordSet(original["passwordSet"], d, config)
	transformed["database_service"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleDatabaseService(original["databaseService"], d, config)
	transformed["ssl"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleSsl(original["ssl"], d, config)
	transformed["static_service_ip_connectivity"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivity(original["staticServiceIpConnectivity"], d, config)
	transformed["forward_ssh_connectivity"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivity(original["forwardSshConnectivity"], d, config)
	transformed["private_connectivity"] =
		flattenDatabaseMigrationServiceConnectionProfileOraclePrivateConnectivity(original["privateConnectivity"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileOracleHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOraclePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileOracleUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOraclePassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfileOraclePasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOracleDatabaseService(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOracleSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleSslType(original["type"], d, config)
	transformed["client_key"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleSslClientKey(original["clientKey"], d, config)
	transformed["client_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleSslClientCertificate(original["clientCertificate"], d, config)
	transformed["ca_certificate"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleSslCaCertificate(original["caCertificate"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileOracleSslType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOracleSslClientKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle.0.ssl.0.client_key")
}

func flattenDatabaseMigrationServiceConnectionProfileOracleSslClientCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle.0.ssl.0.client_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfileOracleSslCaCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle.0.ssl.0.ca_certificate")
}

func flattenDatabaseMigrationServiceConnectionProfileOracleStaticServiceIpConnectivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hostname"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityHostname(original["hostname"], d, config)
	transformed["username"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityUsername(original["username"], d, config)
	transformed["port"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityPort(original["port"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityPassword(original["password"], d, config)
	transformed["private_key"] =
		flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityPrivateKey(original["privateKey"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle.0.forward_ssh_connectivity.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfileOracleForwardSshConnectivityPrivateKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("oracle.0.forward_ssh_connectivity.0.private_key")
}

func flattenDatabaseMigrationServiceConnectionProfileOraclePrivateConnectivity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["private_connection"] =
		flattenDatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityPrivateConnection(original["privateConnection"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileOraclePrivateConnectivityPrivateConnection(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsql(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cloud_sql_id"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlCloudSqlId(original["cloudSqlId"], d, config)
	transformed["settings"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettings(original["settings"], d, config)
	transformed["private_ip"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlPrivateIp(original["privateIp"], d, config)
	transformed["public_ip"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlPublicIp(original["publicIp"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlCloudSqlId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["database_version"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseVersion(original["databaseVersion"], d, config)
	transformed["user_labels"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsUserLabels(original["userLabels"], d, config)
	transformed["tier"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsTier(original["tier"], d, config)
	transformed["storage_auto_resize_limit"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsStorageAutoResizeLimit(original["storageAutoResizeLimit"], d, config)
	transformed["activation_policy"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsActivationPolicy(original["activationPolicy"], d, config)
	transformed["ip_config"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfig(original["ipConfig"], d, config)
	transformed["auto_storage_increase"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsAutoStorageIncrease(original["autoStorageIncrease"], d, config)
	transformed["database_flags"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseFlags(original["databaseFlags"], d, config)
	transformed["data_disk_type"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskType(original["dataDiskType"], d, config)
	transformed["data_disk_size_gb"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskSizeGb(original["dataDiskSizeGb"], d, config)
	transformed["zone"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsZone(original["zone"], d, config)
	transformed["source_id"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsSourceId(original["sourceId"], d, config)
	transformed["root_password"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPassword(original["rootPassword"], d, config)
	transformed["root_password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPasswordSet(original["rootPasswordSet"], d, config)
	transformed["collation"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCollation(original["collation"], d, config)
	transformed["cmek_key_name"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCmekKeyName(original["cmekKeyName"], d, config)
	transformed["edition"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsEdition(original["edition"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsUserLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsTier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsStorageAutoResizeLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsActivationPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_ipv4"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigEnableIpv4(original["enableIpv4"], d, config)
	transformed["private_network"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigPrivateNetwork(original["privateNetwork"], d, config)
	transformed["require_ssl"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigRequireSsl(original["requireSsl"], d, config)
	transformed["authorized_networks"] =
		flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworks(original["authorizedNetworks"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigEnableIpv4(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigPrivateNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigRequireSsl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"value":       flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksValue(original["value"], d, config),
			"label":       flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksLabel(original["label"], d, config),
			"expire_time": flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksExpireTime(original["expireTime"], d, config),
			"ttl":         flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksTtl(original["ttl"], d, config),
		})
	}
	return transformed
}
func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksLabel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksExpireTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsIpConfigAuthorizedNetworksTtl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsAutoStorageIncrease(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDatabaseFlags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsDataDiskSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsSourceId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("cloudsql.0.settings.0.root_password")
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsRootPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCollation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsCmekKeyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlSettingsEdition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlPrivateIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileCloudsqlPublicIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cluster_id"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbClusterId(original["clusterId"], d, config)
	transformed["settings"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettings(original["settings"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbClusterId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["initial_user"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUser(original["initialUser"], d, config)
	transformed["vpc_network"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsVpcNetwork(original["vpcNetwork"], d, config)
	transformed["labels"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsLabels(original["labels"], d, config)
	transformed["primary_instance_settings"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettings(original["primaryInstanceSettings"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["user"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserUser(original["user"], d, config)
	transformed["password"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPassword(original["password"], d, config)
	transformed["password_set"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPasswordSet(original["passwordSet"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPassword(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return d.Get("alloydb.0.settings.0.initial_user.0.password")
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsInitialUserPasswordSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsVpcNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettings(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["id"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsId(original["id"], d, config)
	transformed["machine_config"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig(original["machineConfig"], d, config)
	transformed["database_flags"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsDatabaseFlags(original["databaseFlags"], d, config)
	transformed["labels"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsLabels(original["labels"], d, config)
	transformed["private_ip"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsPrivateIp(original["privateIp"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cpu_count"] =
		flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigCpuCount(original["cpuCount"], d, config)
	return []interface{}{transformed}
}
func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsMachineConfigCpuCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsDatabaseFlags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileAlloydbSettingsPrimaryInstanceSettingsPrivateIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDatabaseMigrationServiceConnectionProfileTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDatabaseMigrationServiceConnectionProfileEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
