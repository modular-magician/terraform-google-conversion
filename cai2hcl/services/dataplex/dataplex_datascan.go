// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dataplex

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DataplexDatascanAssetType string = "dataplex.googleapis.com/Datascan"

const DataplexDatascanAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/dataScans"

type DataplexDatascanConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDataplexDatascanConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DataplexDatascanConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DataplexDatascanConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DataplexDatascanConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDataplexDatascanRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDataplexDatascanRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDataplexDatascanName(resource["name"], resource_data, config)
	result["uid"] = flattenDataplexDatascanUid(resource["uid"], resource_data, config)
	result["description"] = flattenDataplexDatascanDescription(resource["description"], resource_data, config)
	result["display_name"] = flattenDataplexDatascanDisplayName(resource["displayName"], resource_data, config)
	result["labels"] = flattenDataplexDatascanLabels(resource["labels"], resource_data, config)
	result["state"] = flattenDataplexDatascanState(resource["state"], resource_data, config)
	result["create_time"] = flattenDataplexDatascanCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenDataplexDatascanUpdateTime(resource["updateTime"], resource_data, config)
	result["data"] = flattenDataplexDatascanData(resource["data"], resource_data, config)
	result["execution_spec"] = flattenDataplexDatascanExecutionSpec(resource["executionSpec"], resource_data, config)
	result["execution_status"] = flattenDataplexDatascanExecutionStatus(resource["executionStatus"], resource_data, config)
	result["type"] = flattenDataplexDatascanType(resource["type"], resource_data, config)
	result["data_quality_spec"] = flattenDataplexDatascanDataQualitySpec(resource["dataQualitySpec"], resource_data, config)
	result["data_profile_spec"] = flattenDataplexDatascanDataProfileSpec(resource["dataProfileSpec"], resource_data, config)
	result["terraform_labels"] = flattenDataplexDatascanTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenDataplexDatascanEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenDataplexDatascanName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDataplexDatascanState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanData(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["entity"] =
		flattenDataplexDatascanDataEntity(original["entity"], d, config)
	transformed["resource"] =
		flattenDataplexDatascanDataResource(original["resource"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataEntity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataResource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanExecutionSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["trigger"] =
		flattenDataplexDatascanExecutionSpecTrigger(original["trigger"], d, config)
	transformed["field"] =
		flattenDataplexDatascanExecutionSpecField(original["field"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanExecutionSpecTrigger(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["on_demand"] =
		flattenDataplexDatascanExecutionSpecTriggerOnDemand(original["onDemand"], d, config)
	transformed["schedule"] =
		flattenDataplexDatascanExecutionSpecTriggerSchedule(original["schedule"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanExecutionSpecTriggerOnDemand(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataplexDatascanExecutionSpecTriggerSchedule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cron"] =
		flattenDataplexDatascanExecutionSpecTriggerScheduleCron(original["cron"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanExecutionSpecTriggerScheduleCron(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanExecutionSpecField(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanExecutionStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["latest_job_end_time"] =
		flattenDataplexDatascanExecutionStatusLatestJobEndTime(original["latestJobEndTime"], d, config)
	transformed["latest_job_start_time"] =
		flattenDataplexDatascanExecutionStatusLatestJobStartTime(original["latestJobStartTime"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanExecutionStatusLatestJobEndTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanExecutionStatusLatestJobStartTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["sampling_percent"] =
		flattenDataplexDatascanDataQualitySpecSamplingPercent(original["samplingPercent"], d, config)
	transformed["row_filter"] =
		flattenDataplexDatascanDataQualitySpecRowFilter(original["rowFilter"], d, config)
	transformed["post_scan_actions"] =
		flattenDataplexDatascanDataQualitySpecPostScanActions(original["postScanActions"], d, config)
	transformed["rules"] =
		flattenDataplexDatascanDataQualitySpecRules(original["rules"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecSamplingPercent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRowFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecPostScanActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bigquery_export"] =
		flattenDataplexDatascanDataQualitySpecPostScanActionsBigqueryExport(original["bigqueryExport"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecPostScanActionsBigqueryExport(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["results_table"] =
		flattenDataplexDatascanDataQualitySpecPostScanActionsBigqueryExportResultsTable(original["resultsTable"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecPostScanActionsBigqueryExportResultsTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"column":                      flattenDataplexDatascanDataQualitySpecRulesColumn(original["column"], d, config),
			"ignore_null":                 flattenDataplexDatascanDataQualitySpecRulesIgnoreNull(original["ignoreNull"], d, config),
			"dimension":                   flattenDataplexDatascanDataQualitySpecRulesDimension(original["dimension"], d, config),
			"threshold":                   flattenDataplexDatascanDataQualitySpecRulesThreshold(original["threshold"], d, config),
			"name":                        flattenDataplexDatascanDataQualitySpecRulesName(original["name"], d, config),
			"description":                 flattenDataplexDatascanDataQualitySpecRulesDescription(original["description"], d, config),
			"range_expectation":           flattenDataplexDatascanDataQualitySpecRulesRangeExpectation(original["rangeExpectation"], d, config),
			"non_null_expectation":        flattenDataplexDatascanDataQualitySpecRulesNonNullExpectation(original["nonNullExpectation"], d, config),
			"set_expectation":             flattenDataplexDatascanDataQualitySpecRulesSetExpectation(original["setExpectation"], d, config),
			"regex_expectation":           flattenDataplexDatascanDataQualitySpecRulesRegexExpectation(original["regexExpectation"], d, config),
			"uniqueness_expectation":      flattenDataplexDatascanDataQualitySpecRulesUniquenessExpectation(original["uniquenessExpectation"], d, config),
			"statistic_range_expectation": flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectation(original["statisticRangeExpectation"], d, config),
			"row_condition_expectation":   flattenDataplexDatascanDataQualitySpecRulesRowConditionExpectation(original["rowConditionExpectation"], d, config),
			"table_condition_expectation": flattenDataplexDatascanDataQualitySpecRulesTableConditionExpectation(original["tableConditionExpectation"], d, config),
		})
	}
	return transformed
}
func flattenDataplexDatascanDataQualitySpecRulesColumn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesIgnoreNull(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesDimension(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesThreshold(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesRangeExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["min_value"] =
		flattenDataplexDatascanDataQualitySpecRulesRangeExpectationMinValue(original["minValue"], d, config)
	transformed["max_value"] =
		flattenDataplexDatascanDataQualitySpecRulesRangeExpectationMaxValue(original["maxValue"], d, config)
	transformed["strict_min_enabled"] =
		flattenDataplexDatascanDataQualitySpecRulesRangeExpectationStrictMinEnabled(original["strictMinEnabled"], d, config)
	transformed["strict_max_enabled"] =
		flattenDataplexDatascanDataQualitySpecRulesRangeExpectationStrictMaxEnabled(original["strictMaxEnabled"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecRulesRangeExpectationMinValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesRangeExpectationMaxValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesRangeExpectationStrictMinEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesRangeExpectationStrictMaxEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesNonNullExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataplexDatascanDataQualitySpecRulesSetExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["values"] =
		flattenDataplexDatascanDataQualitySpecRulesSetExpectationValues(original["values"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecRulesSetExpectationValues(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesRegexExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["regex"] =
		flattenDataplexDatascanDataQualitySpecRulesRegexExpectationRegex(original["regex"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecRulesRegexExpectationRegex(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesUniquenessExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	transformed := make(map[string]interface{})
	return []interface{}{transformed}
}

func flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["statistic"] =
		flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationStatistic(original["statistic"], d, config)
	transformed["min_value"] =
		flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationMinValue(original["minValue"], d, config)
	transformed["max_value"] =
		flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationMaxValue(original["maxValue"], d, config)
	transformed["strict_min_enabled"] =
		flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationStrictMinEnabled(original["strictMinEnabled"], d, config)
	transformed["strict_max_enabled"] =
		flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationStrictMaxEnabled(original["strictMaxEnabled"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationStatistic(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationMinValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationMaxValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationStrictMinEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesStatisticRangeExpectationStrictMaxEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesRowConditionExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["sql_expression"] =
		flattenDataplexDatascanDataQualitySpecRulesRowConditionExpectationSqlExpression(original["sqlExpression"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecRulesRowConditionExpectationSqlExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataQualitySpecRulesTableConditionExpectation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["sql_expression"] =
		flattenDataplexDatascanDataQualitySpecRulesTableConditionExpectationSqlExpression(original["sqlExpression"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataQualitySpecRulesTableConditionExpectationSqlExpression(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataProfileSpec(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	transformed := make(map[string]interface{})
	transformed["sampling_percent"] =
		flattenDataplexDatascanDataProfileSpecSamplingPercent(original["samplingPercent"], d, config)
	transformed["row_filter"] =
		flattenDataplexDatascanDataProfileSpecRowFilter(original["rowFilter"], d, config)
	transformed["post_scan_actions"] =
		flattenDataplexDatascanDataProfileSpecPostScanActions(original["postScanActions"], d, config)
	transformed["include_fields"] =
		flattenDataplexDatascanDataProfileSpecIncludeFields(original["includeFields"], d, config)
	transformed["exclude_fields"] =
		flattenDataplexDatascanDataProfileSpecExcludeFields(original["excludeFields"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataProfileSpecSamplingPercent(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataProfileSpecRowFilter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataProfileSpecPostScanActions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bigquery_export"] =
		flattenDataplexDatascanDataProfileSpecPostScanActionsBigqueryExport(original["bigqueryExport"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataProfileSpecPostScanActionsBigqueryExport(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["results_table"] =
		flattenDataplexDatascanDataProfileSpecPostScanActionsBigqueryExportResultsTable(original["resultsTable"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataProfileSpecPostScanActionsBigqueryExportResultsTable(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataProfileSpecIncludeFields(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["field_names"] =
		flattenDataplexDatascanDataProfileSpecIncludeFieldsFieldNames(original["fieldNames"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataProfileSpecIncludeFieldsFieldNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanDataProfileSpecExcludeFields(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["field_names"] =
		flattenDataplexDatascanDataProfileSpecExcludeFieldsFieldNames(original["fieldNames"], d, config)
	return []interface{}{transformed}
}
func flattenDataplexDatascanDataProfileSpecExcludeFieldsFieldNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDataplexDatascanTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenDataplexDatascanEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
