// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package workstations

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const WorkstationsWorkstationConfigAssetType string = "workstations.googleapis.com/WorkstationConfig"

const WorkstationsWorkstationConfigAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/workstationClusters/(?P<workstation_cluster_id>[^/]+)/workstationConfigs"

type WorkstationsWorkstationConfigConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewWorkstationsWorkstationConfigConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &WorkstationsWorkstationConfigConverter{
		name:   name,
		schema: schema,
	}
}

func (c *WorkstationsWorkstationConfigConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *WorkstationsWorkstationConfigConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceWorkstationsWorkstationConfigRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceWorkstationsWorkstationConfigRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenWorkstationsWorkstationConfigName(resource["name"], resource_data, config)
	result["uid"] = flattenWorkstationsWorkstationConfigUid(resource["uid"], resource_data, config)
	result["display_name"] = flattenWorkstationsWorkstationConfigDisplayName(resource["displayName"], resource_data, config)
	result["labels"] = flattenWorkstationsWorkstationConfigLabels(resource["labels"], resource_data, config)
	result["annotations"] = flattenWorkstationsWorkstationConfigAnnotations(resource["annotations"], resource_data, config)
	result["etag"] = flattenWorkstationsWorkstationConfigEtag(resource["etag"], resource_data, config)
	result["create_time"] = flattenWorkstationsWorkstationConfigCreateTime(resource["createTime"], resource_data, config)
	result["idle_timeout"] = flattenWorkstationsWorkstationConfigIdleTimeout(resource["idleTimeout"], resource_data, config)
	result["running_timeout"] = flattenWorkstationsWorkstationConfigRunningTimeout(resource["runningTimeout"], resource_data, config)
	result["replica_zones"] = flattenWorkstationsWorkstationConfigReplicaZones(resource["replicaZones"], resource_data, config)
	result["host"] = flattenWorkstationsWorkstationConfigHost(resource["host"], resource_data, config)
	result["persistent_directories"] = flattenWorkstationsWorkstationConfigPersistentDirectories(resource["persistentDirectories"], resource_data, config)
	result["container"] = flattenWorkstationsWorkstationConfigContainer(resource["container"], resource_data, config)
	result["encryption_key"] = flattenWorkstationsWorkstationConfigEncryptionKey(resource["encryptionKey"], resource_data, config)
	result["degraded"] = flattenWorkstationsWorkstationConfigDegraded(resource["degraded"], resource_data, config)
	result["conditions"] = flattenWorkstationsWorkstationConfigConditions(resource["conditions"], resource_data, config)
	result["terraform_labels"] = flattenWorkstationsWorkstationConfigTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenWorkstationsWorkstationConfigEffectiveLabels(resource["labels"], resource_data, config)
	result["effective_annotations"] = flattenWorkstationsWorkstationConfigEffectiveAnnotations(resource["annotations"], resource_data, config)

	return result, nil
}

func flattenWorkstationsWorkstationConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenWorkstationsWorkstationConfigAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenWorkstationsWorkstationConfigEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigIdleTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigRunningTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigReplicaZones(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["gce_instance"] =
		flattenWorkstationsWorkstationConfigHostGceInstance(original["gceInstance"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigHostGceInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["machine_type"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceMachineType(original["machineType"], d, config)
	transformed["service_account"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceServiceAccount(original["serviceAccount"], d, config)
	transformed["service_account_scopes"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceServiceAccountScopes(original["serviceAccountScopes"], d, config)
	transformed["pool_size"] =
		flattenWorkstationsWorkstationConfigHostGceInstancePoolSize(original["poolSize"], d, config)
	transformed["boot_disk_size_gb"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceBootDiskSizeGb(original["bootDiskSizeGb"], d, config)
	transformed["tags"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceTags(original["tags"], d, config)
	transformed["disable_public_ip_addresses"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceDisablePublicIpAddresses(original["disablePublicIpAddresses"], d, config)
	transformed["enable_nested_virtualization"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceEnableNestedVirtualization(original["enableNestedVirtualization"], d, config)
	transformed["shielded_instance_config"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfig(original["shieldedInstanceConfig"], d, config)
	transformed["confidential_instance_config"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfig(original["confidentialInstanceConfig"], d, config)
	transformed["accelerators"] =
		flattenWorkstationsWorkstationConfigHostGceInstanceAccelerators(original["accelerators"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigHostGceInstanceMachineType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceServiceAccountScopes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstancePoolSize(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigHostGceInstanceBootDiskSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigHostGceInstanceTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceDisablePublicIpAddresses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceEnableNestedVirtualization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceShieldedInstanceConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	transformed := make(map[string]interface{})

	// Defaults for when no value is provided by API.
	transformed["enable_secure_boot"] = false
	transformed["enable_vtpm"] = false
	transformed["enable_integrity_monitoring"] = false

	if v == nil {
		return []interface{}{transformed}
	}

	original := v.(map[string]interface{})
	if original["enableSecureBoot"] != nil {
		transformed["enable_secure_boot"] = original["enableSecureBoot"]
	}
	if original["enableVtpm"] != nil {
		transformed["enable_vtpm"] = original["enableVtpm"]
	}
	if original["enableIntegrityMonitoring"] != nil {
		transformed["enable_integrity_monitoring"] = original["enableIntegrityMonitoring"]
	}

	return []interface{}{transformed}
}

func flattenWorkstationsWorkstationConfigHostGceInstanceConfidentialInstanceConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	transformed := make(map[string]interface{})

	// Defaults for when no value is provided by API.
	transformed["enable_confidential_compute"] = false

	if v == nil {
		return []interface{}{transformed}
	}

	original := v.(map[string]interface{})
	if original["enableConfidentialCompute"] != nil {
		transformed["enable_confidential_compute"] = original["enableConfidentialCompute"]
	}

	return []interface{}{transformed}
}

func flattenWorkstationsWorkstationConfigHostGceInstanceAccelerators(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":  flattenWorkstationsWorkstationConfigHostGceInstanceAcceleratorsType(original["type"], d, config),
			"count": flattenWorkstationsWorkstationConfigHostGceInstanceAcceleratorsCount(original["count"], d, config),
		})
	}
	return transformed
}
func flattenWorkstationsWorkstationConfigHostGceInstanceAcceleratorsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigHostGceInstanceAcceleratorsCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigPersistentDirectories(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"mount_path": flattenWorkstationsWorkstationConfigPersistentDirectoriesMountPath(original["mountPath"], d, config),
			"gce_pd":     flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePd(original["gcePd"], d, config),
		})
	}
	return transformed
}
func flattenWorkstationsWorkstationConfigPersistentDirectoriesMountPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["fs_type"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdFsType(original["fsType"], d, config)
	transformed["disk_type"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdDiskType(original["diskType"], d, config)
	transformed["size_gb"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdSizeGb(original["sizeGb"], d, config)
	transformed["reclaim_policy"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdReclaimPolicy(original["reclaimPolicy"], d, config)
	transformed["source_snapshot"] =
		flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdSourceSnapshot(original["sourceSnapshot"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdFsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdDiskType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdSizeGb(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdReclaimPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigPersistentDirectoriesGcePdSourceSnapshot(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["image"] =
		flattenWorkstationsWorkstationConfigContainerImage(original["image"], d, config)
	transformed["command"] =
		flattenWorkstationsWorkstationConfigContainerCommand(original["command"], d, config)
	transformed["args"] =
		flattenWorkstationsWorkstationConfigContainerArgs(original["args"], d, config)
	transformed["working_dir"] =
		flattenWorkstationsWorkstationConfigContainerWorkingDir(original["workingDir"], d, config)
	transformed["env"] =
		flattenWorkstationsWorkstationConfigContainerEnv(original["env"], d, config)
	transformed["run_as_user"] =
		flattenWorkstationsWorkstationConfigContainerRunAsUser(original["runAsUser"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigContainerImage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerCommand(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerArgs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerWorkingDir(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerEnv(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigContainerRunAsUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigEncryptionKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["kms_key"] =
		flattenWorkstationsWorkstationConfigEncryptionKeyKmsKey(original["kmsKey"], d, config)
	transformed["kms_key_service_account"] =
		flattenWorkstationsWorkstationConfigEncryptionKeyKmsKeyServiceAccount(original["kmsKeyServiceAccount"], d, config)
	return []interface{}{transformed}
}
func flattenWorkstationsWorkstationConfigEncryptionKeyKmsKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigEncryptionKeyKmsKeyServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigDegraded(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"code":    flattenWorkstationsWorkstationConfigConditionsCode(original["code"], d, config),
			"message": flattenWorkstationsWorkstationConfigConditionsMessage(original["message"], d, config),
			"details": flattenWorkstationsWorkstationConfigConditionsDetails(original["details"], d, config),
		})
	}
	return transformed
}
func flattenWorkstationsWorkstationConfigConditionsCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenWorkstationsWorkstationConfigConditionsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigConditionsDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenWorkstationsWorkstationConfigEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenWorkstationsWorkstationConfigEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
