// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package containeranalysis

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ContainerAnalysisNoteAssetType string = "containeranalysis.googleapis.com/Note"

const ContainerAnalysisNoteAssetNameRegex string = "projects/(?P<project>[^/]+)/notes?noteId=(?P<name>[^/]+)"

type ContainerAnalysisNoteConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewContainerAnalysisNoteConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ContainerAnalysisNoteConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ContainerAnalysisNoteConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ContainerAnalysisNoteConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceContainerAnalysisNoteRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceContainerAnalysisNoteRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenContainerAnalysisNoteName(resource["name"], resource_data, config)
	result["short_description"] = flattenContainerAnalysisNoteShortDescription(resource["shortDescription"], resource_data, config)
	result["long_description"] = flattenContainerAnalysisNoteLongDescription(resource["longDescription"], resource_data, config)
	result["kind"] = flattenContainerAnalysisNoteKind(resource["kind"], resource_data, config)
	result["related_url"] = flattenContainerAnalysisNoteRelatedUrl(resource["relatedUrl"], resource_data, config)
	result["expiration_time"] = flattenContainerAnalysisNoteExpirationTime(resource["expirationTime"], resource_data, config)
	result["create_time"] = flattenContainerAnalysisNoteCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenContainerAnalysisNoteUpdateTime(resource["updateTime"], resource_data, config)
	result["related_note_names"] = flattenContainerAnalysisNoteRelatedNoteNames(resource["relatedNoteNames"], resource_data, config)
	result["attestation_authority"] = flattenContainerAnalysisNoteAttestationAuthority(resource["attestationAuthority"], resource_data, config)

	return result, nil
}

func flattenContainerAnalysisNoteName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenContainerAnalysisNoteShortDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteLongDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteKind(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteRelatedUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := schema.NewSet(schema.HashResource(containeranalysisNoteRelatedUrlSchema()), []interface{}{})
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed.Add(map[string]interface{}{
			"url":   flattenContainerAnalysisNoteRelatedUrlUrl(original["url"], d, config),
			"label": flattenContainerAnalysisNoteRelatedUrlLabel(original["label"], d, config),
		})
	}
	return transformed
}
func flattenContainerAnalysisNoteRelatedUrlUrl(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteRelatedUrlLabel(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteExpirationTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenContainerAnalysisNoteRelatedNoteNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return schema.NewSet(schema.HashString, v.([]interface{}))
}

func flattenContainerAnalysisNoteAttestationAuthority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["hint"] =
		flattenContainerAnalysisNoteAttestationAuthorityHint(original["hint"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAnalysisNoteAttestationAuthorityHint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["human_readable_name"] =
		flattenContainerAnalysisNoteAttestationAuthorityHintHumanReadableName(original["humanReadableName"], d, config)
	return []interface{}{transformed}
}
func flattenContainerAnalysisNoteAttestationAuthorityHintHumanReadableName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
