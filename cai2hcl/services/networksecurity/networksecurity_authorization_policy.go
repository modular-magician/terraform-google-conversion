// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networksecurity

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkSecurityAuthorizationPolicyAssetType string = "networksecurity.googleapis.com/AuthorizationPolicy"

const NetworkSecurityAuthorizationPolicyAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/authorizationPolicies"

type NetworkSecurityAuthorizationPolicyConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkSecurityAuthorizationPolicyConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &NetworkSecurityAuthorizationPolicyConverter{
		name:   name,
		schema: schema,
	}
}

func (c *NetworkSecurityAuthorizationPolicyConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *NetworkSecurityAuthorizationPolicyConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceNetworkSecurityAuthorizationPolicyRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceNetworkSecurityAuthorizationPolicyRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["create_time"] = flattenNetworkSecurityAuthorizationPolicyCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenNetworkSecurityAuthorizationPolicyUpdateTime(resource["updateTime"], resource_data, config)
	result["labels"] = flattenNetworkSecurityAuthorizationPolicyLabels(resource["labels"], resource_data, config)
	result["description"] = flattenNetworkSecurityAuthorizationPolicyDescription(resource["description"], resource_data, config)
	result["action"] = flattenNetworkSecurityAuthorizationPolicyAction(resource["action"], resource_data, config)
	result["rules"] = flattenNetworkSecurityAuthorizationPolicyRules(resource["rules"], resource_data, config)
	result["terraform_labels"] = flattenNetworkSecurityAuthorizationPolicyTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenNetworkSecurityAuthorizationPolicyEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenNetworkSecurityAuthorizationPolicyCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkSecurityAuthorizationPolicyDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"sources":      flattenNetworkSecurityAuthorizationPolicyRulesSources(original["sources"], d, config),
			"destinations": flattenNetworkSecurityAuthorizationPolicyRulesDestinations(original["destinations"], d, config),
		})
	}
	return transformed
}
func flattenNetworkSecurityAuthorizationPolicyRulesSources(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"principals": flattenNetworkSecurityAuthorizationPolicyRulesSourcesPrincipals(original["principals"], d, config),
			"ip_blocks":  flattenNetworkSecurityAuthorizationPolicyRulesSourcesIpBlocks(original["ipBlocks"], d, config),
		})
	}
	return transformed
}
func flattenNetworkSecurityAuthorizationPolicyRulesSourcesPrincipals(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesSourcesIpBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"hosts":             flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHosts(original["hosts"], d, config),
			"ports":             flattenNetworkSecurityAuthorizationPolicyRulesDestinationsPorts(original["ports"], d, config),
			"methods":           flattenNetworkSecurityAuthorizationPolicyRulesDestinationsMethods(original["methods"], d, config),
			"http_header_match": flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatch(original["httpHeaderMatch"], d, config),
		})
	}
	return transformed
}
func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHosts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsPorts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsMethods(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["header_name"] =
		flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchHeaderName(original["headerName"], d, config)
	transformed["regex_match"] =
		flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchRegexMatch(original["regexMatch"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchHeaderName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyRulesDestinationsHttpHeaderMatchRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityAuthorizationPolicyTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkSecurityAuthorizationPolicyEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
