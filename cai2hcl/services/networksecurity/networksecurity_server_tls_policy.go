// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networksecurity

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkSecurityServerTlsPolicyAssetType string = "networksecurity.googleapis.com/ServerTlsPolicy"

const NetworkSecurityServerTlsPolicyAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/serverTlsPolicies"

type NetworkSecurityServerTlsPolicyConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkSecurityServerTlsPolicyConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &NetworkSecurityServerTlsPolicyConverter{
		name:   name,
		schema: schema,
	}
}

func (c *NetworkSecurityServerTlsPolicyConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *NetworkSecurityServerTlsPolicyConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceNetworkSecurityServerTlsPolicyRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceNetworkSecurityServerTlsPolicyRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["create_time"] = flattenNetworkSecurityServerTlsPolicyCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenNetworkSecurityServerTlsPolicyUpdateTime(resource["updateTime"], resource_data, config)
	result["labels"] = flattenNetworkSecurityServerTlsPolicyLabels(resource["labels"], resource_data, config)
	result["description"] = flattenNetworkSecurityServerTlsPolicyDescription(resource["description"], resource_data, config)
	result["allow_open"] = flattenNetworkSecurityServerTlsPolicyAllowOpen(resource["allowOpen"], resource_data, config)
	result["server_certificate"] = flattenNetworkSecurityServerTlsPolicyServerCertificate(resource["serverCertificate"], resource_data, config)
	result["mtls_policy"] = flattenNetworkSecurityServerTlsPolicyMtlsPolicy(resource["mtlsPolicy"], resource_data, config)
	result["terraform_labels"] = flattenNetworkSecurityServerTlsPolicyTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenNetworkSecurityServerTlsPolicyEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenNetworkSecurityServerTlsPolicyCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkSecurityServerTlsPolicyDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyAllowOpen(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyServerCertificate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["grpc_endpoint"] =
		flattenNetworkSecurityServerTlsPolicyServerCertificateGrpcEndpoint(original["grpcEndpoint"], d, config)
	transformed["certificate_provider_instance"] =
		flattenNetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstance(original["certificateProviderInstance"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityServerTlsPolicyServerCertificateGrpcEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["target_uri"] =
		flattenNetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointTargetUri(original["targetUri"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityServerTlsPolicyServerCertificateGrpcEndpointTargetUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["plugin_instance"] =
		flattenNetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstancePluginInstance(original["pluginInstance"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityServerTlsPolicyServerCertificateCertificateProviderInstancePluginInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyMtlsPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["client_validation_mode"] =
		flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationMode(original["clientValidationMode"], d, config)
	transformed["client_validation_trust_config"] =
		flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationTrustConfig(original["clientValidationTrustConfig"], d, config)
	transformed["client_validation_ca"] =
		flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCa(original["clientValidationCa"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationTrustConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCa(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"grpc_endpoint":                 flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint(original["grpcEndpoint"], d, config),
			"certificate_provider_instance": flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance(original["certificateProviderInstance"], d, config),
		})
	}
	return transformed
}
func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["target_uri"] =
		flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointTargetUri(original["targetUri"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaGrpcEndpointTargetUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["plugin_instance"] =
		flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePluginInstance(original["pluginInstance"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkSecurityServerTlsPolicyMtlsPolicyClientValidationCaCertificateProviderInstancePluginInstance(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkSecurityServerTlsPolicyTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkSecurityServerTlsPolicyEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
