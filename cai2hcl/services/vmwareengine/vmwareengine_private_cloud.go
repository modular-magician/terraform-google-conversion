// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vmwareengine

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const VmwareenginePrivateCloudAssetType string = "vmwareengine.googleapis.com/PrivateCloud"

const VmwareenginePrivateCloudAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/privateClouds"

type VmwareenginePrivateCloudConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewVmwareenginePrivateCloudConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &VmwareenginePrivateCloudConverter{
		name:   name,
		schema: schema,
	}
}

func (c *VmwareenginePrivateCloudConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *VmwareenginePrivateCloudConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceVmwareenginePrivateCloudRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceVmwareenginePrivateCloudRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["description"] = flattenVmwareenginePrivateCloudDescription(resource["description"], resource_data, config)
	result["uid"] = flattenVmwareenginePrivateCloudUid(resource["uid"], resource_data, config)
	result["state"] = flattenVmwareenginePrivateCloudState(resource["state"], resource_data, config)
	result["network_config"] = flattenVmwareenginePrivateCloudNetworkConfig(resource["networkConfig"], resource_data, config)
	result["management_cluster"] = flattenVmwareenginePrivateCloudManagementCluster(resource["managementCluster"], resource_data, config)
	result["hcx"] = flattenVmwareenginePrivateCloudHcx(resource["hcx"], resource_data, config)
	result["nsx"] = flattenVmwareenginePrivateCloudNsx(resource["nsx"], resource_data, config)
	result["vcenter"] = flattenVmwareenginePrivateCloudVcenter(resource["vcenter"], resource_data, config)

	return result, nil
}

func flattenVmwareenginePrivateCloudDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNetworkConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["management_cidr"] =
		flattenVmwareenginePrivateCloudNetworkConfigManagementCidr(original["managementCidr"], d, config)
	transformed["vmware_engine_network"] =
		flattenVmwareenginePrivateCloudNetworkConfigVmwareEngineNetwork(original["vmwareEngineNetwork"], d, config)
	transformed["vmware_engine_network_canonical"] =
		flattenVmwareenginePrivateCloudNetworkConfigVmwareEngineNetworkCanonical(original["vmwareEngineNetworkCanonical"], d, config)
	transformed["management_ip_address_layout_version"] =
		flattenVmwareenginePrivateCloudNetworkConfigManagementIpAddressLayoutVersion(original["managementIpAddressLayoutVersion"], d, config)
	return []interface{}{transformed}
}
func flattenVmwareenginePrivateCloudNetworkConfigManagementCidr(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNetworkConfigVmwareEngineNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNetworkConfigVmwareEngineNetworkCanonical(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNetworkConfigManagementIpAddressLayoutVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenVmwareenginePrivateCloudManagementCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cluster_id"] =
		flattenVmwareenginePrivateCloudManagementClusterClusterId(original["clusterId"], d, config)
	transformed["node_type_configs"] =
		flattenVmwareenginePrivateCloudManagementClusterNodeTypeConfigs(original["nodeTypeConfigs"], d, config)
	return []interface{}{transformed}
}
func flattenVmwareenginePrivateCloudManagementClusterClusterId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudManagementClusterNodeTypeConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.(map[string]interface{})
	transformed := make([]interface{}, 0, len(l))
	for k, raw := range l {
		original := raw.(map[string]interface{})
		transformed = append(transformed, map[string]interface{}{
			"node_type_id":      k,
			"node_count":        flattenVmwareenginePrivateCloudManagementClusterNodeTypeConfigsNodeCount(original["nodeCount"], d, config),
			"custom_core_count": flattenVmwareenginePrivateCloudManagementClusterNodeTypeConfigsCustomCoreCount(original["customCoreCount"], d, config),
		})
	}
	return transformed
}
func flattenVmwareenginePrivateCloudManagementClusterNodeTypeConfigsNodeCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenVmwareenginePrivateCloudManagementClusterNodeTypeConfigsCustomCoreCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenVmwareenginePrivateCloudHcx(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["internal_ip"] =
		flattenVmwareenginePrivateCloudHcxInternalIp(original["internalIp"], d, config)
	transformed["version"] =
		flattenVmwareenginePrivateCloudHcxVersion(original["version"], d, config)
	transformed["state"] =
		flattenVmwareenginePrivateCloudHcxState(original["state"], d, config)
	transformed["fqdn"] =
		flattenVmwareenginePrivateCloudHcxFqdn(original["fqdn"], d, config)
	return []interface{}{transformed}
}
func flattenVmwareenginePrivateCloudHcxInternalIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudHcxVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudHcxState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudHcxFqdn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNsx(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["internal_ip"] =
		flattenVmwareenginePrivateCloudNsxInternalIp(original["internalIp"], d, config)
	transformed["version"] =
		flattenVmwareenginePrivateCloudNsxVersion(original["version"], d, config)
	transformed["state"] =
		flattenVmwareenginePrivateCloudNsxState(original["state"], d, config)
	transformed["fqdn"] =
		flattenVmwareenginePrivateCloudNsxFqdn(original["fqdn"], d, config)
	return []interface{}{transformed}
}
func flattenVmwareenginePrivateCloudNsxInternalIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNsxVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNsxState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudNsxFqdn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudVcenter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["internal_ip"] =
		flattenVmwareenginePrivateCloudVcenterInternalIp(original["internalIp"], d, config)
	transformed["version"] =
		flattenVmwareenginePrivateCloudVcenterVersion(original["version"], d, config)
	transformed["state"] =
		flattenVmwareenginePrivateCloudVcenterState(original["state"], d, config)
	transformed["fqdn"] =
		flattenVmwareenginePrivateCloudVcenterFqdn(original["fqdn"], d, config)
	return []interface{}{transformed}
}
func flattenVmwareenginePrivateCloudVcenterInternalIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudVcenterVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudVcenterState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenVmwareenginePrivateCloudVcenterFqdn(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
