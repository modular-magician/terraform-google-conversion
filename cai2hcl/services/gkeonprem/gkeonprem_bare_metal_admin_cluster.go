// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package gkeonprem

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GkeonpremBareMetalAdminClusterAssetType string = "gkeonprem.googleapis.com/BareMetalAdminCluster"

const GkeonpremBareMetalAdminClusterAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/bareMetalAdminClusters"

type GkeonpremBareMetalAdminClusterConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewGkeonpremBareMetalAdminClusterConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &GkeonpremBareMetalAdminClusterConverter{
		name:   name,
		schema: schema,
	}
}

func (c *GkeonpremBareMetalAdminClusterConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *GkeonpremBareMetalAdminClusterConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceGkeonpremBareMetalAdminClusterRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceGkeonpremBareMetalAdminClusterRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["description"] = flattenGkeonpremBareMetalAdminClusterDescription(resource["description"], resource_data, config)
	result["bare_metal_version"] = flattenGkeonpremBareMetalAdminClusterBareMetalVersion(resource["bareMetalVersion"], resource_data, config)
	result["uid"] = flattenGkeonpremBareMetalAdminClusterUid(resource["uid"], resource_data, config)
	result["state"] = flattenGkeonpremBareMetalAdminClusterState(resource["state"], resource_data, config)
	result["endpoint"] = flattenGkeonpremBareMetalAdminClusterEndpoint(resource["endpoint"], resource_data, config)
	result["reconciling"] = flattenGkeonpremBareMetalAdminClusterReconciling(resource["reconciling"], resource_data, config)
	result["create_time"] = flattenGkeonpremBareMetalAdminClusterCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenGkeonpremBareMetalAdminClusterUpdateTime(resource["updateTime"], resource_data, config)
	result["delete_time"] = flattenGkeonpremBareMetalAdminClusterDeleteTime(resource["deleteTime"], resource_data, config)
	result["local_name"] = flattenGkeonpremBareMetalAdminClusterLocalName(resource["localName"], resource_data, config)
	result["etag"] = flattenGkeonpremBareMetalAdminClusterEtag(resource["etag"], resource_data, config)
	result["annotations"] = flattenGkeonpremBareMetalAdminClusterAnnotations(resource["annotations"], resource_data, config)
	result["network_config"] = flattenGkeonpremBareMetalAdminClusterNetworkConfig(resource["networkConfig"], resource_data, config)
	result["control_plane"] = flattenGkeonpremBareMetalAdminClusterControlPlane(resource["controlPlane"], resource_data, config)
	result["load_balancer"] = flattenGkeonpremBareMetalAdminClusterLoadBalancer(resource["loadBalancer"], resource_data, config)
	result["storage"] = flattenGkeonpremBareMetalAdminClusterStorage(resource["storage"], resource_data, config)
	result["proxy"] = flattenGkeonpremBareMetalAdminClusterProxy(resource["proxy"], resource_data, config)
	result["cluster_operations"] = flattenGkeonpremBareMetalAdminClusterClusterOperations(resource["clusterOperations"], resource_data, config)
	result["maintenance_config"] = flattenGkeonpremBareMetalAdminClusterMaintenanceConfig(resource["maintenanceConfig"], resource_data, config)
	result["node_config"] = flattenGkeonpremBareMetalAdminClusterNodeConfig(resource["nodeConfig"], resource_data, config)
	result["fleet"] = flattenGkeonpremBareMetalAdminClusterFleet(resource["fleet"], resource_data, config)
	result["status"] = flattenGkeonpremBareMetalAdminClusterStatus(resource["status"], resource_data, config)
	result["validation_check"] = flattenGkeonpremBareMetalAdminClusterValidationCheck(resource["validationCheck"], resource_data, config)
	result["node_access_config"] = flattenGkeonpremBareMetalAdminClusterNodeAccessConfig(resource["nodeAccessConfig"], resource_data, config)
	result["security_config"] = flattenGkeonpremBareMetalAdminClusterSecurityConfig(resource["securityConfig"], resource_data, config)
	result["effective_annotations"] = flattenGkeonpremBareMetalAdminClusterEffectiveAnnotations(resource["annotations"], resource_data, config)

	return result, nil
}

func flattenGkeonpremBareMetalAdminClusterDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterBareMetalVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterReconciling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterLocalName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenGkeonpremBareMetalAdminClusterNetworkConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["island_mode_cidr"] =
		flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidr(original["islandModeCidr"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidr(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_address_cidr_blocks"] =
		flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrServiceAddressCidrBlocks(original["serviceAddressCidrBlocks"], d, config)
	transformed["pod_address_cidr_blocks"] =
		flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrPodAddressCidrBlocks(original["podAddressCidrBlocks"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrServiceAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterNetworkConfigIslandModeCidrPodAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlane(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_node_pool_config"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig(original["controlPlaneNodePoolConfig"], d, config)
	transformed["api_server_args"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgs(original["apiServerArgs"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["node_pool_config"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig(original["nodePoolConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["node_configs"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs(original["nodeConfigs"], d, config)
	transformed["operating_system"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOperatingSystem(original["operatingSystem"], d, config)
	transformed["taints"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints(original["taints"], d, config)
	transformed["labels"] =
		flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigLabels(original["labels"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"node_ip": flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsNodeIp(original["nodeIp"], d, config),
			"labels":  flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsLabels(original["labels"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsNodeIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigNodeConfigsLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigOperatingSystem(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"key":    flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsKey(original["key"], d, config),
			"value":  flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsValue(original["value"], d, config),
			"effect": flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsEffect(original["effect"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigTaintsEffect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneControlPlaneNodePoolConfigNodePoolConfigLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"argument": flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsArgument(original["argument"], d, config),
			"value":    flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsArgument(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterControlPlaneApiServerArgsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterLoadBalancer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["vip_config"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfig(original["vipConfig"], d, config)
	transformed["port_config"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfig(original["portConfig"], d, config)
	transformed["manual_lb_config"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfig(original["manualLbConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_vip"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfigControlPlaneVip(original["controlPlaneVip"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerVipConfigControlPlaneVip(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_load_balancer_port"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfigControlPlaneLoadBalancerPort(original["controlPlaneLoadBalancerPort"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerPortConfigControlPlaneLoadBalancerPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterLoadBalancerManualLbConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["lvp_share_config"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfig(original["lvpShareConfig"], d, config)
	transformed["lvp_node_mounts_config"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfig(original["lvpNodeMountsConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["lvp_config"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfig(original["lvpConfig"], d, config)
	transformed["shared_path_pv_count"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigSharedPathPvCount(original["sharedPathPvCount"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["path"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigPath(original["path"], d, config)
	transformed["storage_class"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigStorageClass(original["storageClass"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigLvpConfigStorageClass(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpShareConfigSharedPathPvCount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["path"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigPath(original["path"], d, config)
	transformed["storage_class"] =
		flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigStorageClass(original["storageClass"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStorageLvpNodeMountsConfigStorageClass(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterProxy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["uri"] =
		flattenGkeonpremBareMetalAdminClusterProxyUri(original["uri"], d, config)
	transformed["no_proxy"] =
		flattenGkeonpremBareMetalAdminClusterProxyNoProxy(original["noProxy"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterProxyUri(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterProxyNoProxy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterClusterOperations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_application_logs"] =
		flattenGkeonpremBareMetalAdminClusterClusterOperationsEnableApplicationLogs(original["enableApplicationLogs"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterClusterOperationsEnableApplicationLogs(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterMaintenanceConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["maintenance_address_cidr_blocks"] =
		flattenGkeonpremBareMetalAdminClusterMaintenanceConfigMaintenanceAddressCidrBlocks(original["maintenanceAddressCidrBlocks"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterMaintenanceConfigMaintenanceAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterNodeConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["max_pods_per_node"] =
		flattenGkeonpremBareMetalAdminClusterNodeConfigMaxPodsPerNode(original["maxPodsPerNode"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNodeConfigMaxPodsPerNode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremBareMetalAdminClusterFleet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["membership"] =
		flattenGkeonpremBareMetalAdminClusterFleetMembership(original["membership"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterFleetMembership(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["error_message"] =
		flattenGkeonpremBareMetalAdminClusterStatusErrorMessage(original["errorMessage"], d, config)
	transformed["conditions"] =
		flattenGkeonpremBareMetalAdminClusterStatusConditions(original["conditions"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterStatusErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":                 flattenGkeonpremBareMetalAdminClusterStatusConditionsType(original["type"], d, config),
			"reason":               flattenGkeonpremBareMetalAdminClusterStatusConditionsReason(original["reason"], d, config),
			"message":              flattenGkeonpremBareMetalAdminClusterStatusConditionsMessage(original["message"], d, config),
			"last_transition_time": flattenGkeonpremBareMetalAdminClusterStatusConditionsLastTransitionTime(original["lastTransitionTime"], d, config),
			"state":                flattenGkeonpremBareMetalAdminClusterStatusConditionsState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterStatusConditionsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterStatusConditionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheck(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["options"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckOptions(original["options"], d, config)
	transformed["status"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckStatus(original["status"], d, config)
	transformed["scenario"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckScenario(original["scenario"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterValidationCheckOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["result"] =
		flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResult(original["result"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"options":     flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultOptions(original["options"], d, config),
			"description": flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDescription(original["description"], d, config),
			"category":    flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultCategory(original["category"], d, config),
			"reason":      flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultReason(original["reason"], d, config),
			"details":     flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDetails(original["details"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultCategory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckStatusResultDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterValidationCheckScenario(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterNodeAccessConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["login_user"] =
		flattenGkeonpremBareMetalAdminClusterNodeAccessConfigLoginUser(original["loginUser"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterNodeAccessConfigLoginUser(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterSecurityConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["authorization"] =
		flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorization(original["authorization"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["admin_users"] =
		flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsers(original["adminUsers"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"username": flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersUsername(original["username"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremBareMetalAdminClusterSecurityConfigAuthorizationAdminUsersUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremBareMetalAdminClusterEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
