// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package gkeonprem

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const GkeonpremVmwareClusterAssetType string = "gkeonprem.googleapis.com/VmwareCluster"

const GkeonpremVmwareClusterAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/vmwareClusters"

type GkeonpremVmwareClusterConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewGkeonpremVmwareClusterConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &GkeonpremVmwareClusterConverter{
		name:   name,
		schema: schema,
	}
}

func (c *GkeonpremVmwareClusterConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *GkeonpremVmwareClusterConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceGkeonpremVmwareClusterRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceGkeonpremVmwareClusterRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["admin_cluster_membership"] = flattenGkeonpremVmwareClusterAdminClusterMembership(resource["adminClusterMembership"], resource_data, config)
	result["description"] = flattenGkeonpremVmwareClusterDescription(resource["description"], resource_data, config)
	result["on_prem_version"] = flattenGkeonpremVmwareClusterOnPremVersion(resource["onPremVersion"], resource_data, config)
	result["annotations"] = flattenGkeonpremVmwareClusterAnnotations(resource["annotations"], resource_data, config)
	result["control_plane_node"] = flattenGkeonpremVmwareClusterControlPlaneNode(resource["controlPlaneNode"], resource_data, config)
	result["anti_affinity_groups"] = flattenGkeonpremVmwareClusterAntiAffinityGroups(resource["antiAffinityGroups"], resource_data, config)
	result["storage"] = flattenGkeonpremVmwareClusterStorage(resource["storage"], resource_data, config)
	result["network_config"] = flattenGkeonpremVmwareClusterNetworkConfig(resource["networkConfig"], resource_data, config)
	result["load_balancer"] = flattenGkeonpremVmwareClusterLoadBalancer(resource["loadBalancer"], resource_data, config)
	result["dataplane_v2"] = flattenGkeonpremVmwareClusterDataplaneV2(resource["dataplaneV2"], resource_data, config)
	result["vm_tracking_enabled"] = flattenGkeonpremVmwareClusterVmTrackingEnabled(resource["vmTrackingEnabled"], resource_data, config)
	result["auto_repair_config"] = flattenGkeonpremVmwareClusterAutoRepairConfig(resource["autoRepairConfig"], resource_data, config)
	result["authorization"] = flattenGkeonpremVmwareClusterAuthorization(resource["authorization"], resource_data, config)
	result["validation_check"] = flattenGkeonpremVmwareClusterValidationCheck(resource["validationCheck"], resource_data, config)
	result["enable_control_plane_v2"] = flattenGkeonpremVmwareClusterEnableControlPlaneV2(resource["enableControlPlaneV2"], resource_data, config)
	result["upgrade_policy"] = flattenGkeonpremVmwareClusterUpgradePolicy(resource["upgradePolicy"], resource_data, config)
	result["uid"] = flattenGkeonpremVmwareClusterUid(resource["uid"], resource_data, config)
	result["state"] = flattenGkeonpremVmwareClusterState(resource["state"], resource_data, config)
	result["endpoint"] = flattenGkeonpremVmwareClusterEndpoint(resource["endpoint"], resource_data, config)
	result["reconciling"] = flattenGkeonpremVmwareClusterReconciling(resource["reconciling"], resource_data, config)
	result["create_time"] = flattenGkeonpremVmwareClusterCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenGkeonpremVmwareClusterUpdateTime(resource["updateTime"], resource_data, config)
	result["delete_time"] = flattenGkeonpremVmwareClusterDeleteTime(resource["deleteTime"], resource_data, config)
	result["local_name"] = flattenGkeonpremVmwareClusterLocalName(resource["localName"], resource_data, config)
	result["etag"] = flattenGkeonpremVmwareClusterEtag(resource["etag"], resource_data, config)
	result["fleet"] = flattenGkeonpremVmwareClusterFleet(resource["fleet"], resource_data, config)
	result["vcenter"] = flattenGkeonpremVmwareClusterVcenter(resource["vcenter"], resource_data, config)
	result["status"] = flattenGkeonpremVmwareClusterStatus(resource["status"], resource_data, config)
	result["effective_annotations"] = flattenGkeonpremVmwareClusterEffectiveAnnotations(resource["annotations"], resource_data, config)

	return result, nil
}

func flattenGkeonpremVmwareClusterAdminClusterMembership(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterOnPremVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("annotations"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenGkeonpremVmwareClusterControlPlaneNode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["cpus"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeCpus(original["cpus"], d, config)
	transformed["memory"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeMemory(original["memory"], d, config)
	transformed["replicas"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeReplicas(original["replicas"], d, config)
	transformed["auto_resize_config"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeAutoResizeConfig(original["autoResizeConfig"], d, config)
	transformed["vsphere_config"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeVsphereConfig(original["vsphereConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterControlPlaneNodeCpus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterControlPlaneNodeMemory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterControlPlaneNodeReplicas(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterControlPlaneNodeAutoResizeConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeAutoResizeConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterControlPlaneNodeAutoResizeConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterControlPlaneNodeVsphereConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["datastore"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeVsphereConfigDatastore(original["datastore"], d, config)
	transformed["storage_policy_name"] =
		flattenGkeonpremVmwareClusterControlPlaneNodeVsphereConfigStoragePolicyName(original["storagePolicyName"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterControlPlaneNodeVsphereConfigDatastore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterControlPlaneNodeVsphereConfigStoragePolicyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterAntiAffinityGroups(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["aag_config_disabled"] =
		flattenGkeonpremVmwareClusterAntiAffinityGroupsAagConfigDisabled(original["aagConfigDisabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterAntiAffinityGroupsAagConfigDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStorage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["vsphere_csi_disabled"] =
		flattenGkeonpremVmwareClusterStorageVsphereCsiDisabled(original["vsphereCsiDisabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterStorageVsphereCsiDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_address_cidr_blocks"] =
		flattenGkeonpremVmwareClusterNetworkConfigServiceAddressCidrBlocks(original["serviceAddressCidrBlocks"], d, config)
	transformed["pod_address_cidr_blocks"] =
		flattenGkeonpremVmwareClusterNetworkConfigPodAddressCidrBlocks(original["podAddressCidrBlocks"], d, config)
	transformed["static_ip_config"] =
		flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfig(original["staticIpConfig"], d, config)
	transformed["dhcp_ip_config"] =
		flattenGkeonpremVmwareClusterNetworkConfigDhcpIpConfig(original["dhcpIpConfig"], d, config)
	transformed["vcenter_network"] =
		flattenGkeonpremVmwareClusterNetworkConfigVcenterNetwork(original["vcenterNetwork"], d, config)
	transformed["host_config"] =
		flattenGkeonpremVmwareClusterNetworkConfigHostConfig(original["hostConfig"], d, config)
	transformed["control_plane_v2_config"] =
		flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2Config(original["controlPlaneV2Config"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterNetworkConfigServiceAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigPodAddressCidrBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ip_blocks"] =
		flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocks(original["ipBlocks"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"netmask": flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksNetmask(original["netmask"], d, config),
			"gateway": flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksGateway(original["gateway"], d, config),
			"ips":     flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksIps(original["ips"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksNetmask(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksGateway(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksIps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ip":       flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksIpsIp(original["ip"], d, config),
			"hostname": flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksIpsHostname(original["hostname"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksIpsIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigStaticIpConfigIpBlocksIpsHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigDhcpIpConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenGkeonpremVmwareClusterNetworkConfigDhcpIpConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterNetworkConfigDhcpIpConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigVcenterNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigHostConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["dns_servers"] =
		flattenGkeonpremVmwareClusterNetworkConfigHostConfigDnsServers(original["dnsServers"], d, config)
	transformed["ntp_servers"] =
		flattenGkeonpremVmwareClusterNetworkConfigHostConfigNtpServers(original["ntpServers"], d, config)
	transformed["dns_search_domains"] =
		flattenGkeonpremVmwareClusterNetworkConfigHostConfigDnsSearchDomains(original["dnsSearchDomains"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterNetworkConfigHostConfigDnsServers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigHostConfigNtpServers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigHostConfigDnsSearchDomains(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2Config(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_ip_block"] =
		flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlock(original["controlPlaneIpBlock"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlock(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["netmask"] =
		flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockNetmask(original["netmask"], d, config)
	transformed["gateway"] =
		flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockGateway(original["gateway"], d, config)
	transformed["ips"] =
		flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIps(original["ips"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockNetmask(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockGateway(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ip":       flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIpsIp(original["ip"], d, config),
			"hostname": flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIpsHostname(original["hostname"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIpsIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterNetworkConfigControlPlaneV2ConfigControlPlaneIpBlockIpsHostname(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancer(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["vip_config"] =
		flattenGkeonpremVmwareClusterLoadBalancerVipConfig(original["vipConfig"], d, config)
	transformed["f5_config"] =
		flattenGkeonpremVmwareClusterLoadBalancerF5Config(original["f5Config"], d, config)
	transformed["manual_lb_config"] =
		flattenGkeonpremVmwareClusterLoadBalancerManualLbConfig(original["manualLbConfig"], d, config)
	transformed["metal_lb_config"] =
		flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfig(original["metalLbConfig"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterLoadBalancerVipConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_vip"] =
		flattenGkeonpremVmwareClusterLoadBalancerVipConfigControlPlaneVip(original["controlPlaneVip"], d, config)
	transformed["ingress_vip"] =
		flattenGkeonpremVmwareClusterLoadBalancerVipConfigIngressVip(original["ingressVip"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterLoadBalancerVipConfigControlPlaneVip(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerVipConfigIngressVip(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerF5Config(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["address"] =
		flattenGkeonpremVmwareClusterLoadBalancerF5ConfigAddress(original["address"], d, config)
	transformed["partition"] =
		flattenGkeonpremVmwareClusterLoadBalancerF5ConfigPartition(original["partition"], d, config)
	transformed["snat_pool"] =
		flattenGkeonpremVmwareClusterLoadBalancerF5ConfigSnatPool(original["snatPool"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterLoadBalancerF5ConfigAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerF5ConfigPartition(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerF5ConfigSnatPool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerManualLbConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["ingress_http_node_port"] =
		flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigIngressHttpNodePort(original["ingressHttpNodePort"], d, config)
	transformed["ingress_https_node_port"] =
		flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigIngressHttpsNodePort(original["ingressHttpsNodePort"], d, config)
	transformed["control_plane_node_port"] =
		flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigControlPlaneNodePort(original["controlPlaneNodePort"], d, config)
	transformed["konnectivity_server_node_port"] =
		flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigKonnectivityServerNodePort(original["konnectivityServerNodePort"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigIngressHttpNodePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigIngressHttpsNodePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigControlPlaneNodePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterLoadBalancerManualLbConfigKonnectivityServerNodePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["address_pools"] =
		flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPools(original["addressPools"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPools(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"pool":            flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsPool(original["pool"], d, config),
			"addresses":       flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsAddresses(original["addresses"], d, config),
			"avoid_buggy_ips": flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsAvoidBuggyIps(original["avoidBuggyIps"], d, config),
			"manual_assign":   flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsManualAssign(original["manualAssign"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsPool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsAddresses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsAvoidBuggyIps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLoadBalancerMetalLbConfigAddressPoolsManualAssign(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterDataplaneV2(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["dataplane_v2_enabled"] =
		flattenGkeonpremVmwareClusterDataplaneV2DataplaneV2Enabled(original["dataplaneV2Enabled"], d, config)
	transformed["windows_dataplane_v2_enabled"] =
		flattenGkeonpremVmwareClusterDataplaneV2WindowsDataplaneV2Enabled(original["windowsDataplaneV2Enabled"], d, config)
	transformed["advanced_networking"] =
		flattenGkeonpremVmwareClusterDataplaneV2AdvancedNetworking(original["advancedNetworking"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterDataplaneV2DataplaneV2Enabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterDataplaneV2WindowsDataplaneV2Enabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterDataplaneV2AdvancedNetworking(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVmTrackingEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterAutoRepairConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenGkeonpremVmwareClusterAutoRepairConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterAutoRepairConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterAuthorization(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["admin_users"] =
		flattenGkeonpremVmwareClusterAuthorizationAdminUsers(original["adminUsers"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterAuthorizationAdminUsers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"username": flattenGkeonpremVmwareClusterAuthorizationAdminUsersUsername(original["username"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterAuthorizationAdminUsersUsername(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheck(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["options"] =
		flattenGkeonpremVmwareClusterValidationCheckOptions(original["options"], d, config)
	transformed["status"] =
		flattenGkeonpremVmwareClusterValidationCheckStatus(original["status"], d, config)
	transformed["scenario"] =
		flattenGkeonpremVmwareClusterValidationCheckScenario(original["scenario"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterValidationCheckOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheckStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["result"] =
		flattenGkeonpremVmwareClusterValidationCheckStatusResult(original["result"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterValidationCheckStatusResult(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"options":     flattenGkeonpremVmwareClusterValidationCheckStatusResultOptions(original["options"], d, config),
			"description": flattenGkeonpremVmwareClusterValidationCheckStatusResultDescription(original["description"], d, config),
			"category":    flattenGkeonpremVmwareClusterValidationCheckStatusResultCategory(original["category"], d, config),
			"reason":      flattenGkeonpremVmwareClusterValidationCheckStatusResultReason(original["reason"], d, config),
			"details":     flattenGkeonpremVmwareClusterValidationCheckStatusResultDetails(original["details"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterValidationCheckStatusResultOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheckStatusResultDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheckStatusResultCategory(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheckStatusResultReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheckStatusResultDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterValidationCheckScenario(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterEnableControlPlaneV2(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterUpgradePolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["control_plane_only"] =
		flattenGkeonpremVmwareClusterUpgradePolicyControlPlaneOnly(original["controlPlaneOnly"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterUpgradePolicyControlPlaneOnly(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterEndpoint(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterReconciling(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterDeleteTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterLocalName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterFleet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["membership"] =
		flattenGkeonpremVmwareClusterFleetMembership(original["membership"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterFleetMembership(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["resource_pool"] =
		flattenGkeonpremVmwareClusterVcenterResourcePool(original["resourcePool"], d, config)
	transformed["datastore"] =
		flattenGkeonpremVmwareClusterVcenterDatastore(original["datastore"], d, config)
	transformed["datacenter"] =
		flattenGkeonpremVmwareClusterVcenterDatacenter(original["datacenter"], d, config)
	transformed["cluster"] =
		flattenGkeonpremVmwareClusterVcenterCluster(original["cluster"], d, config)
	transformed["folder"] =
		flattenGkeonpremVmwareClusterVcenterFolder(original["folder"], d, config)
	transformed["ca_cert_data"] =
		flattenGkeonpremVmwareClusterVcenterCaCertData(original["caCertData"], d, config)
	transformed["address"] =
		flattenGkeonpremVmwareClusterVcenterAddress(original["address"], d, config)
	transformed["storage_policy_name"] =
		flattenGkeonpremVmwareClusterVcenterStoragePolicyName(original["storagePolicyName"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterVcenterResourcePool(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterDatastore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterDatacenter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterFolder(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterCaCertData(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterVcenterStoragePolicyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["error_message"] =
		flattenGkeonpremVmwareClusterStatusErrorMessage(original["errorMessage"], d, config)
	transformed["conditions"] =
		flattenGkeonpremVmwareClusterStatusConditions(original["conditions"], d, config)
	return []interface{}{transformed}
}
func flattenGkeonpremVmwareClusterStatusErrorMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStatusConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"type":                 flattenGkeonpremVmwareClusterStatusConditionsType(original["type"], d, config),
			"reason":               flattenGkeonpremVmwareClusterStatusConditionsReason(original["reason"], d, config),
			"message":              flattenGkeonpremVmwareClusterStatusConditionsMessage(original["message"], d, config),
			"last_transition_time": flattenGkeonpremVmwareClusterStatusConditionsLastTransitionTime(original["lastTransitionTime"], d, config),
			"state":                flattenGkeonpremVmwareClusterStatusConditionsState(original["state"], d, config),
		})
	}
	return transformed
}
func flattenGkeonpremVmwareClusterStatusConditionsType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStatusConditionsReason(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStatusConditionsMessage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStatusConditionsLastTransitionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterStatusConditionsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenGkeonpremVmwareClusterEffectiveAnnotations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
