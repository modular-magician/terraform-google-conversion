// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package edgecontainer

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const EdgecontainerVpnConnectionAssetType string = "edgecontainer.googleapis.com/VpnConnection"

const EdgecontainerVpnConnectionAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/vpnConnections"

type EdgecontainerVpnConnectionConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewEdgecontainerVpnConnectionConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &EdgecontainerVpnConnectionConverter{
		name:   name,
		schema: schema,
	}
}

func (c *EdgecontainerVpnConnectionConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *EdgecontainerVpnConnectionConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceEdgecontainerVpnConnectionRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceEdgecontainerVpnConnectionRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["create_time"] = flattenEdgecontainerVpnConnectionCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenEdgecontainerVpnConnectionUpdateTime(resource["updateTime"], resource_data, config)
	result["labels"] = flattenEdgecontainerVpnConnectionLabels(resource["labels"], resource_data, config)
	result["nat_gateway_ip"] = flattenEdgecontainerVpnConnectionNatGatewayIp(resource["natGatewayIp"], resource_data, config)
	result["cluster"] = flattenEdgecontainerVpnConnectionCluster(resource["cluster"], resource_data, config)
	result["vpc"] = flattenEdgecontainerVpnConnectionVpc(resource["vpc"], resource_data, config)
	result["vpc_project"] = flattenEdgecontainerVpnConnectionVpcProject(resource["vpcProject"], resource_data, config)
	result["enable_high_availability"] = flattenEdgecontainerVpnConnectionEnableHighAvailability(resource["enableHighAvailability"], resource_data, config)
	result["router"] = flattenEdgecontainerVpnConnectionRouter(resource["router"], resource_data, config)
	result["details"] = flattenEdgecontainerVpnConnectionDetails(resource["details"], resource_data, config)
	result["terraform_labels"] = flattenEdgecontainerVpnConnectionTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenEdgecontainerVpnConnectionEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenEdgecontainerVpnConnectionCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenEdgecontainerVpnConnectionNatGatewayIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionCluster(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionVpc(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionVpcProject(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["project_id"] =
		flattenEdgecontainerVpnConnectionVpcProjectProjectId(original["projectId"], d, config)
	return []interface{}{transformed}
}
func flattenEdgecontainerVpnConnectionVpcProjectProjectId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionEnableHighAvailability(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionRouter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["state"] =
		flattenEdgecontainerVpnConnectionDetailsState(original["state"], d, config)
	transformed["error"] =
		flattenEdgecontainerVpnConnectionDetailsError(original["error"], d, config)
	transformed["cloud_router"] =
		flattenEdgecontainerVpnConnectionDetailsCloudRouter(original["cloudRouter"], d, config)
	transformed["cloud_vpns"] =
		flattenEdgecontainerVpnConnectionDetailsCloudVpns(original["cloudVpns"], d, config)
	return []interface{}{transformed}
}
func flattenEdgecontainerVpnConnectionDetailsState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionDetailsError(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionDetailsCloudRouter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["name"] =
		flattenEdgecontainerVpnConnectionDetailsCloudRouterName(original["name"], d, config)
	return []interface{}{transformed}
}
func flattenEdgecontainerVpnConnectionDetailsCloudRouterName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionDetailsCloudVpns(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["gateway"] =
		flattenEdgecontainerVpnConnectionDetailsCloudVpnsGateway(original["gateway"], d, config)
	return []interface{}{transformed}
}
func flattenEdgecontainerVpnConnectionDetailsCloudVpnsGateway(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenEdgecontainerVpnConnectionTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenEdgecontainerVpnConnectionEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
