// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package firestore

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const FirestoreDatabaseAssetType string = "firestore.googleapis.com/Database"

const FirestoreDatabaseAssetNameRegex string = "projects/(?P<project>[^/]+)/databases"

type FirestoreDatabaseConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewFirestoreDatabaseConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &FirestoreDatabaseConverter{
		name:   name,
		schema: schema,
	}
}

func (c *FirestoreDatabaseConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *FirestoreDatabaseConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceFirestoreDatabaseRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceFirestoreDatabaseRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenFirestoreDatabaseName(resource["name"], resource_data, config)
	result["location_id"] = flattenFirestoreDatabaseLocationId(resource["locationId"], resource_data, config)
	result["type"] = flattenFirestoreDatabaseType(resource["type"], resource_data, config)
	result["concurrency_mode"] = flattenFirestoreDatabaseConcurrencyMode(resource["concurrencyMode"], resource_data, config)
	result["app_engine_integration_mode"] = flattenFirestoreDatabaseAppEngineIntegrationMode(resource["appEngineIntegrationMode"], resource_data, config)
	result["point_in_time_recovery_enablement"] = flattenFirestoreDatabasePointInTimeRecoveryEnablement(resource["pointInTimeRecoveryEnablement"], resource_data, config)
	result["key_prefix"] = flattenFirestoreDatabaseKeyPrefix(resource["key_prefix"], resource_data, config)
	result["delete_protection_state"] = flattenFirestoreDatabaseDeleteProtectionState(resource["deleteProtectionState"], resource_data, config)
	result["etag"] = flattenFirestoreDatabaseEtag(resource["etag"], resource_data, config)
	result["create_time"] = flattenFirestoreDatabaseCreateTime(resource["create_time"], resource_data, config)
	result["update_time"] = flattenFirestoreDatabaseUpdateTime(resource["update_time"], resource_data, config)
	result["uid"] = flattenFirestoreDatabaseUid(resource["uid"], resource_data, config)
	result["version_retention_period"] = flattenFirestoreDatabaseVersionRetentionPeriod(resource["versionRetentionPeriod"], resource_data, config)
	result["earliest_version_time"] = flattenFirestoreDatabaseEarliestVersionTime(resource["earliestVersionTime"], resource_data, config)

	return result, nil
}

func flattenFirestoreDatabaseName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenFirestoreDatabaseLocationId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseConcurrencyMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseAppEngineIntegrationMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabasePointInTimeRecoveryEnablement(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseKeyPrefix(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseDeleteProtectionState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseEtag(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseUid(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseVersionRetentionPeriod(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenFirestoreDatabaseEarliestVersionTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
