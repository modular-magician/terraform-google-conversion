// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package storagetransfer

import (
	"fmt"
	"log"
	"time"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// waitForAgentPoolReady waits for an agent pool to leave the
// "CREATING" state and become "CREATED", to indicate that it's ready.
func waitForAgentPoolReady(d *schema.ResourceData, config *transport_tpg.Config, timeout time.Duration) error {
	return resource.Retry(timeout, func() *resource.RetryError {
		if err := resourceStorageTransferAgentPoolRead(d, config); err != nil {
			return resource.NonRetryableError(err)
		}

		name := d.Get("name").(string)
		state := d.Get("state").(string)
		if state == "CREATING" {
			return resource.RetryableError(fmt.Errorf("AgentPool %q has state %q.", name, state))
		} else if state == "CREATED" {
			log.Printf("[DEBUG] AgentPool %q has state %q.", name, state)
			return nil
		} else {
			return resource.NonRetryableError(fmt.Errorf("AgentPool %q has state %q.", name, state))
		}
	})
}

const StorageTransferAgentPoolAssetType string = "storagetransfer.googleapis.com/AgentPool"

const StorageTransferAgentPoolAssetNameRegex string = "projects/(?P<project>[^/]+)/agentPools"

type StorageTransferAgentPoolConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewStorageTransferAgentPoolConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &StorageTransferAgentPoolConverter{
		name:   name,
		schema: schema,
	}
}

func (c *StorageTransferAgentPoolConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *StorageTransferAgentPoolConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceStorageTransferAgentPoolRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceStorageTransferAgentPoolRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["display_name"] = flattenStorageTransferAgentPoolDisplayName(resource["displayName"], resource_data, config)
	result["state"] = flattenStorageTransferAgentPoolState(resource["state"], resource_data, config)
	result["bandwidth_limit"] = flattenStorageTransferAgentPoolBandwidthLimit(resource["bandwidthLimit"], resource_data, config)

	return result, nil
}

func flattenStorageTransferAgentPoolDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageTransferAgentPoolState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageTransferAgentPoolBandwidthLimit(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["limit_mbps"] =
		flattenStorageTransferAgentPoolBandwidthLimitLimitMbps(original["limitMbps"], d, config)
	return []interface{}{transformed}
}
func flattenStorageTransferAgentPoolBandwidthLimitLimitMbps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
