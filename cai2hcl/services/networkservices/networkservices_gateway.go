// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"fmt"
	"log"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Checks if there is another gateway under the same location.
func gatewaysSameLocation(d *schema.ResourceData, config *transport_tpg.Config, billingProject, userAgent string) ([]interface{}, error) {
	log.Print("[DEBUG] Looking for gateways under the same location.")
	var gateways []interface{}

	gatewaysUrl, err := tpgresource.ReplaceVars(d, config, "{{NetworkServicesBasePath}}projects/{{project}}/locations/{{location}}/gateways")
	if err != nil {
		return gateways, err
	}

	resp, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    gatewaysUrl,
		UserAgent: userAgent,
	})
	if err != nil {
		return gateways, err
	}

	data, ok := resp["gateways"]
	if !ok || data == nil {
		log.Print("[DEBUG] No gateways under the same location found.")
		return gateways, nil
	}

	gateways = data.([]interface{})

	log.Printf("[DEBUG] There are still gateways under the same location: %#v", gateways)

	return gateways, nil
}

// Checks if the given list of gateways contains a gateway of type SECURE_WEB_GATEWAY.
func isLastSWGGateway(gateways []interface{}, network string) bool {
	log.Print("[DEBUG] Checking if this is the last gateway of type SECURE_WEB_GATEWAY.")
	for _, itemRaw := range gateways {
		if itemRaw == nil {
			continue
		}
		item := itemRaw.(map[string]interface{})

		gType, ok := item["type"]
		if !ok || gType == nil {
			continue
		}

		gNetwork, ok := item["network"]
		if !ok || gNetwork == nil {
			continue
		}

		if gType.(string) == "SECURE_WEB_GATEWAY" && gNetwork.(string) == network {
			return false
		}
	}

	log.Print("[DEBUG] There is no other gateway of type SECURE_WEB_GATEWAY.")
	// no gateways of type SWG found.
	return true
}

// Deletes the swg-autogen-router if the current gateway being deleted is the type of swg so there is no other gateway using it.
func deleteSWGAutoGenRouter(d *schema.ResourceData, config *transport_tpg.Config, billingProject, userAgent string) error {
	log.Printf("[DEBUG] Searching the network id by name %q.", d.Get("network"))

	networkPath := fmt.Sprintf("{{ComputeBasePath}}%s", d.Get("network"))
	networkUrl, err := tpgresource.ReplaceVars(d, config, networkPath)
	if err != nil {
		return err
	}

	resp, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "GET",
		Project:   billingProject,
		RawURL:    networkUrl,
		UserAgent: userAgent,
	})
	if err != nil {
		return err
	}

	// The name of swg auto generated router is in the following format: swg-autogen-router-{NETWORK-ID}
	routerId := fmt.Sprintf("swg-autogen-router-%s", resp["id"])
	log.Printf("[DEBUG] Deleting the auto generated router %q.", routerId)

	routerPath := fmt.Sprintf("{{ComputeBasePath}}projects/{{project}}/regions/{{location}}/routers/%s", routerId)
	routerUrl, err := tpgresource.ReplaceVars(d, config, routerPath)
	if err != nil {
		return err
	}

	_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:               config,
		Method:               "DELETE",
		Project:              billingProject,
		RawURL:               routerUrl,
		UserAgent:            userAgent,
		ErrorRetryPredicates: []transport_tpg.RetryErrorPredicateFunc{transport_tpg.IsSwgAutogenRouterRetryable},
	})
	if err != nil {
		if transport_tpg.IsGoogleApiErrorWithCode(err, 404) {
			// The swg auto gen router may have already been deleted.
			// No further action needed.
			return nil
		}

		return err
	}

	return nil
}

const NetworkServicesGatewayAssetType string = "networkservices.googleapis.com/Gateway"

const NetworkServicesGatewayAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/gateways"

type NetworkServicesGatewayConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkServicesGatewayConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &NetworkServicesGatewayConverter{
		name:   name,
		schema: schema,
	}
}

func (c *NetworkServicesGatewayConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *NetworkServicesGatewayConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceNetworkServicesGatewayRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceNetworkServicesGatewayRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["self_link"] = flattenNetworkServicesGatewaySelfLink(resource["selfLink"], resource_data, config)
	result["create_time"] = flattenNetworkServicesGatewayCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenNetworkServicesGatewayUpdateTime(resource["updateTime"], resource_data, config)
	result["labels"] = flattenNetworkServicesGatewayLabels(resource["labels"], resource_data, config)
	result["description"] = flattenNetworkServicesGatewayDescription(resource["description"], resource_data, config)
	result["type"] = flattenNetworkServicesGatewayType(resource["type"], resource_data, config)
	result["ports"] = flattenNetworkServicesGatewayPorts(resource["ports"], resource_data, config)
	result["scope"] = flattenNetworkServicesGatewayScope(resource["scope"], resource_data, config)
	result["server_tls_policy"] = flattenNetworkServicesGatewayServerTlsPolicy(resource["serverTlsPolicy"], resource_data, config)
	result["addresses"] = flattenNetworkServicesGatewayAddresses(resource["addresses"], resource_data, config)
	result["subnetwork"] = flattenNetworkServicesGatewaySubnetwork(resource["subnetwork"], resource_data, config)
	result["network"] = flattenNetworkServicesGatewayNetwork(resource["network"], resource_data, config)
	result["gateway_security_policy"] = flattenNetworkServicesGatewayGatewaySecurityPolicy(resource["gatewaySecurityPolicy"], resource_data, config)
	result["certificate_urls"] = flattenNetworkServicesGatewayCertificateUrls(resource["certificateUrls"], resource_data, config)
	result["terraform_labels"] = flattenNetworkServicesGatewayTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenNetworkServicesGatewayEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenNetworkServicesGatewaySelfLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesGatewayDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayPorts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayScope(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayServerTlsPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayAddresses(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewaySubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayGatewaySecurityPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayCertificateUrls(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesGatewayTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesGatewayEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
