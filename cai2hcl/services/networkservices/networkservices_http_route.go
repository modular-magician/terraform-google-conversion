// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package networkservices

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const NetworkServicesHttpRouteAssetType string = "networkservices.googleapis.com/HttpRoute"

const NetworkServicesHttpRouteAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/global/httpRoutes"

type NetworkServicesHttpRouteConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewNetworkServicesHttpRouteConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &NetworkServicesHttpRouteConverter{
		name:   name,
		schema: schema,
	}
}

func (c *NetworkServicesHttpRouteConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *NetworkServicesHttpRouteConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceNetworkServicesHttpRouteRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceNetworkServicesHttpRouteRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["self_link"] = flattenNetworkServicesHttpRouteSelfLink(resource["selfLink"], resource_data, config)
	result["create_time"] = flattenNetworkServicesHttpRouteCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenNetworkServicesHttpRouteUpdateTime(resource["updateTime"], resource_data, config)
	result["labels"] = flattenNetworkServicesHttpRouteLabels(resource["labels"], resource_data, config)
	result["description"] = flattenNetworkServicesHttpRouteDescription(resource["description"], resource_data, config)
	result["hostnames"] = flattenNetworkServicesHttpRouteHostnames(resource["hostnames"], resource_data, config)
	result["meshes"] = flattenNetworkServicesHttpRouteMeshes(resource["meshes"], resource_data, config)
	result["gateways"] = flattenNetworkServicesHttpRouteGateways(resource["gateways"], resource_data, config)
	result["rules"] = flattenNetworkServicesHttpRouteRules(resource["rules"], resource_data, config)
	result["terraform_labels"] = flattenNetworkServicesHttpRouteTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenNetworkServicesHttpRouteEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenNetworkServicesHttpRouteSelfLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesHttpRouteDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteHostnames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteMeshes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteGateways(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRules(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"matches": flattenNetworkServicesHttpRouteRulesMatches(original["matches"], d, config),
			"action":  flattenNetworkServicesHttpRouteRulesAction(original["action"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatches(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ignore_case":      flattenNetworkServicesHttpRouteRulesMatchesIgnoreCase(original["ignoreCase"], d, config),
			"full_path_match":  flattenNetworkServicesHttpRouteRulesMatchesFullPathMatch(original["fullPathMatch"], d, config),
			"prefix_match":     flattenNetworkServicesHttpRouteRulesMatchesPrefixMatch(original["prefixMatch"], d, config),
			"regex_match":      flattenNetworkServicesHttpRouteRulesMatchesRegexMatch(original["regexMatch"], d, config),
			"query_parameters": flattenNetworkServicesHttpRouteRulesMatchesQueryParameters(original["queryParameters"], d, config),
			"headers":          flattenNetworkServicesHttpRouteRulesMatchesHeaders(original["headers"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatchesIgnoreCase(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesFullPathMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesPrefixMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParameters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"query_parameter": flattenNetworkServicesHttpRouteRulesMatchesQueryParametersQueryParameter(original["queryParameter"], d, config),
			"exact_match":     flattenNetworkServicesHttpRouteRulesMatchesQueryParametersExactMatch(original["exactMatch"], d, config),
			"regex_match":     flattenNetworkServicesHttpRouteRulesMatchesQueryParametersRegexMatch(original["regexMatch"], d, config),
			"present_match":   flattenNetworkServicesHttpRouteRulesMatchesQueryParametersPresentMatch(original["presentMatch"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersQueryParameter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersExactMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesQueryParametersPresentMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"header":        flattenNetworkServicesHttpRouteRulesMatchesHeadersHeader(original["header"], d, config),
			"invert_match":  flattenNetworkServicesHttpRouteRulesMatchesHeadersInvertMatch(original["invertMatch"], d, config),
			"exact_match":   flattenNetworkServicesHttpRouteRulesMatchesHeadersExactMatch(original["exactMatch"], d, config),
			"regex_match":   flattenNetworkServicesHttpRouteRulesMatchesHeadersRegexMatch(original["regexMatch"], d, config),
			"prefix_match":  flattenNetworkServicesHttpRouteRulesMatchesHeadersPrefixMatch(original["prefixMatch"], d, config),
			"present_match": flattenNetworkServicesHttpRouteRulesMatchesHeadersPresentMatch(original["presentMatch"], d, config),
			"suffix_match":  flattenNetworkServicesHttpRouteRulesMatchesHeadersSuffixMatch(original["suffixMatch"], d, config),
			"range_match":   flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatch(original["rangeMatch"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesMatchesHeadersHeader(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersInvertMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersExactMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersRegexMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersPrefixMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersPresentMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersSuffixMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["start"] =
		flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchStart(original["start"], d, config)
	transformed["end"] =
		flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchEnd(original["end"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchStart(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesMatchesHeadersRangeMatchEnd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["destinations"] =
		flattenNetworkServicesHttpRouteRulesActionDestinations(original["destinations"], d, config)
	transformed["redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirect(original["redirect"], d, config)
	transformed["fault_injection_policy"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicy(original["faultInjectionPolicy"], d, config)
	transformed["request_header_modifier"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifier(original["requestHeaderModifier"], d, config)
	transformed["response_header_modifier"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifier(original["responseHeaderModifier"], d, config)
	transformed["url_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionUrlRewrite(original["urlRewrite"], d, config)
	transformed["timeout"] =
		flattenNetworkServicesHttpRouteRulesActionTimeout(original["timeout"], d, config)
	transformed["retry_policy"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicy(original["retryPolicy"], d, config)
	transformed["request_mirror_policy"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicy(original["requestMirrorPolicy"], d, config)
	transformed["cors_policy"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicy(original["corsPolicy"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionDestinations(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"service_name": flattenNetworkServicesHttpRouteRulesActionDestinationsServiceName(original["serviceName"], d, config),
			"weight":       flattenNetworkServicesHttpRouteRulesActionDestinationsWeight(original["weight"], d, config),
		})
	}
	return transformed
}
func flattenNetworkServicesHttpRouteRulesActionDestinationsServiceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionDestinationsWeight(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["host_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectHostRedirect(original["hostRedirect"], d, config)
	transformed["path_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectPathRedirect(original["pathRedirect"], d, config)
	transformed["prefix_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectPrefixRewrite(original["prefixRewrite"], d, config)
	transformed["response_code"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectResponseCode(original["responseCode"], d, config)
	transformed["https_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectHttpsRedirect(original["httpsRedirect"], d, config)
	transformed["strip_query"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectStripQuery(original["stripQuery"], d, config)
	transformed["port_redirect"] =
		flattenNetworkServicesHttpRouteRulesActionRedirectPortRedirect(original["portRedirect"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRedirectHostRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectPathRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectPrefixRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectResponseCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectHttpsRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectStripQuery(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRedirectPortRedirect(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["delay"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelay(original["delay"], d, config)
	transformed["abort"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbort(original["abort"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["fixed_delay"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayFixedDelay(original["fixedDelay"], d, config)
	transformed["percentage"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayPercentage(original["percentage"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayFixedDelay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyDelayPercentage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["http_status"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortHttpStatus(original["httpStatus"], d, config)
	transformed["percentage"] =
		flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortPercentage(original["percentage"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortHttpStatus(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionFaultInjectionPolicyAbortPercentage(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["set"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierSet(original["set"], d, config)
	transformed["add"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierAdd(original["add"], d, config)
	transformed["remove"] =
		flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierRemove(original["remove"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierAdd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestHeaderModifierRemove(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifier(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["set"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierSet(original["set"], d, config)
	transformed["add"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierAdd(original["add"], d, config)
	transformed["remove"] =
		flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierRemove(original["remove"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierSet(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierAdd(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionResponseHeaderModifierRemove(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionUrlRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["path_prefix_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionUrlRewritePathPrefixRewrite(original["pathPrefixRewrite"], d, config)
	transformed["host_rewrite"] =
		flattenNetworkServicesHttpRouteRulesActionUrlRewriteHostRewrite(original["hostRewrite"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionUrlRewritePathPrefixRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionUrlRewriteHostRewrite(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRetryPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["retry_conditions"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicyRetryConditions(original["retryConditions"], d, config)
	transformed["num_retries"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicyNumRetries(original["numRetries"], d, config)
	transformed["per_try_timeout"] =
		flattenNetworkServicesHttpRouteRulesActionRetryPolicyPerTryTimeout(original["perTryTimeout"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRetryPolicyRetryConditions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRetryPolicyNumRetries(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionRetryPolicyPerTryTimeout(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["destination"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestination(original["destination"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestination(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["service_name"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationServiceName(original["serviceName"], d, config)
	transformed["weight"] =
		flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationWeight(original["weight"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationServiceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionRequestMirrorPolicyDestinationWeight(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicy(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["allow_origins"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOrigins(original["allowOrigins"], d, config)
	transformed["allow_origin_regexes"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOriginRegexes(original["allowOriginRegexes"], d, config)
	transformed["allow_methods"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowMethods(original["allowMethods"], d, config)
	transformed["allow_headers"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowHeaders(original["allowHeaders"], d, config)
	transformed["expose_headers"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyExposeHeaders(original["exposeHeaders"], d, config)
	transformed["max_age"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyMaxAge(original["maxAge"], d, config)
	transformed["allow_credentials"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowCredentials(original["allowCredentials"], d, config)
	transformed["disabled"] =
		flattenNetworkServicesHttpRouteRulesActionCorsPolicyDisabled(original["disabled"], d, config)
	return []interface{}{transformed}
}
func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOrigins(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowOriginRegexes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowMethods(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyExposeHeaders(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyMaxAge(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyAllowCredentials(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteRulesActionCorsPolicyDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenNetworkServicesHttpRouteTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenNetworkServicesHttpRouteEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
