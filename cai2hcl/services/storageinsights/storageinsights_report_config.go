// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package storageinsights

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const StorageInsightsReportConfigAssetType string = "storageinsights.googleapis.com/ReportConfig"

const StorageInsightsReportConfigAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/reportConfigs"

type StorageInsightsReportConfigConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewStorageInsightsReportConfigConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &StorageInsightsReportConfigConverter{
		name:   name,
		schema: schema,
	}
}

func (c *StorageInsightsReportConfigConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *StorageInsightsReportConfigConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceStorageInsightsReportConfigRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceStorageInsightsReportConfigRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenStorageInsightsReportConfigName(resource["name"], resource_data, config)
	result["frequency_options"] = flattenStorageInsightsReportConfigFrequencyOptions(resource["frequencyOptions"], resource_data, config)
	result["csv_options"] = flattenStorageInsightsReportConfigCsvOptions(resource["csvOptions"], resource_data, config)
	result["object_metadata_report_options"] = flattenStorageInsightsReportConfigObjectMetadataReportOptions(resource["objectMetadataReportOptions"], resource_data, config)
	result["display_name"] = flattenStorageInsightsReportConfigDisplayName(resource["displayName"], resource_data, config)

	return result, nil
}

func flattenStorageInsightsReportConfigName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenStorageInsightsReportConfigFrequencyOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["frequency"] =
		flattenStorageInsightsReportConfigFrequencyOptionsFrequency(original["frequency"], d, config)
	transformed["start_date"] =
		flattenStorageInsightsReportConfigFrequencyOptionsStartDate(original["startDate"], d, config)
	transformed["end_date"] =
		flattenStorageInsightsReportConfigFrequencyOptionsEndDate(original["endDate"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigFrequencyOptionsFrequency(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigFrequencyOptionsStartDate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["day"] =
		flattenStorageInsightsReportConfigFrequencyOptionsStartDateDay(original["day"], d, config)
	transformed["month"] =
		flattenStorageInsightsReportConfigFrequencyOptionsStartDateMonth(original["month"], d, config)
	transformed["year"] =
		flattenStorageInsightsReportConfigFrequencyOptionsStartDateYear(original["year"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigFrequencyOptionsStartDateDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenStorageInsightsReportConfigFrequencyOptionsStartDateMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenStorageInsightsReportConfigFrequencyOptionsStartDateYear(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenStorageInsightsReportConfigFrequencyOptionsEndDate(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["day"] =
		flattenStorageInsightsReportConfigFrequencyOptionsEndDateDay(original["day"], d, config)
	transformed["month"] =
		flattenStorageInsightsReportConfigFrequencyOptionsEndDateMonth(original["month"], d, config)
	transformed["year"] =
		flattenStorageInsightsReportConfigFrequencyOptionsEndDateYear(original["year"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigFrequencyOptionsEndDateDay(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenStorageInsightsReportConfigFrequencyOptionsEndDateMonth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenStorageInsightsReportConfigFrequencyOptionsEndDateYear(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenStorageInsightsReportConfigCsvOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["record_separator"] =
		flattenStorageInsightsReportConfigCsvOptionsRecordSeparator(original["recordSeparator"], d, config)
	transformed["delimiter"] =
		flattenStorageInsightsReportConfigCsvOptionsDelimiter(original["delimiter"], d, config)
	transformed["header_required"] =
		flattenStorageInsightsReportConfigCsvOptionsHeaderRequired(original["headerRequired"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigCsvOptionsRecordSeparator(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigCsvOptionsDelimiter(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigCsvOptionsHeaderRequired(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigObjectMetadataReportOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["metadata_fields"] =
		flattenStorageInsightsReportConfigObjectMetadataReportOptionsMetadataFields(original["metadataFields"], d, config)
	transformed["storage_filters"] =
		flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageFilters(original["storageFilters"], d, config)
	transformed["storage_destination_options"] =
		flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptions(original["storageDestinationOptions"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigObjectMetadataReportOptionsMetadataFields(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageFilters(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bucket"] =
		flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageFiltersBucket(original["bucket"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageFiltersBucket(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["bucket"] =
		flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsBucket(original["bucket"], d, config)
	transformed["destination_path"] =
		flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsDestinationPath(original["destinationPath"], d, config)
	return []interface{}{transformed}
}
func flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsBucket(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigObjectMetadataReportOptionsStorageDestinationOptionsDestinationPath(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenStorageInsightsReportConfigDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
