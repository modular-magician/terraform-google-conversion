// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApigeeAddonsConfigAssetType string = "apigee.googleapis.com/AddonsConfig"

const ApigeeAddonsConfigAssetNameRegex string = "organizations"

type ApigeeAddonsConfigConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewApigeeAddonsConfigConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ApigeeAddonsConfigConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ApigeeAddonsConfigConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ApigeeAddonsConfigConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceApigeeAddonsConfigRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceApigeeAddonsConfigRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["addons_config"] = flattenApigeeAddonsConfigAddonsConfig(resource["addonsConfig"], resource_data, config)

	return result, nil
}

func flattenApigeeAddonsConfigAddonsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["advanced_api_ops_config"] =
		flattenApigeeAddonsConfigAddonsConfigAdvancedApiOpsConfig(original["advancedApiOpsConfig"], d, config)
	transformed["integration_config"] =
		flattenApigeeAddonsConfigAddonsConfigIntegrationConfig(original["integrationConfig"], d, config)
	transformed["monetization_config"] =
		flattenApigeeAddonsConfigAddonsConfigMonetizationConfig(original["monetizationConfig"], d, config)
	transformed["api_security_config"] =
		flattenApigeeAddonsConfigAddonsConfigApiSecurityConfig(original["apiSecurityConfig"], d, config)
	transformed["connectors_platform_config"] =
		flattenApigeeAddonsConfigAddonsConfigConnectorsPlatformConfig(original["connectorsPlatformConfig"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeAddonsConfigAddonsConfigAdvancedApiOpsConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenApigeeAddonsConfigAddonsConfigAdvancedApiOpsConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeAddonsConfigAddonsConfigAdvancedApiOpsConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAddonsConfigAddonsConfigIntegrationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenApigeeAddonsConfigAddonsConfigIntegrationConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeAddonsConfigAddonsConfigIntegrationConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAddonsConfigAddonsConfigMonetizationConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenApigeeAddonsConfigAddonsConfigMonetizationConfigEnabled(original["enabled"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeAddonsConfigAddonsConfigMonetizationConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAddonsConfigAddonsConfigApiSecurityConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenApigeeAddonsConfigAddonsConfigApiSecurityConfigEnabled(original["enabled"], d, config)
	transformed["expires_at"] =
		flattenApigeeAddonsConfigAddonsConfigApiSecurityConfigExpiresAt(original["expiresAt"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeAddonsConfigAddonsConfigApiSecurityConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAddonsConfigAddonsConfigApiSecurityConfigExpiresAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAddonsConfigAddonsConfigConnectorsPlatformConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenApigeeAddonsConfigAddonsConfigConnectorsPlatformConfigEnabled(original["enabled"], d, config)
	transformed["expires_at"] =
		flattenApigeeAddonsConfigAddonsConfigConnectorsPlatformConfigExpiresAt(original["expiresAt"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeAddonsConfigAddonsConfigConnectorsPlatformConfigEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeAddonsConfigAddonsConfigConnectorsPlatformConfigExpiresAt(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
