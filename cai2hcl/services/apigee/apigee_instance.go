// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"
	"log"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Supress diffs when the lists of project have the same number of entries to handle the case that
// API does not return what the user originally provided. Instead, API does some transformation.
// For example, user provides a list of project number, but API returns a list of project Id.
func projectListDiffSuppress(_, _, _ string, d *schema.ResourceData) bool {
	return ProjectListDiffSuppressFunc(d)
}

func ProjectListDiffSuppressFunc(d tpgresource.TerraformResourceDataChange) bool {
	kLength := "consumer_accept_list.#"
	oldLength, newLength := d.GetChange(kLength)

	oldInt, ok := oldLength.(int)
	if !ok {
		return false
	}

	newInt, ok := newLength.(int)
	if !ok {
		return false
	}
	log.Printf("[DEBUG] - suppressing diff with oldInt %d, newInt %d", oldInt, newInt)

	return oldInt == newInt
}

const ApigeeInstanceAssetType string = "apigee.googleapis.com/Instance"

const ApigeeInstanceAssetNameRegex string = "instances"

type ApigeeInstanceConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewApigeeInstanceConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ApigeeInstanceConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ApigeeInstanceConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ApigeeInstanceConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceApigeeInstanceRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceApigeeInstanceRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenApigeeInstanceName(resource["name"], resource_data, config)
	result["location"] = flattenApigeeInstanceLocation(resource["location"], resource_data, config)
	result["peering_cidr_range"] = flattenApigeeInstancePeeringCidrRange(resource["peeringCidrRange"], resource_data, config)
	result["description"] = flattenApigeeInstanceDescription(resource["description"], resource_data, config)
	result["display_name"] = flattenApigeeInstanceDisplayName(resource["displayName"], resource_data, config)
	result["disk_encryption_key_name"] = flattenApigeeInstanceDiskEncryptionKeyName(resource["diskEncryptionKeyName"], resource_data, config)
	result["host"] = flattenApigeeInstanceHost(resource["host"], resource_data, config)
	result["port"] = flattenApigeeInstancePort(resource["port"], resource_data, config)
	result["consumer_accept_list"] = flattenApigeeInstanceConsumerAcceptList(resource["consumerAcceptList"], resource_data, config)
	result["service_attachment"] = flattenApigeeInstanceServiceAttachment(resource["serviceAttachment"], resource_data, config)

	return result, nil
}

func flattenApigeeInstanceName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceLocation(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstancePeeringCidrRange(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceDiskEncryptionKeyName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstancePort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceConsumerAcceptList(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeInstanceServiceAttachment(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
