// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package apigee

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const ApigeeTargetServerAssetType string = "apigee.googleapis.com/TargetServer"

const ApigeeTargetServerAssetNameRegex string = "(?P<env_id>[^/]+)/targetservers"

type ApigeeTargetServerConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewApigeeTargetServerConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &ApigeeTargetServerConverter{
		name:   name,
		schema: schema,
	}
}

func (c *ApigeeTargetServerConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *ApigeeTargetServerConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceApigeeTargetServerRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceApigeeTargetServerRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenApigeeTargetServerName(resource["name"], resource_data, config)
	result["description"] = flattenApigeeTargetServerDescription(resource["description"], resource_data, config)
	result["host"] = flattenApigeeTargetServerHost(resource["host"], resource_data, config)
	result["port"] = flattenApigeeTargetServerPort(resource["port"], resource_data, config)
	result["is_enabled"] = flattenApigeeTargetServerIsEnabled(resource["isEnabled"], resource_data, config)
	result["s_sl_info"] = flattenApigeeTargetServerSSLInfo(resource["sSLInfo"], resource_data, config)
	result["protocol"] = flattenApigeeTargetServerProtocol(resource["protocol"], resource_data, config)

	return result, nil
}

func flattenApigeeTargetServerName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerHost(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenApigeeTargetServerIsEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enabled"] =
		flattenApigeeTargetServerSSLInfoEnabled(original["enabled"], d, config)
	transformed["client_auth_enabled"] =
		flattenApigeeTargetServerSSLInfoClientAuthEnabled(original["clientAuthEnabled"], d, config)
	transformed["key_store"] =
		flattenApigeeTargetServerSSLInfoKeyStore(original["keyStore"], d, config)
	transformed["key_alias"] =
		flattenApigeeTargetServerSSLInfoKeyAlias(original["keyAlias"], d, config)
	transformed["trust_store"] =
		flattenApigeeTargetServerSSLInfoTrustStore(original["trustStore"], d, config)
	transformed["ignore_validation_errors"] =
		flattenApigeeTargetServerSSLInfoIgnoreValidationErrors(original["ignoreValidationErrors"], d, config)
	transformed["protocols"] =
		flattenApigeeTargetServerSSLInfoProtocols(original["protocols"], d, config)
	transformed["ciphers"] =
		flattenApigeeTargetServerSSLInfoCiphers(original["ciphers"], d, config)
	transformed["common_name"] =
		flattenApigeeTargetServerSSLInfoCommonName(original["commonName"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeTargetServerSSLInfoEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoClientAuthEnabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoKeyStore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoKeyAlias(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoTrustStore(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoIgnoreValidationErrors(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoProtocols(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoCiphers(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoCommonName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["value"] =
		flattenApigeeTargetServerSSLInfoCommonNameValue(original["value"], d, config)
	transformed["wildcard_match"] =
		flattenApigeeTargetServerSSLInfoCommonNameWildcardMatch(original["wildcardMatch"], d, config)
	return []interface{}{transformed}
}
func flattenApigeeTargetServerSSLInfoCommonNameValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerSSLInfoCommonNameWildcardMatch(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenApigeeTargetServerProtocol(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
