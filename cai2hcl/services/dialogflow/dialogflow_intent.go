// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflow

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DialogflowIntentAssetType string = "dialogflow.googleapis.com/Intent"

const DialogflowIntentAssetNameRegex string = "projects/(?P<project>[^/]+)/agent/intents/"

type DialogflowIntentConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDialogflowIntentConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DialogflowIntentConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DialogflowIntentConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DialogflowIntentConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDialogflowIntentRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDialogflowIntentRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDialogflowIntentName(resource["name"], resource_data, config)
	result["display_name"] = flattenDialogflowIntentDisplayName(resource["displayName"], resource_data, config)
	result["webhook_state"] = flattenDialogflowIntentWebhookState(resource["webhookState"], resource_data, config)
	result["priority"] = flattenDialogflowIntentPriority(resource["priority"], resource_data, config)
	result["is_fallback"] = flattenDialogflowIntentIsFallback(resource["isFallback"], resource_data, config)
	result["ml_disabled"] = flattenDialogflowIntentMlDisabled(resource["mlDisabled"], resource_data, config)
	result["input_context_names"] = flattenDialogflowIntentInputContextNames(resource["inputContextNames"], resource_data, config)
	result["events"] = flattenDialogflowIntentEvents(resource["events"], resource_data, config)
	result["action"] = flattenDialogflowIntentAction(resource["action"], resource_data, config)
	result["reset_contexts"] = flattenDialogflowIntentResetContexts(resource["resetContexts"], resource_data, config)
	result["default_response_platforms"] = flattenDialogflowIntentDefaultResponsePlatforms(resource["defaultResponsePlatforms"], resource_data, config)
	result["root_followup_intent_name"] = flattenDialogflowIntentRootFollowupIntentName(resource["rootFollowupIntentName"], resource_data, config)
	result["parent_followup_intent_name"] = flattenDialogflowIntentParentFollowupIntentName(resource["parentFollowupIntentName"], resource_data, config)
	result["followup_intent_info"] = flattenDialogflowIntentFollowupIntentInfo(resource["followupIntentInfo"], resource_data, config)

	return result, nil
}

func flattenDialogflowIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentWebhookState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentPriority(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenDialogflowIntentIsFallback(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentMlDisabled(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentInputContextNames(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentEvents(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentAction(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentResetContexts(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentDefaultResponsePlatforms(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentRootFollowupIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentParentFollowupIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentFollowupIntentInfo(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"followup_intent_name":        flattenDialogflowIntentFollowupIntentInfoFollowupIntentName(original["followupIntentName"], d, config),
			"parent_followup_intent_name": flattenDialogflowIntentFollowupIntentInfoParentFollowupIntentName(original["parentFollowupIntentName"], d, config),
		})
	}
	return transformed
}
func flattenDialogflowIntentFollowupIntentInfoFollowupIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowIntentFollowupIntentInfoParentFollowupIntentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
