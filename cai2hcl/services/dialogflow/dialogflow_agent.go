// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package dialogflow

import (
	"fmt"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const DialogflowAgentAssetType string = "dialogflow.googleapis.com/Agent"

const DialogflowAgentAssetNameRegex string = "projects/(?P<project>[^/]+)/agent"

type DialogflowAgentConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDialogflowAgentConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DialogflowAgentConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DialogflowAgentConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DialogflowAgentConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDialogflowAgentRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDialogflowAgentRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["display_name"] = flattenDialogflowAgentDisplayName(resource["displayName"], resource_data, config)
	result["default_language_code"] = flattenDialogflowAgentDefaultLanguageCode(resource["defaultLanguageCode"], resource_data, config)
	result["supported_language_codes"] = flattenDialogflowAgentSupportedLanguageCodes(resource["supportedLanguageCodes"], resource_data, config)
	result["time_zone"] = flattenDialogflowAgentTimeZone(resource["timeZone"], resource_data, config)
	result["description"] = flattenDialogflowAgentDescription(resource["description"], resource_data, config)
	result["avatar_uri_backend"] = flattenDialogflowAgentAvatarUriBackend(resource["avatarUri"], resource_data, config)
	result["enable_logging"] = flattenDialogflowAgentEnableLogging(resource["enableLogging"], resource_data, config)
	result["match_mode"] = flattenDialogflowAgentMatchMode(resource["matchMode"], resource_data, config)
	result["classification_threshold"] = flattenDialogflowAgentClassificationThreshold(resource["classificationThreshold"], resource_data, config)
	result["api_version"] = flattenDialogflowAgentApiVersion(resource["apiVersion"], resource_data, config)

	return result, nil
}

func flattenDialogflowAgentDisplayName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentDefaultLanguageCode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentSupportedLanguageCodes(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentTimeZone(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentAvatarUriBackend(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentEnableLogging(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentMatchMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentClassificationThreshold(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDialogflowAgentApiVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
