// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package cloudids

import (
	"fmt"
	"strings"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const CloudIdsEndpointAssetType string = "ids.googleapis.com/Endpoint"

const CloudIdsEndpointAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<location>[^/]+)/endpoints"

type CloudIdsEndpointConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewCloudIdsEndpointConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &CloudIdsEndpointConverter{
		name:   name,
		schema: schema,
	}
}

func (c *CloudIdsEndpointConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *CloudIdsEndpointConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceCloudIdsEndpointRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceCloudIdsEndpointRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenCloudIdsEndpointName(resource["name"], resource_data, config)
	result["create_time"] = flattenCloudIdsEndpointCreateTime(resource["createTime"], resource_data, config)
	result["update_time"] = flattenCloudIdsEndpointUpdateTime(resource["updateTime"], resource_data, config)
	result["network"] = flattenCloudIdsEndpointNetwork(resource["network"], resource_data, config)
	result["description"] = flattenCloudIdsEndpointDescription(resource["description"], resource_data, config)
	result["endpoint_forwarding_rule"] = flattenCloudIdsEndpointEndpointForwardingRule(resource["endpointForwardingRule"], resource_data, config)
	result["endpoint_ip"] = flattenCloudIdsEndpointEndpointIp(resource["endpointIp"], resource_data, config)
	result["severity"] = flattenCloudIdsEndpointSeverity(resource["severity"], resource_data, config)
	result["threat_exceptions"] = flattenCloudIdsEndpointThreatExceptions(resource["threatExceptions"], resource_data, config)

	return result, nil
}

func flattenCloudIdsEndpointName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	parts := strings.Split(d.Get("name").(string), "/")
	return parts[len(parts)-1]
}

func flattenCloudIdsEndpointCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointUpdateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointEndpointForwardingRule(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointEndpointIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointSeverity(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenCloudIdsEndpointThreatExceptions(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
