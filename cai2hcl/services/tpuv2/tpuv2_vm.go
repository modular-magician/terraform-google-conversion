// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package tpuv2

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

// Suppress unremovable default scope values from GCP.
func tpuServiceAccountAddedScopesSuppress(k, old, new string, d *schema.ResourceData) bool {
	if strings.Contains(k, "scope.#") && (new == "0" || new == "") && old != new {
		return false
	}

	// Get changes for service_account.xx.scope
	b := strings.Split(k, ".")
	o, n := d.GetChange(strings.TrimSuffix(k, "."+b[len(b)-1]))
	if o == nil || n == nil {
		return false
	}

	oList := normalizeScopes(tpgresource.ConvertStringArr(o.([]interface{})))
	nList := normalizeScopes(tpgresource.ConvertStringArr(n.([]interface{})))

	return reflect.DeepEqual(oList, nList)
}

// Normalize the scopes by filtering out the `https://www.googleapis.com/auth/pubsub` scope during
// comparison
func normalizeScopes(scopes []string) []string {
	var result []string
	for _, s := range scopes {
		if s != "https://www.googleapis.com/auth/pubsub" {
			result = append(result, s)
		}
	}
	return result
}

// For backwards compatibility, we need to maintain original behavior where `accelerator_type`
// defaults "v2-8" when nothing is set. However, if the newly introduced `accelerator_config` field
// is set, then use that value instead of the `accelerator_type` default.
func acceleratorTypeCustomizeDiff(_ context.Context, diff *schema.ResourceDiff, v interface{}) error {
	_, isTypeSet := diff.GetOk("accelerator_type")
	_, isConfigSet := diff.GetOk("accelerator_config")
	if !isTypeSet && !isConfigSet {
		if err := diff.SetNew("accelerator_type", "v2-8"); err != nil {
			return err
		}
	}

	return nil
}

const TpuV2VmAssetType string = "tpu.googleapis.com/Vm"

const TpuV2VmAssetNameRegex string = "projects/(?P<project>[^/]+)/locations/(?P<zone>[^/]+)/nodes"

type TpuV2VmConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewTpuV2VmConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &TpuV2VmConverter{
		name:   name,
		schema: schema,
	}
}

func (c *TpuV2VmConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *TpuV2VmConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceTpuV2VmRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceTpuV2VmRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenTpuV2VmName(resource["name"], resource_data, config)
	result["runtime_version"] = flattenTpuV2VmRuntimeVersion(resource["runtimeVersion"], resource_data, config)
	result["accelerator_type"] = flattenTpuV2VmAcceleratorType(resource["acceleratorType"], resource_data, config)
	result["description"] = flattenTpuV2VmDescription(resource["description"], resource_data, config)
	result["cidr_block"] = flattenTpuV2VmCidrBlock(resource["cidrBlock"], resource_data, config)
	result["network_config"] = flattenTpuV2VmNetworkConfig(resource["networkConfig"], resource_data, config)
	result["service_account"] = flattenTpuV2VmServiceAccount(resource["serviceAccount"], resource_data, config)
	result["scheduling_config"] = flattenTpuV2VmSchedulingConfig(resource["schedulingConfig"], resource_data, config)
	result["data_disks"] = flattenTpuV2VmDataDisks(resource["dataDisks"], resource_data, config)
	result["shielded_instance_config"] = flattenTpuV2VmShieldedInstanceConfig(resource["shieldedInstanceConfig"], resource_data, config)
	result["accelerator_config"] = flattenTpuV2VmAcceleratorConfig(resource["acceleratorConfig"], resource_data, config)
	result["labels"] = flattenTpuV2VmLabels(resource["labels"], resource_data, config)
	result["metadata"] = flattenTpuV2VmMetadata(resource["metadata"], resource_data, config)
	result["tags"] = flattenTpuV2VmTags(resource["tags"], resource_data, config)
	result["state"] = flattenTpuV2VmState(resource["state"], resource_data, config)
	result["health"] = flattenTpuV2VmHealth(resource["health"], resource_data, config)
	result["health_description"] = flattenTpuV2VmHealthDescription(resource["healthDescription"], resource_data, config)
	result["api_version"] = flattenTpuV2VmApiVersion(resource["apiVersion"], resource_data, config)
	result["queued_resource"] = flattenTpuV2VmQueuedResource(resource["queuedResource"], resource_data, config)
	result["multislice_node"] = flattenTpuV2VmMultisliceNode(resource["multisliceNode"], resource_data, config)
	result["network_endpoints"] = flattenTpuV2VmNetworkEndpoints(resource["networkEndpoints"], resource_data, config)
	result["symptoms"] = flattenTpuV2VmSymptoms(resource["symptoms"], resource_data, config)
	result["terraform_labels"] = flattenTpuV2VmTerraformLabels(resource["labels"], resource_data, config)
	result["effective_labels"] = flattenTpuV2VmEffectiveLabels(resource["labels"], resource_data, config)

	return result, nil
}

func flattenTpuV2VmName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	return tpgresource.NameFromSelfLinkStateFunc(v)
}

func flattenTpuV2VmRuntimeVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmAcceleratorType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmCidrBlock(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmNetworkConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["network"] =
		flattenTpuV2VmNetworkConfigNetwork(original["network"], d, config)
	transformed["subnetwork"] =
		flattenTpuV2VmNetworkConfigSubnetwork(original["subnetwork"], d, config)
	transformed["enable_external_ips"] =
		flattenTpuV2VmNetworkConfigEnableExternalIps(original["enableExternalIps"], d, config)
	transformed["can_ip_forward"] =
		flattenTpuV2VmNetworkConfigCanIpForward(original["canIpForward"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2VmNetworkConfigNetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmNetworkConfigSubnetwork(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmNetworkConfigEnableExternalIps(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmNetworkConfigCanIpForward(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmServiceAccount(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["email"] =
		flattenTpuV2VmServiceAccountEmail(original["email"], d, config)
	transformed["scope"] =
		flattenTpuV2VmServiceAccountScope(original["scope"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2VmServiceAccountEmail(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmServiceAccountScope(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmSchedulingConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["preemptible"] =
		flattenTpuV2VmSchedulingConfigPreemptible(original["preemptible"], d, config)
	transformed["reserved"] =
		flattenTpuV2VmSchedulingConfigReserved(original["reserved"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2VmSchedulingConfigPreemptible(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmSchedulingConfigReserved(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmDataDisks(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"source_disk": flattenTpuV2VmDataDisksSourceDisk(original["sourceDisk"], d, config),
			"mode":        flattenTpuV2VmDataDisksMode(original["mode"], d, config),
		})
	}
	return transformed
}
func flattenTpuV2VmDataDisksSourceDisk(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmDataDisksMode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmShieldedInstanceConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["enable_secure_boot"] =
		flattenTpuV2VmShieldedInstanceConfigEnableSecureBoot(original["enableSecureBoot"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2VmShieldedInstanceConfigEnableSecureBoot(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmAcceleratorConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["type"] =
		flattenTpuV2VmAcceleratorConfigType(original["type"], d, config)
	transformed["topology"] =
		flattenTpuV2VmAcceleratorConfigTopology(original["topology"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2VmAcceleratorConfigType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmAcceleratorConfigTopology(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenTpuV2VmMetadata(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmTags(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmState(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmHealth(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmHealthDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmApiVersion(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmQueuedResource(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmMultisliceNode(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmNetworkEndpoints(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"ip_address":    flattenTpuV2VmNetworkEndpointsIpAddress(original["ipAddress"], d, config),
			"port":          flattenTpuV2VmNetworkEndpointsPort(original["port"], d, config),
			"access_config": flattenTpuV2VmNetworkEndpointsAccessConfig(original["accessConfig"], d, config),
		})
	}
	return transformed
}
func flattenTpuV2VmNetworkEndpointsIpAddress(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmNetworkEndpointsPort(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	// Handles the string fixed64 format
	if strVal, ok := v.(string); ok {
		if intVal, err := tpgresource.StringToFixed64(strVal); err == nil {
			return intVal
		}
	}

	// number values are represented as float64
	if floatVal, ok := v.(float64); ok {
		intVal := int(floatVal)
		return intVal
	}

	return v // let terraform core handle it otherwise
}

func flattenTpuV2VmNetworkEndpointsAccessConfig(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["external_ip"] =
		flattenTpuV2VmNetworkEndpointsAccessConfigExternalIp(original["externalIp"], d, config)
	return []interface{}{transformed}
}
func flattenTpuV2VmNetworkEndpointsAccessConfigExternalIp(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmSymptoms(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := make([]interface{}, 0, len(l))
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed = append(transformed, map[string]interface{}{
			"create_time":  flattenTpuV2VmSymptomsCreateTime(original["createTime"], d, config),
			"symptom_type": flattenTpuV2VmSymptomsSymptomType(original["symptomType"], d, config),
			"details":      flattenTpuV2VmSymptomsDetails(original["details"], d, config),
			"worker_id":    flattenTpuV2VmSymptomsWorkerId(original["workerId"], d, config),
		})
	}
	return transformed
}
func flattenTpuV2VmSymptomsCreateTime(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmSymptomsSymptomType(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmSymptomsDetails(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmSymptomsWorkerId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenTpuV2VmTerraformLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}

	transformed := make(map[string]interface{})
	if l, ok := d.GetOkExists("terraform_labels"); ok {
		for k := range l.(map[string]interface{}) {
			transformed[k] = v.(map[string]interface{})[k]
		}
	}

	return transformed
}

func flattenTpuV2VmEffectiveLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
