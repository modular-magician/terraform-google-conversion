// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package deploymentmanager

import (
	"context"
	"fmt"
	"log"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/cai2hcl/common"
	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/caiasset"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func customDiffDeploymentManagerDeployment(_ context.Context, d *schema.ResourceDiff, meta interface{}) error {
	if preview := d.Get("preview").(bool); preview {
		log.Printf("[WARN] Deployment preview set to true - Terraform will treat Deployment as recreate-only")

		if d.HasChange("preview") {
			if err := d.ForceNew("preview"); err != nil {
				return err
			}
		}

		if d.HasChange("target") {
			if err := d.ForceNew("target"); err != nil {
				return err
			}
		}

		if d.HasChange("labels") {
			if err := d.ForceNew("labels"); err != nil {
				return err
			}
		}
	}
	return nil
}

const DeploymentManagerDeploymentAssetType string = "www.googleapis.com/Deployment"

const DeploymentManagerDeploymentAssetNameRegex string = "projects/(?P<project>[^/]+)/global/deployments"

type DeploymentManagerDeploymentConverter struct {
	name   string
	schema map[string]*schema.Schema
}

func NewDeploymentManagerDeploymentConverter(name string, schema map[string]*schema.Schema) common.Converter {
	return &DeploymentManagerDeploymentConverter{
		name:   name,
		schema: schema,
	}
}

func (c *DeploymentManagerDeploymentConverter) Convert(assets []*caiasset.Asset) ([]*common.HCLResourceBlock, error) {
	var blocks []*common.HCLResourceBlock
	config := common.NewConfig()

	for _, asset := range assets {
		if asset == nil {
			continue
		}
		if asset.Resource != nil && asset.Resource.Data != nil {
			block, err := c.convertResourceData(asset, config)
			if err != nil {
				return nil, err
			}
			blocks = append(blocks, block)
		}
	}
	return blocks, nil
}

func (c *DeploymentManagerDeploymentConverter) convertResourceData(asset *caiasset.Asset, config *transport_tpg.Config) (*common.HCLResourceBlock, error) {
	if asset == nil || asset.Resource == nil || asset.Resource.Data == nil {
		return nil, fmt.Errorf("asset resource data is nil")
	}

	assetResourceData := asset.Resource.Data

	hcl, _ := resourceDeploymentManagerDeploymentRead(assetResourceData, config)

	ctyVal, err := common.MapToCtyValWithSchema(hcl, c.schema)
	if err != nil {
		return nil, err
	}

	resourceName := assetResourceData["name"].(string)

	return &common.HCLResourceBlock{
		Labels: []string{c.name, resourceName},
		Value:  ctyVal,
	}, nil
}

func resourceDeploymentManagerDeploymentRead(resource map[string]interface{}, config *transport_tpg.Config) (map[string]interface{}, error) {
	result := make(map[string]interface{})
	var resource_data *schema.ResourceData = nil

	result["name"] = flattenDeploymentManagerDeploymentName(resource["name"], resource_data, config)
	result["description"] = flattenDeploymentManagerDeploymentDescription(resource["description"], resource_data, config)
	result["labels"] = flattenDeploymentManagerDeploymentLabels(resource["labels"], resource_data, config)
	result["deployment_id"] = flattenDeploymentManagerDeploymentDeploymentId(resource["id"], resource_data, config)
	result["manifest"] = flattenDeploymentManagerDeploymentManifest(resource["manifest"], resource_data, config)
	result["self_link"] = flattenDeploymentManagerDeploymentSelfLink(resource["selfLink"], resource_data, config)

	return result, nil
}

func flattenDeploymentManagerDeploymentName(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeploymentManagerDeploymentDescription(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeploymentManagerDeploymentLabels(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	if v == nil {
		return v
	}
	l := v.([]interface{})
	transformed := schema.NewSet(schema.HashResource(deploymentmanagerDeploymentLabelsSchema()), []interface{}{})
	for _, raw := range l {
		original := raw.(map[string]interface{})
		if len(original) < 1 {
			// Do not include empty json objects coming back from the api
			continue
		}
		transformed.Add(map[string]interface{}{
			"key":   flattenDeploymentManagerDeploymentLabelsKey(original["key"], d, config),
			"value": flattenDeploymentManagerDeploymentLabelsValue(original["value"], d, config),
		})
	}
	return transformed
}
func flattenDeploymentManagerDeploymentLabelsKey(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeploymentManagerDeploymentLabelsValue(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeploymentManagerDeploymentDeploymentId(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeploymentManagerDeploymentManifest(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}

func flattenDeploymentManagerDeploymentSelfLink(v interface{}, d *schema.ResourceData, config *transport_tpg.Config) interface{} {
	return v
}
