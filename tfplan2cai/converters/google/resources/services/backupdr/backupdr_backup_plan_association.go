// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package backupdr

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const BackupDRBackupPlanAssociationAssetType string = "backupdr.googleapis.com/BackupPlanAssociation"

func ResourceConverterBackupDRBackupPlanAssociation() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: BackupDRBackupPlanAssociationAssetType,
		Convert:   GetBackupDRBackupPlanAssociationCaiObject,
	}
}

func GetBackupDRBackupPlanAssociationCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//backupdr.googleapis.com/projects/{{project}}/locations/{{location}}/backupPlanAssociations/{{backup_plan_association_id}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetBackupDRBackupPlanAssociationApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: BackupDRBackupPlanAssociationAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/backupdr/v1/rest",
				DiscoveryName:        "BackupPlanAssociation",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetBackupDRBackupPlanAssociationApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	resourceProp, err := expandBackupDRBackupPlanAssociationResource(d.Get("resource"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("resource"); !tpgresource.IsEmptyValue(reflect.ValueOf(resourceProp)) && (ok || !reflect.DeepEqual(v, resourceProp)) {
		obj["resource"] = resourceProp
	}
	backupPlanProp, err := expandBackupDRBackupPlanAssociationBackupPlan(d.Get("backup_plan"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("backup_plan"); !tpgresource.IsEmptyValue(reflect.ValueOf(backupPlanProp)) && (ok || !reflect.DeepEqual(v, backupPlanProp)) {
		obj["backupPlan"] = backupPlanProp
	}
	rulesConfigInfoProp, err := expandBackupDRBackupPlanAssociationRulesConfigInfo(d.Get("rules_config_info"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("rules_config_info"); !tpgresource.IsEmptyValue(reflect.ValueOf(rulesConfigInfoProp)) && (ok || !reflect.DeepEqual(v, rulesConfigInfoProp)) {
		obj["rulesConfigInfo"] = rulesConfigInfoProp
	}

	return obj, nil
}

func expandBackupDRBackupPlanAssociationResource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupPlanAssociationBackupPlan(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupPlanAssociationRulesConfigInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedRuleId, err := expandBackupDRBackupPlanAssociationRulesConfigInfoRuleId(original["rule_id"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedRuleId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["ruleId"] = transformedRuleId
		}

		transformedLastBackupState, err := expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupState(original["last_backup_state"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLastBackupState); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["lastBackupState"] = transformedLastBackupState
		}

		transformedLastBackupError, err := expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupError(original["last_backup_error"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLastBackupError); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["lastBackupError"] = transformedLastBackupError
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandBackupDRBackupPlanAssociationRulesConfigInfoRuleId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupState(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupError(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCode, err := expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupErrorCode(original["code"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["code"] = transformedCode
	}

	transformedMessage, err := expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupErrorMessage(original["message"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMessage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["message"] = transformedMessage
	}

	return transformed, nil
}

func expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupErrorCode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupPlanAssociationRulesConfigInfoLastBackupErrorMessage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
