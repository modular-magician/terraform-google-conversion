// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package backupdr

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const BackupDRBackupAssetType string = "backupdr.googleapis.com/Backup"

func ResourceConverterBackupDRBackup() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: BackupDRBackupAssetType,
		Convert:   GetBackupDRBackupCaiObject,
	}
}

func GetBackupDRBackupCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//backupdr.googleapis.com/projects/{{project}}/locations/{{location}}/backupVaults/{{backupvault}}/dataSources/{{datasource}}/backups/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetBackupDRBackupApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: BackupDRBackupAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/backupdr/v1/rest",
				DiscoveryName:        "Backup",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetBackupDRBackupApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	enforcedRetentionEndTimeProp, err := expandBackupDRBackupEnforcedRetentionEndTime(d.Get("enforced_retention_end_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("enforced_retention_end_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(enforcedRetentionEndTimeProp)) && (ok || !reflect.DeepEqual(v, enforcedRetentionEndTimeProp)) {
		obj["enforcedRetentionEndTime"] = enforcedRetentionEndTimeProp
	}
	eTagProp, err := expandBackupDRBackupETag(d.Get("e_tag"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("e_tag"); !tpgresource.IsEmptyValue(reflect.ValueOf(eTagProp)) && (ok || !reflect.DeepEqual(v, eTagProp)) {
		obj["eTag"] = eTagProp
	}
	backupApplianceLocksProp, err := expandBackupDRBackupBackupApplianceLocks(d.Get("backup_appliance_locks"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("backup_appliance_locks"); !tpgresource.IsEmptyValue(reflect.ValueOf(backupApplianceLocksProp)) && (ok || !reflect.DeepEqual(v, backupApplianceLocksProp)) {
		obj["backupApplianceLocks"] = backupApplianceLocksProp
	}
	labelsProp, err := expandBackupDRBackupEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return obj, nil
}

func expandBackupDRBackupEnforcedRetentionEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupETag(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedLockUntilTime, err := expandBackupDRBackupBackupApplianceLocksLockUntilTime(original["lock_until_time"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedLockUntilTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["lockUntilTime"] = transformedLockUntilTime
		}

		transformedBackupApplianceLockInfo, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfo(original["backup_appliance_lock_info"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedBackupApplianceLockInfo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["backupApplianceLockInfo"] = transformedBackupApplianceLockInfo
		}

		transformedServiceLockInfo, err := expandBackupDRBackupBackupApplianceLocksServiceLockInfo(original["service_lock_info"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedServiceLockInfo); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["serviceLockInfo"] = transformedServiceLockInfo
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandBackupDRBackupBackupApplianceLocksLockUntilTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedBackupApplianceId, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoBackupApplianceId(original["backup_appliance_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupApplianceId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupApplianceId"] = transformedBackupApplianceId
	}

	transformedBackupApplianceName, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoBackupApplianceName(original["backup_appliance_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupApplianceName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupApplianceName"] = transformedBackupApplianceName
	}

	transformedLockReason, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoLockReason(original["lock_reason"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLockReason); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["lockReason"] = transformedLockReason
	}

	transformedJobName, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoJobName(original["job_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedJobName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["jobName"] = transformedJobName
	}

	transformedBackupImage, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoBackupImage(original["backup_image"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedBackupImage); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["backupImage"] = transformedBackupImage
	}

	transformedSlaId, err := expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoSlaId(original["sla_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSlaId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["slaId"] = transformedSlaId
	}

	return transformed, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoBackupApplianceId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoBackupApplianceName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoLockReason(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoJobName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoBackupImage(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksBackupApplianceLockInfoSlaId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupBackupApplianceLocksServiceLockInfo(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedOperation, err := expandBackupDRBackupBackupApplianceLocksServiceLockInfoOperation(original["operation"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedOperation); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["operation"] = transformedOperation
	}

	return transformed, nil
}

func expandBackupDRBackupBackupApplianceLocksServiceLockInfoOperation(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandBackupDRBackupEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
