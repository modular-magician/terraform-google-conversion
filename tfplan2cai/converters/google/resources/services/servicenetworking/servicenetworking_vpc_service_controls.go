// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package servicenetworking

import (
	"fmt"
	"log"
	"net/http"
	"reflect"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func resourceServiceNetworkingVPCServiceControlsSet(d *schema.ResourceData, meta interface{}, config *transport_tpg.Config) error {
	userAgent, err := tpgresource.GenerateUserAgentString(d, config.UserAgent)
	if err != nil {
		return err
	}

	project, err := tpgresource.GetProject(d, config)
	if err != nil {
		return err
	}
	projectNumber, err := getProjectNumber(d, config, project, userAgent)
	if err != nil {
		return err
	}

	network := d.Get("network").(string)
	enabled := d.Get("enabled").(bool)

	obj := make(map[string]interface{})
	obj["consumerNetwork"] = fmt.Sprintf("projects/%s/global/networks/%s", projectNumber, network)

	url, err := tpgresource.ReplaceVars(d, config, "{{ServiceNetworkingBasePath}}services/{{service}}")
	if err != nil {
		return err
	}

	if enabled {
		url = url + ":enableVpcServiceControls"
	} else {
		url = url + ":disableVpcServiceControls"
	}

	log.Printf("[DEBUG] Setting service networking VPC service controls: %#v", obj)
	billingProject := ""

	// err == nil indicates that the billing_project value was found
	if bp, err := tpgresource.GetBillingProject(d, config); err == nil {
		billingProject = bp
	}

	headers := make(http.Header)

	res, err := transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
		Config:    config,
		Method:    "PATCH",
		Project:   billingProject,
		RawURL:    url,
		UserAgent: userAgent,
		Body:      obj,
		Timeout:   d.Timeout(schema.TimeoutCreate),
		Headers:   headers,
	})
	if err != nil {
		return fmt.Errorf("Error creating VPCServiceControls: %s", err)
	}

	id, err := tpgresource.ReplaceVars(d, config, "services/{{service}}/projects/{{project}}/networks/{{network}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	err = ServiceNetworkingOperationWaitTime(
		config, res, "Setting service networking VPC service controls", userAgent, project,
		d.Timeout(schema.TimeoutCreate))

	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to set service networking VPC service controls: %s", err)
	}

	log.Printf("[DEBUG] Finished setting service networking VPC service controls %q: %#v", d.Id(), res)

	return resourceServiceNetworkingVPCServiceControlsRead(d, meta)
}

const ServiceNetworkingVPCServiceControlsAssetType string = "servicenetworking.googleapis.com/VPCServiceControls"

func ResourceConverterServiceNetworkingVPCServiceControls() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: ServiceNetworkingVPCServiceControlsAssetType,
		Convert:   GetServiceNetworkingVPCServiceControlsCaiObject,
	}
}

func GetServiceNetworkingVPCServiceControlsCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//servicenetworking.googleapis.com//{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetServiceNetworkingVPCServiceControlsApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: ServiceNetworkingVPCServiceControlsAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/servicenetworking/v1/rest",
				DiscoveryName:        "VPCServiceControls",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetServiceNetworkingVPCServiceControlsApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	enabledProp, err := expandServiceNetworkingVPCServiceControlsEnabled(d.Get("enabled"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("enabled"); !tpgresource.IsEmptyValue(reflect.ValueOf(enabledProp)) && (ok || !reflect.DeepEqual(v, enabledProp)) {
		obj["enabled"] = enabledProp
	}
	projectProp, err := expandServiceNetworkingVPCServiceControlsProject(d.Get("project"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("project"); !tpgresource.IsEmptyValue(reflect.ValueOf(projectProp)) && (ok || !reflect.DeepEqual(v, projectProp)) {
		obj["project"] = projectProp
	}

	return obj, nil
}

func expandServiceNetworkingVPCServiceControlsEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandServiceNetworkingVPCServiceControlsProject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
