// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package monitoring

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const MonitoringSnoozeAssetType string = "monitoring.googleapis.com/Snooze"

func ResourceConverterMonitoringSnooze() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: MonitoringSnoozeAssetType,
		Convert:   GetMonitoringSnoozeCaiObject,
	}
}

func GetMonitoringSnoozeCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//monitoring.googleapis.com/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetMonitoringSnoozeApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: MonitoringSnoozeAssetType,
			Resource: &cai.AssetResource{
				Version:              "v3",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/monitoring/v3/rest",
				DiscoveryName:        "Snooze",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetMonitoringSnoozeApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	displayNameProp, err := expandMonitoringSnoozeDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	criteriaProp, err := expandMonitoringSnoozeCriteria(d.Get("criteria"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("criteria"); !tpgresource.IsEmptyValue(reflect.ValueOf(criteriaProp)) && (ok || !reflect.DeepEqual(v, criteriaProp)) {
		obj["criteria"] = criteriaProp
	}
	intervalProp, err := expandMonitoringSnoozeInterval(d.Get("interval"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("interval"); !tpgresource.IsEmptyValue(reflect.ValueOf(intervalProp)) && (ok || !reflect.DeepEqual(v, intervalProp)) {
		obj["interval"] = intervalProp
	}

	return obj, nil
}

func expandMonitoringSnoozeDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMonitoringSnoozeCriteria(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedPolicies, err := expandMonitoringSnoozeCriteriaPolicies(original["policies"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPolicies); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["policies"] = transformedPolicies
	}

	return transformed, nil
}

func expandMonitoringSnoozeCriteriaPolicies(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMonitoringSnoozeInterval(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedStartTime, err := expandMonitoringSnoozeIntervalStartTime(original["start_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedStartTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["startTime"] = transformedStartTime
	}

	transformedEndTime, err := expandMonitoringSnoozeIntervalEndTime(original["end_time"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEndTime); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["endTime"] = transformedEndTime
	}

	return transformed, nil
}

func expandMonitoringSnoozeIntervalStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandMonitoringSnoozeIntervalEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
