// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package containeraws

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

const ContainerAwsClusterAssetType string = "{{location}}-gkemulticloud.googleapis.com/Cluster"

func ResourceConverterContainerAwsCluster() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType: ContainerAwsClusterAssetType,
		Convert:   GetContainerAwsClusterCaiObject,
	}
}

func GetContainerAwsClusterCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	name, err := tpgresource.AssetName(d, config, "//{{location}}-gkemulticloud.googleapis.com/projects/{{project}}/locations/{{location}}/awsClusters/{{name}}")
	if err != nil {
		return []tpgresource.Asset{}, err
	}
	if obj, err := GetContainerAwsClusterApiObject(d, config); err == nil {
		return []tpgresource.Asset{{
			Name: name,
			Type: ContainerAwsClusterAssetType,
			Resource: &tpgresource.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-gkemulticloud/v1/rest",
				DiscoveryName:        "Cluster",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []tpgresource.Asset{}, err
	}
}

func GetContainerAwsClusterApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandContainerAwsClusterName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	descriptionProp, err := expandContainerAwsClusterDescription(d.Get("description"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("description"); !tpgresource.IsEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	networkingProp, err := expandContainerAwsClusterNetworking(d.Get("networking"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("networking"); !tpgresource.IsEmptyValue(reflect.ValueOf(networkingProp)) && (ok || !reflect.DeepEqual(v, networkingProp)) {
		obj["networking"] = networkingProp
	}
	awsRegionProp, err := expandContainerAwsClusterAwsRegion(d.Get("aws_region"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("aws_region"); !tpgresource.IsEmptyValue(reflect.ValueOf(awsRegionProp)) && (ok || !reflect.DeepEqual(v, awsRegionProp)) {
		obj["awsRegion"] = awsRegionProp
	}
	controlPlaneProp, err := expandContainerAwsClusterControlPlane(d.Get("control_plane"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("control_plane"); !tpgresource.IsEmptyValue(reflect.ValueOf(controlPlaneProp)) && (ok || !reflect.DeepEqual(v, controlPlaneProp)) {
		obj["controlPlane"] = controlPlaneProp
	}
	authorizationProp, err := expandContainerAwsClusterAuthorization(d.Get("authorization"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("authorization"); !tpgresource.IsEmptyValue(reflect.ValueOf(authorizationProp)) && (ok || !reflect.DeepEqual(v, authorizationProp)) {
		obj["authorization"] = authorizationProp
	}
	annotationsProp, err := expandContainerAwsClusterAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	fleetProp, err := expandContainerAwsClusterFleet(d.Get("fleet"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("fleet"); !tpgresource.IsEmptyValue(reflect.ValueOf(fleetProp)) && (ok || !reflect.DeepEqual(v, fleetProp)) {
		obj["fleet"] = fleetProp
	}
	loggingConfigProp, err := expandContainerAwsClusterLoggingConfig(d.Get("logging_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("logging_config"); ok || !reflect.DeepEqual(v, loggingConfigProp) {
		obj["loggingConfig"] = loggingConfigProp
	}
	monitoringConfigProp, err := expandContainerAwsClusterMonitoringConfig(d.Get("monitoring_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("monitoring_config"); ok || !reflect.DeepEqual(v, monitoringConfigProp) {
		obj["monitoringConfig"] = monitoringConfigProp
	}

	return obj, nil
}

func expandContainerAwsClusterName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterDescription(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworking(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVpcId, err := expandContainerAwsClusterNetworkingVpcId(original["vpc_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVpcId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["vpcId"] = transformedVpcId
	}

	transformedPodAddressCidrBlocks, err := expandContainerAwsClusterNetworkingPodAddressCidrBlocks(original["pod_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPodAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["podAddressCidrBlocks"] = transformedPodAddressCidrBlocks
	}

	transformedServiceAddressCidrBlocks, err := expandContainerAwsClusterNetworkingServiceAddressCidrBlocks(original["service_address_cidr_blocks"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAddressCidrBlocks); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAddressCidrBlocks"] = transformedServiceAddressCidrBlocks
	}

	transformedPerNodePoolSgRulesDisabled, err := expandContainerAwsClusterNetworkingPerNodePoolSgRulesDisabled(original["per_node_pool_sg_rules_disabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPerNodePoolSgRulesDisabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["perNodePoolSgRulesDisabled"] = transformedPerNodePoolSgRulesDisabled
	}

	return transformed, nil
}

func expandContainerAwsClusterNetworkingVpcId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworkingPodAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworkingServiceAddressCidrBlocks(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterNetworkingPerNodePoolSgRulesDisabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterAwsRegion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlane(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedVersion, err := expandContainerAwsClusterControlPlaneVersion(original["version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["version"] = transformedVersion
	}

	transformedInstanceType, err := expandContainerAwsClusterControlPlaneInstanceType(original["instance_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstanceType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instanceType"] = transformedInstanceType
	}

	transformedSshConfig, err := expandContainerAwsClusterControlPlaneSshConfig(original["ssh_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshConfig"] = transformedSshConfig
	}

	transformedSubnetIds, err := expandContainerAwsClusterControlPlaneSubnetIds(original["subnet_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSubnetIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["subnetIds"] = transformedSubnetIds
	}

	transformedConfigEncryption, err := expandContainerAwsClusterControlPlaneConfigEncryption(original["config_encryption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfigEncryption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["configEncryption"] = transformedConfigEncryption
	}

	transformedSecurityGroupIds, err := expandContainerAwsClusterControlPlaneSecurityGroupIds(original["security_group_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecurityGroupIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["securityGroupIds"] = transformedSecurityGroupIds
	}

	transformedIamInstanceProfile, err := expandContainerAwsClusterControlPlaneIamInstanceProfile(original["iam_instance_profile"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIamInstanceProfile); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iamInstanceProfile"] = transformedIamInstanceProfile
	}

	transformedRootVolume, err := expandContainerAwsClusterControlPlaneRootVolume(original["root_volume"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRootVolume); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rootVolume"] = transformedRootVolume
	}

	transformedMainVolume, err := expandContainerAwsClusterControlPlaneMainVolume(original["main_volume"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMainVolume); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["mainVolume"] = transformedMainVolume
	}

	transformedDatabaseEncryption, err := expandContainerAwsClusterControlPlaneDatabaseEncryption(original["database_encryption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDatabaseEncryption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["databaseEncryption"] = transformedDatabaseEncryption
	}

	transformedTags, err := expandContainerAwsClusterControlPlaneTags(original["tags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tags"] = transformedTags
	}

	transformedAwsServicesAuthentication, err := expandContainerAwsClusterControlPlaneAwsServicesAuthentication(original["aws_services_authentication"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAwsServicesAuthentication); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["awsServicesAuthentication"] = transformedAwsServicesAuthentication
	}

	transformedProxyConfig, err := expandContainerAwsClusterControlPlaneProxyConfig(original["proxy_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProxyConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["proxyConfig"] = transformedProxyConfig
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneInstanceType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneSshConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEc2KeyPair, err := expandContainerAwsClusterControlPlaneSshConfigEc2KeyPair(original["ec2_key_pair"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEc2KeyPair); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ec2KeyPair"] = transformedEc2KeyPair
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneSshConfigEc2KeyPair(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneSubnetIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneConfigEncryption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneConfigEncryptionKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneConfigEncryptionKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneSecurityGroupIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneIamInstanceProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolume(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSizeGib, err := expandContainerAwsClusterControlPlaneRootVolumeSizeGib(original["size_gib"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeGib); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizeGib"] = transformedSizeGib
	}

	transformedVolumeType, err := expandContainerAwsClusterControlPlaneRootVolumeVolumeType(original["volume_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeType"] = transformedVolumeType
	}

	transformedIops, err := expandContainerAwsClusterControlPlaneRootVolumeIops(original["iops"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIops); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iops"] = transformedIops
	}

	transformedThroughput, err := expandContainerAwsClusterControlPlaneRootVolumeThroughput(original["throughput"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedThroughput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["throughput"] = transformedThroughput
	}

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneRootVolumeKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeSizeGib(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeVolumeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeIops(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeThroughput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneRootVolumeKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolume(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSizeGib, err := expandContainerAwsClusterControlPlaneMainVolumeSizeGib(original["size_gib"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeGib); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizeGib"] = transformedSizeGib
	}

	transformedVolumeType, err := expandContainerAwsClusterControlPlaneMainVolumeVolumeType(original["volume_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeType"] = transformedVolumeType
	}

	transformedIops, err := expandContainerAwsClusterControlPlaneMainVolumeIops(original["iops"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIops); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iops"] = transformedIops
	}

	transformedThroughput, err := expandContainerAwsClusterControlPlaneMainVolumeThroughput(original["throughput"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedThroughput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["throughput"] = transformedThroughput
	}

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneMainVolumeKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeSizeGib(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeVolumeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeIops(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeThroughput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneMainVolumeKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneDatabaseEncryption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyArn, err := expandContainerAwsClusterControlPlaneDatabaseEncryptionKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneDatabaseEncryptionKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneTags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsClusterControlPlaneAwsServicesAuthentication(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedRoleArn, err := expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleArn(original["role_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRoleArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["roleArn"] = transformedRoleArn
	}

	transformedRoleSessionName, err := expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleSessionName(original["role_session_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRoleSessionName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["roleSessionName"] = transformedRoleSessionName
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneAwsServicesAuthenticationRoleSessionName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneProxyConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretArn, err := expandContainerAwsClusterControlPlaneProxyConfigSecretArn(original["secret_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretArn"] = transformedSecretArn
	}

	transformedSecretVersion, err := expandContainerAwsClusterControlPlaneProxyConfigSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandContainerAwsClusterControlPlaneProxyConfigSecretArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterControlPlaneProxyConfigSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterAuthorization(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedAdminUsers, err := expandContainerAwsClusterAuthorizationAdminUsers(original["admin_users"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAdminUsers); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["adminUsers"] = transformedAdminUsers
	}

	return transformed, nil
}

func expandContainerAwsClusterAuthorizationAdminUsers(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedUsername, err := expandContainerAwsClusterAuthorizationAdminUsersUsername(original["username"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedUsername); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["username"] = transformedUsername
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandContainerAwsClusterAuthorizationAdminUsersUsername(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsClusterFleet(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedProject, err := expandContainerAwsClusterFleetProject(original["project"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProject); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["project"] = transformedProject
	}

	transformedMembership, err := expandContainerAwsClusterFleetMembership(original["membership"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMembership); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["membership"] = transformedMembership
	}

	return transformed, nil
}

func expandContainerAwsClusterFleetProject(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterFleetMembership(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterLoggingConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedComponentConfig, err := expandContainerAwsClusterLoggingConfigComponentConfig(original["component_config"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["componentConfig"] = transformedComponentConfig
	}

	return transformed, nil
}

func expandContainerAwsClusterLoggingConfigComponentConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnableComponents, err := expandContainerAwsClusterLoggingConfigComponentConfigEnableComponents(original["enable_components"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["enableComponents"] = transformedEnableComponents
	}

	return transformed, nil
}

func expandContainerAwsClusterLoggingConfigComponentConfigEnableComponents(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsClusterMonitoringConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedManagedPrometheusConfig, err := expandContainerAwsClusterMonitoringConfigManagedPrometheusConfig(original["managed_prometheus_config"], d, config)
	if err != nil {
		return nil, err
	} else {
		transformed["managedPrometheusConfig"] = transformedManagedPrometheusConfig
	}

	return transformed, nil
}

func expandContainerAwsClusterMonitoringConfigManagedPrometheusConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 {
		return nil, nil
	}

	if l[0] == nil {
		transformed := make(map[string]interface{})
		return transformed, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEnabled, err := expandContainerAwsClusterMonitoringConfigManagedPrometheusConfigEnabled(original["enabled"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEnabled); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["enabled"] = transformedEnabled
	}

	return transformed, nil
}

func expandContainerAwsClusterMonitoringConfigManagedPrometheusConfigEnabled(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
