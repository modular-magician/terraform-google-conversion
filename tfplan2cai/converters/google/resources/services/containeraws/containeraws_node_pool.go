// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package containeraws

import (
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/tpgresource"
	transport_tpg "github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/transport"
)

const ContainerAwsNodePoolAssetType string = "{{location}}-gkemulticloud.googleapis.com/NodePool"

func ResourceConverterContainerAwsNodePool() tpgresource.ResourceConverter {
	return tpgresource.ResourceConverter{
		AssetType: ContainerAwsNodePoolAssetType,
		Convert:   GetContainerAwsNodePoolCaiObject,
	}
}

func GetContainerAwsNodePoolCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]tpgresource.Asset, error) {
	name, err := tpgresource.AssetName(d, config, "//{{location}}-gkemulticloud.googleapis.com/projects/{{project}}/locations/{{location}}/awsClusters/{{cluster}}/awsNodePools/{{name}}")
	if err != nil {
		return []tpgresource.Asset{}, err
	}
	if obj, err := GetContainerAwsNodePoolApiObject(d, config); err == nil {
		return []tpgresource.Asset{{
			Name: name,
			Type: ContainerAwsNodePoolAssetType,
			Resource: &tpgresource.AssetResource{
				Version:              "v1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{location}}-gkemulticloud/v1/rest",
				DiscoveryName:        "NodePool",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []tpgresource.Asset{}, err
	}
}

func GetContainerAwsNodePoolApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandContainerAwsNodePoolName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	versionProp, err := expandContainerAwsNodePoolVersion(d.Get("version"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("version"); !tpgresource.IsEmptyValue(reflect.ValueOf(versionProp)) && (ok || !reflect.DeepEqual(v, versionProp)) {
		obj["version"] = versionProp
	}
	configProp, err := expandContainerAwsNodePoolConfig(d.Get("config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("config"); !tpgresource.IsEmptyValue(reflect.ValueOf(configProp)) && (ok || !reflect.DeepEqual(v, configProp)) {
		obj["config"] = configProp
	}
	autoscalingProp, err := expandContainerAwsNodePoolAutoscaling(d.Get("autoscaling"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("autoscaling"); !tpgresource.IsEmptyValue(reflect.ValueOf(autoscalingProp)) && (ok || !reflect.DeepEqual(v, autoscalingProp)) {
		obj["autoscaling"] = autoscalingProp
	}
	subnetIdProp, err := expandContainerAwsNodePoolSubnetId(d.Get("subnet_id"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("subnet_id"); !tpgresource.IsEmptyValue(reflect.ValueOf(subnetIdProp)) && (ok || !reflect.DeepEqual(v, subnetIdProp)) {
		obj["subnetId"] = subnetIdProp
	}
	annotationsProp, err := expandContainerAwsNodePoolAnnotations(d.Get("annotations"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("annotations"); !tpgresource.IsEmptyValue(reflect.ValueOf(annotationsProp)) && (ok || !reflect.DeepEqual(v, annotationsProp)) {
		obj["annotations"] = annotationsProp
	}
	maxPodsConstraintProp, err := expandContainerAwsNodePoolMaxPodsConstraint(d.Get("max_pods_constraint"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("max_pods_constraint"); !tpgresource.IsEmptyValue(reflect.ValueOf(maxPodsConstraintProp)) && (ok || !reflect.DeepEqual(v, maxPodsConstraintProp)) {
		obj["maxPodsConstraint"] = maxPodsConstraintProp
	}

	return obj, nil
}

func expandContainerAwsNodePoolName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedInstanceType, err := expandContainerAwsNodePoolConfigInstanceType(original["instance_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInstanceType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["instanceType"] = transformedInstanceType
	}

	transformedRootVolume, err := expandContainerAwsNodePoolConfigRootVolume(original["root_volume"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRootVolume); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["rootVolume"] = transformedRootVolume
	}

	transformedTaints, err := expandContainerAwsNodePoolConfigTaints(original["taints"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTaints); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["taints"] = transformedTaints
	}

	transformedLabels, err := expandContainerAwsNodePoolConfigLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	transformedTags, err := expandContainerAwsNodePoolConfigTags(original["tags"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTags); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["tags"] = transformedTags
	}

	transformedIamInstanceProfile, err := expandContainerAwsNodePoolConfigIamInstanceProfile(original["iam_instance_profile"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIamInstanceProfile); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iamInstanceProfile"] = transformedIamInstanceProfile
	}

	transformedConfigEncryption, err := expandContainerAwsNodePoolConfigConfigEncryption(original["config_encryption"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfigEncryption); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["configEncryption"] = transformedConfigEncryption
	}

	transformedSshConfig, err := expandContainerAwsNodePoolConfigSshConfig(original["ssh_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSshConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sshConfig"] = transformedSshConfig
	}

	transformedSecurityGroupIds, err := expandContainerAwsNodePoolConfigSecurityGroupIds(original["security_group_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecurityGroupIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["securityGroupIds"] = transformedSecurityGroupIds
	}

	transformedProxyConfig, err := expandContainerAwsNodePoolConfigProxyConfig(original["proxy_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedProxyConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["proxyConfig"] = transformedProxyConfig
	}

	transformedImageType, err := expandContainerAwsNodePoolConfigImageType(original["image_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedImageType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["imageType"] = transformedImageType
	}

	transformedAutoscalingMetricsCollection, err := expandContainerAwsNodePoolConfigAutoscalingMetricsCollection(original["autoscaling_metrics_collection"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedAutoscalingMetricsCollection); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["autoscalingMetricsCollection"] = transformedAutoscalingMetricsCollection
	}

	return transformed, nil
}

func expandContainerAwsNodePoolConfigInstanceType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigRootVolume(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSizeGib, err := expandContainerAwsNodePoolConfigRootVolumeSizeGib(original["size_gib"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSizeGib); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["sizeGib"] = transformedSizeGib
	}

	transformedVolumeType, err := expandContainerAwsNodePoolConfigRootVolumeVolumeType(original["volume_type"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedVolumeType); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["volumeType"] = transformedVolumeType
	}

	transformedIops, err := expandContainerAwsNodePoolConfigRootVolumeIops(original["iops"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedIops); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["iops"] = transformedIops
	}

	transformedThroughput, err := expandContainerAwsNodePoolConfigRootVolumeThroughput(original["throughput"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedThroughput); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["throughput"] = transformedThroughput
	}

	transformedKmsKeyArn, err := expandContainerAwsNodePoolConfigRootVolumeKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsNodePoolConfigRootVolumeSizeGib(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigRootVolumeVolumeType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigRootVolumeIops(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigRootVolumeThroughput(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigRootVolumeKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigTaints(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	req := make([]interface{}, 0, len(l))
	for _, raw := range l {
		if raw == nil {
			continue
		}
		original := raw.(map[string]interface{})
		transformed := make(map[string]interface{})

		transformedKey, err := expandContainerAwsNodePoolConfigTaintsKey(original["key"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedKey); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["key"] = transformedKey
		}

		transformedValue, err := expandContainerAwsNodePoolConfigTaintsValue(original["value"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedValue); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["value"] = transformedValue
		}

		transformedEffect, err := expandContainerAwsNodePoolConfigTaintsEffect(original["effect"], d, config)
		if err != nil {
			return nil, err
		} else if val := reflect.ValueOf(transformedEffect); val.IsValid() && !tpgresource.IsEmptyValue(val) {
			transformed["effect"] = transformedEffect
		}

		req = append(req, transformed)
	}
	return req, nil
}

func expandContainerAwsNodePoolConfigTaintsKey(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigTaintsValue(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigTaintsEffect(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsNodePoolConfigTags(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsNodePoolConfigIamInstanceProfile(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigConfigEncryption(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedKmsKeyArn, err := expandContainerAwsNodePoolConfigConfigEncryptionKmsKeyArn(original["kms_key_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedKmsKeyArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["kmsKeyArn"] = transformedKmsKeyArn
	}

	return transformed, nil
}

func expandContainerAwsNodePoolConfigConfigEncryptionKmsKeyArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigSshConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedEc2KeyPair, err := expandContainerAwsNodePoolConfigSshConfigEc2KeyPair(original["ec2_key_pair"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEc2KeyPair); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["ec2KeyPair"] = transformedEc2KeyPair
	}

	return transformed, nil
}

func expandContainerAwsNodePoolConfigSshConfigEc2KeyPair(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigSecurityGroupIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigProxyConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedSecretArn, err := expandContainerAwsNodePoolConfigProxyConfigSecretArn(original["secret_arn"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretArn); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretArn"] = transformedSecretArn
	}

	transformedSecretVersion, err := expandContainerAwsNodePoolConfigProxyConfigSecretVersion(original["secret_version"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedSecretVersion); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["secretVersion"] = transformedSecretVersion
	}

	return transformed, nil
}

func expandContainerAwsNodePoolConfigProxyConfigSecretArn(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigProxyConfigSecretVersion(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigImageType(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigAutoscalingMetricsCollection(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedGranularity, err := expandContainerAwsNodePoolConfigAutoscalingMetricsCollectionGranularity(original["granularity"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGranularity); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["granularity"] = transformedGranularity
	}

	transformedMetrics, err := expandContainerAwsNodePoolConfigAutoscalingMetricsCollectionMetrics(original["metrics"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMetrics); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["metrics"] = transformedMetrics
	}

	return transformed, nil
}

func expandContainerAwsNodePoolConfigAutoscalingMetricsCollectionGranularity(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolConfigAutoscalingMetricsCollectionMetrics(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolAutoscaling(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMinNodeCount, err := expandContainerAwsNodePoolAutoscalingMinNodeCount(original["min_node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMinNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["minNodeCount"] = transformedMinNodeCount
	}

	transformedMaxNodeCount, err := expandContainerAwsNodePoolAutoscalingMaxNodeCount(original["max_node_count"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxNodeCount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxNodeCount"] = transformedMaxNodeCount
	}

	return transformed, nil
}

func expandContainerAwsNodePoolAutoscalingMinNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolAutoscalingMaxNodeCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolSubnetId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandContainerAwsNodePoolAnnotations(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandContainerAwsNodePoolMaxPodsConstraint(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedMaxPodsPerNode, err := expandContainerAwsNodePoolMaxPodsConstraintMaxPodsPerNode(original["max_pods_per_node"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedMaxPodsPerNode); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["maxPodsPerNode"] = transformedMaxPodsPerNode
	}

	return transformed, nil
}

func expandContainerAwsNodePoolMaxPodsConstraintMaxPodsPerNode(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
