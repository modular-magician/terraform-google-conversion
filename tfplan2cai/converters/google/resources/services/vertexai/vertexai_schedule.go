// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"encoding/json"
	"reflect"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v2/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const VertexAIScheduleAssetType string = "{{region}}-aiplatform.googleapis.com/Schedule"

func ResourceConverterVertexAISchedule() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: VertexAIScheduleAssetType,
		Convert:   GetVertexAIScheduleCaiObject,
	}
}

func GetVertexAIScheduleCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{region}}-aiplatform.googleapis.com/projects/{{project}}/locations/{{region}}/schedules/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetVertexAIScheduleApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: VertexAIScheduleAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{region}}-aiplatform/v1beta1/rest",
				DiscoveryName:        "Schedule",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetVertexAIScheduleApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	nameProp, err := expandVertexAIScheduleName(d.Get("name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("name"); !tpgresource.IsEmptyValue(reflect.ValueOf(nameProp)) && (ok || !reflect.DeepEqual(v, nameProp)) {
		obj["name"] = nameProp
	}
	displayNameProp, err := expandVertexAIScheduleDisplayName(d.Get("display_name"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("display_name"); !tpgresource.IsEmptyValue(reflect.ValueOf(displayNameProp)) && (ok || !reflect.DeepEqual(v, displayNameProp)) {
		obj["displayName"] = displayNameProp
	}
	cronProp, err := expandVertexAIScheduleCron(d.Get("cron"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("cron"); !tpgresource.IsEmptyValue(reflect.ValueOf(cronProp)) && (ok || !reflect.DeepEqual(v, cronProp)) {
		obj["cron"] = cronProp
	}
	startTimeProp, err := expandVertexAIScheduleStartTime(d.Get("start_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("start_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(startTimeProp)) && (ok || !reflect.DeepEqual(v, startTimeProp)) {
		obj["startTime"] = startTimeProp
	}
	endTimeProp, err := expandVertexAIScheduleEndTime(d.Get("end_time"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("end_time"); !tpgresource.IsEmptyValue(reflect.ValueOf(endTimeProp)) && (ok || !reflect.DeepEqual(v, endTimeProp)) {
		obj["endTime"] = endTimeProp
	}
	maxRunCountProp, err := expandVertexAIScheduleMaxRunCount(d.Get("max_run_count"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("max_run_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(maxRunCountProp)) && (ok || !reflect.DeepEqual(v, maxRunCountProp)) {
		obj["maxRunCount"] = maxRunCountProp
	}
	pausedProp, err := expandVertexAISchedulePaused(d.Get("paused"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("paused"); !tpgresource.IsEmptyValue(reflect.ValueOf(pausedProp)) && (ok || !reflect.DeepEqual(v, pausedProp)) {
		obj["paused"] = pausedProp
	}
	catchUpProp, err := expandVertexAIScheduleCatchUp(d.Get("catch_up"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("catch_up"); !tpgresource.IsEmptyValue(reflect.ValueOf(catchUpProp)) && (ok || !reflect.DeepEqual(v, catchUpProp)) {
		obj["catchUp"] = catchUpProp
	}
	maxConcurrentRunCountProp, err := expandVertexAIScheduleMaxConcurrentRunCount(d.Get("max_concurrent_run_count"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("max_concurrent_run_count"); !tpgresource.IsEmptyValue(reflect.ValueOf(maxConcurrentRunCountProp)) && (ok || !reflect.DeepEqual(v, maxConcurrentRunCountProp)) {
		obj["maxConcurrentRunCount"] = maxConcurrentRunCountProp
	}
	allowQueueingProp, err := expandVertexAIScheduleAllowQueueing(d.Get("allow_queueing"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("allow_queueing"); !tpgresource.IsEmptyValue(reflect.ValueOf(allowQueueingProp)) && (ok || !reflect.DeepEqual(v, allowQueueingProp)) {
		obj["allowQueueing"] = allowQueueingProp
	}
	createPipelineJobRequestProp, err := expandVertexAIScheduleCreatePipelineJobRequest(d.Get("create_pipeline_job_request"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("create_pipeline_job_request"); !tpgresource.IsEmptyValue(reflect.ValueOf(createPipelineJobRequestProp)) && (ok || !reflect.DeepEqual(v, createPipelineJobRequestProp)) {
		obj["createPipelineJobRequest"] = createPipelineJobRequestProp
	}

	return resourceVertexAIScheduleEncoder(d, config, obj)
}

func resourceVertexAIScheduleEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	delete(obj, "paused") // Field doesn't exist in API
	return obj, nil
}

func expandVertexAIScheduleName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCron(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleStartTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleEndTime(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleMaxRunCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAISchedulePaused(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCatchUp(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleMaxConcurrentRunCount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleAllowQueueing(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequest(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedParent, err := expandVertexAIScheduleCreatePipelineJobRequestParent(original["parent"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParent); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["parent"] = transformedParent
	}

	transformedPipelineJob, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJob(original["pipeline_job"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPipelineJob); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pipelineJob"] = transformedPipelineJob
	}

	return transformed, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestParent(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJob(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedDisplayName, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobDisplayName(original["display_name"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedDisplayName); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["displayName"] = transformedDisplayName
	}

	transformedPipelineSpec, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobPipelineSpec(original["pipeline_spec"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedPipelineSpec); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["pipelineSpec"] = transformedPipelineSpec
	}

	transformedLabels, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobLabels(original["labels"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedLabels); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["labels"] = transformedLabels
	}

	transformedRuntimeConfig, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfig(original["runtime_config"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedRuntimeConfig); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["runtimeConfig"] = transformedRuntimeConfig
	}

	transformedServiceAccount, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobServiceAccount(original["service_account"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedServiceAccount); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["serviceAccount"] = transformedServiceAccount
	}

	transformedNetwork, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobNetwork(original["network"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedNetwork); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["network"] = transformedNetwork
	}

	transformedTemplateUri, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobTemplateUri(original["template_uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedTemplateUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["templateUri"] = transformedTemplateUri
	}

	return transformed, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobDisplayName(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobPipelineSpec(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedParameters, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigParameters(original["parameters"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParameters); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["parameters"] = transformedParameters
	}

	transformedGcsOutputDirectory, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigGcsOutputDirectory(original["gcs_output_directory"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedGcsOutputDirectory); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["gcsOutputDirectory"] = transformedGcsOutputDirectory
	}

	transformedParameterValues, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigParameterValues(original["parameter_values"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedParameterValues); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["parameterValues"] = transformedParameterValues
	}

	transformedFailurePolicy, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigFailurePolicy(original["failure_policy"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFailurePolicy); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["failurePolicy"] = transformedFailurePolicy
	}

	transformedInputArtifacts, err := expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigInputArtifacts(original["input_artifacts"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedInputArtifacts); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["inputArtifacts"] = transformedInputArtifacts
	}

	return transformed, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigParameters(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigGcsOutputDirectory(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigParameterValues(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	b := []byte(v.(string))
	if len(b) == 0 {
		return nil, nil
	}
	m := make(map[string]interface{})
	if err := json.Unmarshal(b, &m); err != nil {
		return nil, err
	}
	return m, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigFailurePolicy(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobRuntimeConfigInputArtifacts(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobServiceAccount(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobNetwork(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIScheduleCreatePipelineJobRequestPipelineJobTemplateUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}
