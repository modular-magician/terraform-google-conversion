// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package vertexai

import (
	"reflect"
	"regexp"

	"github.com/GoogleCloudPlatform/terraform-google-conversion/v5/tfplan2cai/converters/google/resources/cai"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

const VertexAIFeatureOnlinestoreFeatureviewAssetType string = "{{region}}-aiplatform.googleapis.com/FeatureOnlinestoreFeatureview"

func ResourceConverterVertexAIFeatureOnlinestoreFeatureview() cai.ResourceConverter {
	return cai.ResourceConverter{
		AssetType: VertexAIFeatureOnlinestoreFeatureviewAssetType,
		Convert:   GetVertexAIFeatureOnlinestoreFeatureviewCaiObject,
	}
}

func GetVertexAIFeatureOnlinestoreFeatureviewCaiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) ([]cai.Asset, error) {
	name, err := cai.AssetName(d, config, "//{{region}}-aiplatform.googleapis.com/{{feature_online_store}}/featureViews/{{name}}")
	if err != nil {
		return []cai.Asset{}, err
	}
	if obj, err := GetVertexAIFeatureOnlinestoreFeatureviewApiObject(d, config); err == nil {
		return []cai.Asset{{
			Name: name,
			Type: VertexAIFeatureOnlinestoreFeatureviewAssetType,
			Resource: &cai.AssetResource{
				Version:              "v1beta1",
				DiscoveryDocumentURI: "https://www.googleapis.com/discovery/v1/apis/{{region}}-aiplatform/v1beta1/rest",
				DiscoveryName:        "FeatureOnlinestoreFeatureview",
				Data:                 obj,
			},
		}}, nil
	} else {
		return []cai.Asset{}, err
	}
}

func GetVertexAIFeatureOnlinestoreFeatureviewApiObject(d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]interface{}, error) {
	obj := make(map[string]interface{})
	syncConfigProp, err := expandVertexAIFeatureOnlinestoreFeatureviewSyncConfig(d.Get("sync_config"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("sync_config"); !tpgresource.IsEmptyValue(reflect.ValueOf(syncConfigProp)) && (ok || !reflect.DeepEqual(v, syncConfigProp)) {
		obj["syncConfig"] = syncConfigProp
	}
	bigQuerySourceProp, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(d.Get("big_query_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("big_query_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(bigQuerySourceProp)) && (ok || !reflect.DeepEqual(v, bigQuerySourceProp)) {
		obj["bigQuerySource"] = bigQuerySourceProp
	}
	featureRegistrySourceProp, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(d.Get("feature_registry_source"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("feature_registry_source"); !tpgresource.IsEmptyValue(reflect.ValueOf(featureRegistrySourceProp)) && (ok || !reflect.DeepEqual(v, featureRegistrySourceProp)) {
		obj["featureRegistrySource"] = featureRegistrySourceProp
	}
	labelsProp, err := expandVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(d.Get("effective_labels"), d, config)
	if err != nil {
		return nil, err
	} else if v, ok := d.GetOkExists("effective_labels"); !tpgresource.IsEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	return resourceVertexAIFeatureOnlinestoreFeatureviewEncoder(d, config, obj)
}

func resourceVertexAIFeatureOnlinestoreFeatureviewEncoder(d tpgresource.TerraformResourceData, meta interface{}, obj map[string]interface{}) (map[string]interface{}, error) {
	if v, ok := d.GetOk("feature_online_store"); ok {
		re := regexp.MustCompile("projects/(.+)/locations/(.+)/featureOnlineStores/(.+)$")
		if parts := re.FindStringSubmatch(v.(string)); parts != nil {
			d.Set("region", parts[2])
		}
	}

	return obj, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewSyncConfig(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedCron, err := expandVertexAIFeatureOnlinestoreFeatureviewSyncConfigCron(original["cron"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedCron); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["cron"] = transformedCron
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewSyncConfigCron(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedUri, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceUri(original["uri"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedUri); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["uri"] = transformedUri
	}

	transformedEntityIdColumns, err := expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceEntityIdColumns(original["entity_id_columns"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedEntityIdColumns); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["entityIdColumns"] = transformedEntityIdColumns
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceUri(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewBigQuerySourceEntityIdColumns(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySource(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureGroups, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroups(original["feature_groups"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureGroups); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureGroups"] = transformedFeatureGroups
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroups(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedFeatureGroupId, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureGroupId(original["feature_group_id"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureGroupId); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureGroupId"] = transformedFeatureGroupId
	}

	transformedFeatureIds, err := expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureIds(original["feature_ids"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedFeatureIds); val.IsValid() && !tpgresource.IsEmptyValue(val) {
		transformed["featureIds"] = transformedFeatureIds
	}

	return transformed, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureGroupId(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewFeatureRegistrySourceFeatureGroupsFeatureIds(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (interface{}, error) {
	return v, nil
}

func expandVertexAIFeatureOnlinestoreFeatureviewEffectiveLabels(v interface{}, d tpgresource.TerraformResourceData, config *transport_tpg.Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}
